{"_id":"mssql","_rev":"352-64b8fa07722982f946c73dcfce7516e4","name":"mssql","description":"Microsoft SQL Server client for Node.js.","dist-tags":{"latest":"5.1.0","alpha":"6.0.0-alpha.9","legacy":"4.3.7"},"versions":{"0.2.0":{"author":{"name":"Patrik Simek","url":"http://patriksimek.cz"},"name":"mssql","description":"MSSQL database connector for NodeJS","keywords":["database","mssql","sql"],"version":"0.2.0","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"*","tedious-connection-pool":"*"},"devDependencies":{"mocha":"*"},"engines":{"node":"*"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"_id":"mssql@0.2.0","dist":{"shasum":"b3e17a45434063d3b6cebcad43311d46a263a36c","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.2.0.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.2.1":{"author":{"name":"Patrik Simek","url":"http://patriksimek.cz"},"name":"mssql","description":"MSSQL database connector for NodeJS","keywords":["database","mssql","sql"],"version":"0.2.1","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"*","tedious-connection-pool":"*"},"devDependencies":{"mocha":"*"},"engines":{"node":"*"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"_id":"mssql@0.2.1","dist":{"shasum":"1d34e73e807cd7a0e93dbcfdc3d262b7aac70e6d","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.2.1.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.2.2":{"author":{"name":"Patrik Simek","url":"http://patriksimek.cz"},"name":"mssql","description":"MSSQL database connector for NodeJS","keywords":["database","mssql","sql"],"version":"0.2.2","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.1.5","tedious-connection-pool":">=0.1.1"},"devDependencies":{"coffee-script":"*","mocha":"*"},"engines":{"node":">=0.6"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"_id":"mssql@0.2.2","dist":{"shasum":"d1f9c6e76eb659370f4ff2129fba923c8a556ebf","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.2.2.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.2.3":{"author":{"name":"Patrik Simek","url":"http://patriksimek.cz"},"name":"mssql","description":"MSSQL database connector for NodeJS","keywords":["database","mssql","sql"],"version":"0.2.3","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.1.5","tedious-connection-pool":">=0.1.1"},"devDependencies":{"coffee-script":"*","mocha":"*"},"engines":{"node":">=0.6"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"_id":"mssql@0.2.3","dist":{"shasum":"6d673d17082956bea7cc6f4c981be32cc273515f","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.2.3.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.2.4":{"author":{"name":"Patrik Simek","url":"http://patriksimek.cz"},"name":"mssql","description":"MSSQL database connector for NodeJS","keywords":["database","mssql","sql"],"version":"0.2.4","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.1.5","tedious-connection-pool":">=0.1.1"},"devDependencies":{"coffee-script":">=1.6.2","mocha":">=1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha --compilers coffee:coffee-script --reporter spec"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"_id":"mssql@0.2.4","dist":{"shasum":"c63cc0dec0fda4aa15ff42e852943e459f524eda","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.2.4.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.2.5":{"author":{"name":"Patrik Simek","url":"http://patriksimek.cz"},"name":"mssql","description":"MSSQL database connector for NodeJS","keywords":["database","mssql","sql"],"version":"0.2.5","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.1.5","tedious-connection-pool":">=0.1.1"},"devDependencies":{"coffee-script":">=1.6.2","mocha":">=1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha --compilers coffee:coffee-script --reporter spec"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"_id":"mssql@0.2.5","dist":{"shasum":"956eea74b7ce6698fb958d5c765803a3abdd09ae","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.2.5.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.3.0":{"author":{"name":"Patrik Simek","url":"http://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for NodeJS.","keywords":["database","mssql","sql","msnodesql","sqlserver"],"version":"0.3.0","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.1.5","tedious-connection-pool":">=0.1.1"},"devDependencies":{"coffee-script":">=1.6.2","mocha":">=1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha --compilers coffee:coffee-script --reporter spec"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"_id":"mssql@0.3.0","dist":{"shasum":"d0cb34166305b4964ee191abd6853895bfb81230","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.3.0.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.3.1":{"author":{"name":"Patrik Simek","url":"http://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for NodeJS.","keywords":["database","mssql","sql","msnodesql","sqlserver"],"version":"0.3.1","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.1.5","tedious-connection-pool":">=0.1.1"},"devDependencies":{"coffee-script":">=1.6.2","mocha":">=1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha --compilers coffee:coffee-script --reporter spec"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"_id":"mssql@0.3.1","dist":{"shasum":"4e69201320238de2c0a20148d65ac1473bfad87f","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.3.1.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.3.2":{"author":{"name":"Patrik Simek","url":"http://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for NodeJS.","keywords":["database","mssql","sql","msnodesql","sqlserver"],"version":"0.3.2","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.1.5","tedious-connection-pool":">=0.1.1"},"devDependencies":{"coffee-script":">=1.6.2","mocha":">=1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha --compilers coffee:coffee-script --reporter spec"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"_id":"mssql@0.3.2","dist":{"shasum":"035c9e477cc23526d8bed1a2798567f517bed99b","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.3.2.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.3.3":{"author":{"name":"Patrik Simek","url":"http://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for NodeJS.","keywords":["database","mssql","sql","msnodesql","sqlserver"],"version":"0.3.3","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.1.5","tedious-connection-pool":">=0.1.1"},"devDependencies":{"coffee-script":">=1.6.2","mocha":">=1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha --compilers coffee:coffee-script --reporter spec"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"_id":"mssql@0.3.3","dist":{"shasum":"bd04a14415f43701c0f3807e4343c7b57194323f","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.3.3.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.3.4":{"author":{"name":"Patrik Simek","url":"http://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for NodeJS.","keywords":["database","mssql","sql","msnodesql","sqlserver"],"version":"0.3.4","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.1.5","tedious-connection-pool":">=0.1.1"},"devDependencies":{"coffee-script":">=1.6.2","mocha":">=1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha --compilers coffee:coffee-script --reporter spec"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"_id":"mssql@0.3.4","dist":{"shasum":"07a81b5a33da0e0ee8b2a00908a07f91a85df804","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.3.4.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.4.0":{"author":{"name":"Patrik Simek","url":"http://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for NodeJS.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver"],"version":"0.4.0","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.1.5","generic-pool":">=2.0.4"},"devDependencies":{"coffee-script":">=1.6.2","mocha":">=1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha --compilers coffee:coffee-script --reporter spec"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"_id":"mssql@0.4.0","dist":{"shasum":"c179673544cc0ca4462f5dd35991b96c42d4e8a0","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.4.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.4.1":{"author":{"name":"Patrik Simek","url":"http://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for NodeJS.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver"],"version":"0.4.1","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.1.5","generic-pool":">=2.0.4"},"devDependencies":{"coffee-script":">=1.6.2","mocha":">=1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha --compilers coffee:coffee-script --reporter spec"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"_id":"mssql@0.4.1","dist":{"shasum":"8801773712d38329e895473ce871047fbea79a30","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.4.1.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.4.2":{"author":{"name":"Patrik Simek","url":"http://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for NodeJS.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver"],"version":"0.4.2","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.1.5","generic-pool":">=2.0.4"},"devDependencies":{"coffee-script":">=1.6.2","mocha":">=1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha --compilers coffee:coffee-script --reporter spec"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"_id":"mssql@0.4.2","dist":{"shasum":"1be9f6d0521095a725716715a24d905f74988231","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.4.2.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.4.3":{"author":{"name":"Patrik Simek","url":"http://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for NodeJS.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver"],"version":"0.4.3","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.1.5","generic-pool":">=2.0.4"},"devDependencies":{"coffee-script":">=1.6.2","mocha":">=1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha --compilers coffee:coffee-script --reporter spec"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@0.4.3","dist":{"shasum":"85aa57e8a9ab49fdba8de5476a0150241b4ddda2","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.4.3.tgz"},"_from":".","_npmVersion":"1.3.22","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.4.4":{"author":{"name":"Patrik Simek","url":"http://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for NodeJS.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver"],"version":"0.4.4","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.1.5","generic-pool":">=2.0.4"},"devDependencies":{"coffee-script":">=1.6.2","mocha":">=1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha --compilers coffee:coffee-script --reporter spec"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@0.4.4","dist":{"shasum":"6919dc177a21f879ff920284735da0e1c00adee6","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.4.4.tgz"},"_from":".","_npmVersion":"1.3.22","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.4.5":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver"],"version":"0.4.5","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.1.5","generic-pool":">=2.0.4"},"devDependencies":{"coffee-script":">=1.6.2","mocha":">=1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@0.4.5","dist":{"shasum":"c58816eb069636941f094e3b4b2f1ad6af7f74d0","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.4.5.tgz"},"_from":".","_npmVersion":"1.3.22","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.5.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver"],"version":"0.5.0","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.1.5","generic-pool":">=2.0.4"},"devDependencies":{"coffee-script":">=1.6.2","mocha":">=1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha --expose-gc","prepublish":"coffee --compile --output ./lib ./src"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@0.5.0","dist":{"shasum":"d549f5d7c911aaae6a2de8da400ddc655b9614ac","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.5.0.tgz"},"_from":".","_npmVersion":"1.3.22","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.5.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver"],"version":"0.5.1","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.2.1","generic-pool":">=2.0.4"},"devDependencies":{"coffee-script":">=1.7.1","mocha":">=1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@0.5.1","dist":{"shasum":"3b9821b9f1138a58c33dd3ca3f0785b086c10830","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.5.1.tgz"},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.5.2":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"0.5.2","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.2.1","generic-pool":">=2.0.4"},"devDependencies":{"coffee-script":">=1.7.1","mocha":">=1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@0.5.2","dist":{"shasum":"ac4e0f90fc5071642364c337e9223ac783698216","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.5.2.tgz"},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.5.3":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"0.5.3","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":">=0.2.1","generic-pool":">=2.0.4"},"devDependencies":{"coffee-script":">=1.7.1","mocha":">=1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@0.5.3","dist":{"shasum":"470fc7e05ecf03824de804022128cb0743f87d5d","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.5.3.tgz"},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"0.5.4":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"0.5.4","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"0.2.4","generic-pool":"2.0.4"},"devDependencies":{"coffee-script":"1.7.1","mocha":"1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@0.5.4","_shasum":"281014a976ae92e1fd5997b297639bd8595cd1c2","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"281014a976ae92e1fd5997b297639bd8595cd1c2","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.5.4.tgz"},"directories":{}},"0.5.5":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"0.5.5","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"0.2.4","generic-pool":"2.0.4"},"devDependencies":{"coffee-script":"1.7.1","mocha":"1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@0.5.5","_shasum":"8e9bb51d15040ef63a84597ea740159fd64c832b","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"8e9bb51d15040ef63a84597ea740159fd64c832b","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.5.5.tgz"},"directories":{}},"0.6.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"0.6.0","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"^1.0.0","generic-pool":"^2.0.4"},"devDependencies":{"coffee-script":"^1.7.1","mocha":"^1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"gitHead":"47ac31610a6bbbbf64c5b120c2d2edc035b03b37","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@0.6.0","_shasum":"dc6078e0c2c1b7e2c1f3ef8ec7c61ce21882af55","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"dc6078e0c2c1b7e2c1f3ef8ec7c61ce21882af55","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.6.0.tgz"},"directories":{}},"0.6.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"0.6.1","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"^1.0.0","generic-pool":"^2.0.4"},"devDependencies":{"coffee-script":"^1.7.1","mocha":"^1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"gitHead":"1922557f09a4b944f0d110ab8458da75218c1885","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@0.6.1","_shasum":"cd7af3c3dbece73e99a52b5853b67a3529eec416","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"cd7af3c3dbece73e99a52b5853b67a3529eec416","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.6.1.tgz"},"directories":{}},"0.6.2":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"0.6.2","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"^1.0.0","generic-pool":"^2.0.4"},"devDependencies":{"coffee-script":"^1.7.1","mocha":"^1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"gitHead":"ab21a41e4a12db2b33e2ec29699c40bd0a640994","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@0.6.2","_shasum":"b52019337e75e5bec320f8441f61b507c5f74073","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"b52019337e75e5bec320f8441f61b507c5f74073","tarball":"https://registry.npmjs.org/mssql/-/mssql-0.6.2.tgz"},"directories":{}},"1.0.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"1.0.0","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"^1.0.0","generic-pool":"^2.0.4"},"devDependencies":{"coffee-script":"^1.7.1","mocha":"^1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@1.0.0","_shasum":"e700fb3bfbf9a7da3d9f0eda388f047110307854","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"e700fb3bfbf9a7da3d9f0eda388f047110307854","tarball":"https://registry.npmjs.org/mssql/-/mssql-1.0.0.tgz"},"directories":{}},"1.0.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"1.0.1","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"^1.0.0","generic-pool":"^2.0.4"},"devDependencies":{"coffee-script":"^1.7.1","mocha":"^1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"gitHead":"ee702c8a4a76c86e3472345ac0d4bfff5ff9f7b1","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@1.0.1","_shasum":"b8a80d3416d11956972c4646b6eba74019b2a13a","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"b8a80d3416d11956972c4646b6eba74019b2a13a","tarball":"https://registry.npmjs.org/mssql/-/mssql-1.0.1.tgz"},"directories":{}},"1.0.2":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"1.0.2","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"^1.0.0","generic-pool":"^2.0.4"},"devDependencies":{"coffee-script":"^1.7.1","mocha":"^1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"gitHead":"05090b0341b2c7e5732fc45159b6efd1c147ff0c","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@1.0.2","_shasum":"ce24142be736dfdc9b1a0286c3f9fcff2a55994e","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"ce24142be736dfdc9b1a0286c3f9fcff2a55994e","tarball":"https://registry.npmjs.org/mssql/-/mssql-1.0.2.tgz"},"directories":{}},"1.1.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"1.1.0","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"^1.1.0","generic-pool":"^2.0.4"},"devDependencies":{"coffee-script":"^1.7.1","mocha":"^1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"gitHead":"98756a80b1de8841c4c91e622f7b7a05769eb159","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@1.1.0","_shasum":"ae4dcd1b9e15d895c308bc9b12218f5f0b46350e","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"ae4dcd1b9e15d895c308bc9b12218f5f0b46350e","tarball":"https://registry.npmjs.org/mssql/-/mssql-1.1.0.tgz"},"directories":{}},"1.1.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"1.1.1","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"^1.2.2","generic-pool":"^2.0.4"},"devDependencies":{"coffee-script":"^1.7.1","mocha":"^1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"gitHead":"90f85afba02c10ae52b9e4c53405392285ff3158","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@1.1.1","_shasum":"8742725e195541397e6a6397e64abe6307935fab","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"8742725e195541397e6a6397e64abe6307935fab","tarball":"https://registry.npmjs.org/mssql/-/mssql-1.1.1.tgz"},"directories":{}},"1.2.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"1.2.0","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"^1.4.0","generic-pool":"^2.0.4"},"devDependencies":{"coffee-script":"^1.7.1","mocha":"^1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"gitHead":"28fd960b56bb732d59943c7ea472254f74ead940","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@1.2.0","_shasum":"fd6fac31dc0aaff83ac4dc4d826803d0239369c1","_from":".","_npmVersion":"1.4.23","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"fd6fac31dc0aaff83ac4dc4d826803d0239369c1","tarball":"https://registry.npmjs.org/mssql/-/mssql-1.2.0.tgz"},"directories":{}},"1.2.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"1.2.1","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"^1.5.3","generic-pool":"^2.0.4"},"devDependencies":{"coffee-script":"^1.7.1","mocha":"^1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"gitHead":"a8f37b19ca50e66f63bd16c9142e230226366ffb","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@1.2.1","_shasum":"ee3fbf76a7055df08a931c0fb9f06bccbeb07458","_from":".","_npmVersion":"1.4.23","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"ee3fbf76a7055df08a931c0fb9f06bccbeb07458","tarball":"https://registry.npmjs.org/mssql/-/mssql-1.2.1.tgz"},"directories":{}},"1.3.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"1.3.0","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"^1.7.0","generic-pool":"^2.0.4"},"devDependencies":{"coffee-script":"^1.7.1","mocha":"^1.12.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"gitHead":"f43ec24b839e331ead6d29e2cc871f477afc92e9","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@1.3.0","_shasum":"9039dbbb19c64f3bad0b69a3d1143ffc12ee8a1a","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"9039dbbb19c64f3bad0b69a3d1143ffc12ee8a1a","tarball":"https://registry.npmjs.org/mssql/-/mssql-1.3.0.tgz"},"directories":{}},"2.0.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"2.0.0","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"^1.10.0","generic-pool":"^2.1.1","promise":"^6.1.0"},"devDependencies":{"coffee-script":"^1.9.0","mocha":"^2.1.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"bin":{"mssql":"./bin/mssql"},"gitHead":"5e5688401bde39ac4c2f7e3b9ab32ede6376cf05","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@2.0.0","_shasum":"4f8c906903b182193390c788906751e01c7ed304","_from":".","_npmVersion":"2.5.1","_nodeVersion":"1.2.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"4f8c906903b182193390c788906751e01c7ed304","tarball":"https://registry.npmjs.org/mssql/-/mssql-2.0.0.tgz"},"directories":{}},"2.1.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"2.1.0","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"^1.10.0","generic-pool":"^2.1.1","promise":"^6.1.0"},"devDependencies":{"coffee-script":"^1.9.0","mocha":"^2.1.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"bin":{"mssql":"./bin/mssql"},"gitHead":"156e2d2b1afff776be3c8db5f0b620014927cd0d","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@2.1.0","_shasum":"9f237e71a6b37fafcf2c671ef122e03f165bf446","_from":".","_npmVersion":"2.5.1","_nodeVersion":"1.2.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"9f237e71a6b37fafcf2c671ef122e03f165bf446","tarball":"https://registry.npmjs.org/mssql/-/mssql-2.1.0.tgz"},"directories":{}},"2.1.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"2.1.1","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"^1.10.0","generic-pool":"^2.1.1","promise":"^6.1.0"},"devDependencies":{"coffee-script":"^1.9.0","mocha":"^2.1.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"bin":{"mssql":"./bin/mssql"},"gitHead":"69e71bdb26773597bda23b17adb0a14b7d4a4d4a","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@2.1.1","_shasum":"fb2c9610d5dc0d37bbd78f50cb83dc928e501afc","_from":".","_npmVersion":"2.5.1","_nodeVersion":"1.2.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"fb2c9610d5dc0d37bbd78f50cb83dc928e501afc","tarball":"https://registry.npmjs.org/mssql/-/mssql-2.1.1.tgz"},"directories":{}},"2.1.2":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"2.1.2","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"^1.11.0","generic-pool":"^2.1.1","promise":"^6.1.0"},"devDependencies":{"coffee-script":"^1.9.0","mocha":"^2.1.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"bin":{"mssql":"./bin/mssql"},"gitHead":"2a91391be7cbff77cbdb281b1610f79af119833a","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@2.1.2","_shasum":"fc371c72c2a32eb02fad190c18c3948305c1379c","_from":".","_npmVersion":"2.5.1","_nodeVersion":"1.2.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"fc371c72c2a32eb02fad190c18c3948305c1379c","tarball":"https://registry.npmjs.org/mssql/-/mssql-2.1.2.tgz"},"directories":{}},"2.1.3":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"2.1.3","main":"index.js","repository":{"type":"git","url":"https://github.com/patriksimek/node-mssql"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/mit-license.php"}],"dependencies":{"tedious":"^1.11.0","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.0","mocha":"^2.1.0"},"engines":{"node":">=0.6"},"scripts":{"test":"mocha","prepublish":"coffee --compile --output ./lib ./src"},"bin":{"mssql":"./bin/mssql"},"gitHead":"63eda07acdd7ac7b659c0fab6d32936379d6f5c7","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql","_id":"mssql@2.1.3","_shasum":"0764d06a653960cd7e4460dcaf8f125318a6f7c3","_from":".","_npmVersion":"2.7.6","_nodeVersion":"1.2.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"0764d06a653960cd7e4460dcaf8f125318a6f7c3","tarball":"https://registry.npmjs.org/mssql/-/mssql-2.1.3.tgz"},"directories":{}},"2.1.4":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"2.1.4","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"^1.11.0","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"bb45af4ae5d73475516b13270ecfc73e1d7e2ec2","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@2.1.4","_shasum":"a958ea29b361c5ddd832162170c12f1c92b87df3","_from":".","_npmVersion":"2.9.0","_nodeVersion":"2.0.1","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"a958ea29b361c5ddd832162170c12f1c92b87df3","tarball":"https://registry.npmjs.org/mssql/-/mssql-2.1.4.tgz"},"directories":{}},"2.1.5":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"2.1.5","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"^1.11.0","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"0a4355de0030f90b7d07c5ddf59ecd267e017f41","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@2.1.5","_shasum":"d391e3fcf0815a336c2b67a0bc728f35086848e8","_from":".","_npmVersion":"2.9.0","_nodeVersion":"2.0.1","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"d391e3fcf0815a336c2b67a0bc728f35086848e8","tarball":"https://registry.npmjs.org/mssql/-/mssql-2.1.5.tgz"},"directories":{}},"2.1.6":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"2.1.6","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"^1.11.2","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"a276f16b2f9c9de6c3c5e97a9319fa6d770f57c1","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@2.1.6","_shasum":"65ecff93b6ce0103ec52b8e85729d26fd619b708","_from":".","_npmVersion":"2.9.0","_nodeVersion":"2.0.1","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"65ecff93b6ce0103ec52b8e85729d26fd619b708","tarball":"https://registry.npmjs.org/mssql/-/mssql-2.1.6.tgz"},"directories":{}},"2.1.7":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"2.1.7","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"1.11.4","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"205a91374218b99e9fb0ead81df5c6ddfac91ed9","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@2.1.7","_shasum":"54acf1f0de6f7c5a84dfbbb05e4d3a337e046805","_from":".","_npmVersion":"2.12.0","_nodeVersion":"2.3.1","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"54acf1f0de6f7c5a84dfbbb05e4d3a337e046805","tarball":"https://registry.npmjs.org/mssql/-/mssql-2.1.7.tgz"},"directories":{}},"2.1.8":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"2.1.8","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"~1.12.2","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"b64deb69dabf89739e507e94259a78da7627afe8","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@2.1.8","_shasum":"5af92825a022c1b50cd5554e056591d8f6f50582","_from":".","_npmVersion":"2.12.0","_nodeVersion":"2.3.1","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"5af92825a022c1b50cd5554e056591d8f6f50582","tarball":"https://registry.npmjs.org/mssql/-/mssql-2.1.8.tgz"},"directories":{}},"2.2.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"2.2.0","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"~1.12.2","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"e7c150c53acc2c88c2374b8b802844370cde3670","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@2.2.0","_shasum":"a4eab15d9741b459273fe996af43f93cba49959d","_from":".","_npmVersion":"2.12.0","_nodeVersion":"2.3.1","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"a4eab15d9741b459273fe996af43f93cba49959d","tarball":"https://registry.npmjs.org/mssql/-/mssql-2.2.0.tgz"},"directories":{}},"2.2.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"2.2.1","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"~1.12.3","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"e4950453da8d96b81f753ea382a7ae0f06184b18","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@2.2.1","_shasum":"5f493c7566e6494d831fd5429e854bd4ffb79d69","_from":".","_npmVersion":"2.13.2","_nodeVersion":"2.5.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"5f493c7566e6494d831fd5429e854bd4ffb79d69","tarball":"https://registry.npmjs.org/mssql/-/mssql-2.2.1.tgz"},"directories":{}},"2.3.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"2.3.0","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"~1.12.3","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"ea072cb52d04f1bb423501267e943a073f960dd7","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@2.3.0","_shasum":"4503468684d3bc64b12e913a98d5d4ddced9a3ff","_from":".","_npmVersion":"2.13.2","_nodeVersion":"2.5.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"4503468684d3bc64b12e913a98d5d4ddced9a3ff","tarball":"https://registry.npmjs.org/mssql/-/mssql-2.3.0.tgz"},"directories":{}},"2.3.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"2.3.1","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"~1.12.3","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"552ea0518ff860466b295670e7e2b305ab603f14","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@2.3.1","_shasum":"4c7601a410d7f4d80fb23e1574651c1c7b85df71","_from":".","_npmVersion":"2.14.3","_nodeVersion":"4.1.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"dist":{"shasum":"4c7601a410d7f4d80fb23e1574651c1c7b85df71","tarball":"https://registry.npmjs.org/mssql/-/mssql-2.3.1.tgz"},"directories":{}},"2.3.2":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"2.3.2","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"~1.13.1","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"34b4fc78a085f32937c8e7cdd9fbb875216ab318","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@2.3.2","_shasum":"95da6b51ed61f8cc840f67e6bb307e549efc9ba3","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.2","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"95da6b51ed61f8cc840f67e6bb307e549efc9ba3","tarball":"https://registry.npmjs.org/mssql/-/mssql-2.3.2.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"2.4.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver"],"version":"2.4.0","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"~1.13.1","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"b7352775dc94b61d3721de41919786a7db553dd9","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@2.4.0","_shasum":"726d663c664fb6fbb37819083e82483bf91edb96","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.2","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"726d663c664fb6fbb37819083e82483bf91edb96","tarball":"https://registry.npmjs.org/mssql/-/mssql-2.4.0.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"2.5.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"2.5.0","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"~1.13.1","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"70f138fdb54ad234c7cf13c41b610003db9ea270","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@2.5.0","_shasum":"380fe178d54211aacd3af323ac19f9a7845590ef","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.2","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"380fe178d54211aacd3af323ac19f9a7845590ef","tarball":"https://registry.npmjs.org/mssql/-/mssql-2.5.0.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"3.0.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"3.0.0","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"~1.13.1","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"676d448761e0f7c0fcbf4c695f577a0bf04c8988","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@3.0.0","_shasum":"7ad93af90f0c06ad0946269a0c406e770871c655","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.2","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"7ad93af90f0c06ad0946269a0c406e770871c655","tarball":"https://registry.npmjs.org/mssql/-/mssql-3.0.0.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{}},"3.0.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"3.0.1","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"~1.13.1","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"0891182293a30ea148baab1d698a26b68929ecae","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@3.0.1","_shasum":"3fe7b73c10a3f1048c34c368f433470e8f01dfd6","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.2","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"3fe7b73c10a3f1048c34c368f433470e8f01dfd6","tarball":"https://registry.npmjs.org/mssql/-/mssql-3.0.1.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"_npmOperationalInternal":{"host":"packages-9-west.internal.npmjs.com","tmp":"tmp/mssql-3.0.1.tgz_1454549319874_0.6715567889623344"},"directories":{}},"3.1.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"3.1.0","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"~1.13.1","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"25f3a6f5d6775aa8cd8399cf71622819af237009","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@3.1.0","_shasum":"05cd298555706c267d45700967ee120453065a44","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.2","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"05cd298555706c267d45700967ee120453065a44","tarball":"https://registry.npmjs.org/mssql/-/mssql-3.1.0.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"_npmOperationalInternal":{"host":"packages-5-east.internal.npmjs.com","tmp":"tmp/mssql-3.1.0.tgz_1455402293407_0.0353520184289664"},"directories":{}},"3.1.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"3.1.1","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"~1.13.1","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"01d6a33024cb1197479241501ac576cd027ca465","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@3.1.1","_shasum":"26a60b2a98d99b5910e0c7cb6a89b60f3fd2c5b0","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.2","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"26a60b2a98d99b5910e0c7cb6a89b60f3fd2c5b0","tarball":"https://registry.npmjs.org/mssql/-/mssql-3.1.1.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"_npmOperationalInternal":{"host":"packages-5-east.internal.npmjs.com","tmp":"tmp/mssql-3.1.1.tgz_1456013694820_0.869314937852323"},"directories":{}},"3.1.2":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"An easy-to-use MSSQL database connector for Node.js.","keywords":["database","mssql","sql","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"3.1.2","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"~1.13.1","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"c32b87f4fa1f46e5e8fa8dda4effc12e5570f9c4","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@3.1.2","_shasum":"7d38973d132a288d5560297dd3bedf29b0f0e6e7","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.2","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"7d38973d132a288d5560297dd3bedf29b0f0e6e7","tarball":"https://registry.npmjs.org/mssql/-/mssql-3.1.2.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/mssql-3.1.2.tgz_1457470221605_0.3447149912826717"},"directories":{}},"3.2.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"3.2.0","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"~1.14.0","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-msnodesqlv8":"mocha test/integration -g msnodesqlv8","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"2772b41c3edf05225120e3cd6d0d2817120c45b9","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@3.2.0","_shasum":"bdc46a9c790420be6acefdc12c06b2b089e9816e","_from":".","_npmVersion":"3.8.3","_nodeVersion":"4.4.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"bdc46a9c790420be6acefdc12c06b2b089e9816e","tarball":"https://registry.npmjs.org/mssql/-/mssql-3.2.0.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/mssql-3.2.0.tgz_1460334241899_0.49055447638966143"},"directories":{}},"3.2.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"3.2.1","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"~1.14.0","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-msnodesqlv8":"mocha test/integration -g msnodesqlv8","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"fadf2cbfad4cbab9c02f604e0b4dac0661bd6c9a","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@3.2.1","_shasum":"d37d754763c3b99389e4ff4e9e01da43930e816f","_from":".","_npmVersion":"3.8.3","_nodeVersion":"4.4.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"d37d754763c3b99389e4ff4e9e01da43930e816f","tarball":"https://registry.npmjs.org/mssql/-/mssql-3.2.1.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/mssql-3.2.1.tgz_1460762196220_0.3530531693249941"},"directories":{}},"3.3.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"3.3.0","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"tedious":"~1.14.0","generic-pool":"^2.2.0","promise":"^7.0.1"},"devDependencies":{"coffee-script":"^1.9.3","mocha":"^2.1.0"},"engines":{"node":">=0.10"},"scripts":{"prepublish":"coffee --compile --output ./lib ./src","compile":"coffee --compile --output ./lib ./src","test":"mocha test/unit","test-tedious":"mocha test/integration -g tedious","test-msnodesql":"mocha test/integration -g msnodesql","test-msnodesqlv8":"mocha test/integration -g msnodesqlv8","test-tds":"mocha test/integration -g tds","test-cli":"mocha test/integration -g cli"},"bin":{"mssql":"./bin/mssql"},"gitHead":"817a555a37204edb63067967ae8f5b4b7e7491e3","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@3.3.0","_shasum":"b6e6337ff123e87bf8aee1e6c8344b53ca5da856","_from":".","_npmVersion":"3.8.3","_nodeVersion":"4.4.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"b6e6337ff123e87bf8aee1e6c8344b53ca5da856","tarball":"https://registry.npmjs.org/mssql/-/mssql-3.3.0.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/mssql-3.3.0.tgz_1462576096194_0.3303074589930475"},"directories":{}},"4.0.0-alpha1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.0.0-alpha1","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^2.6.1","generic-pool":"^3.1.7","tedious":"~1.14.0"},"devDependencies":{"mocha":"^2.1.0"},"engines":{"node":">=4"},"scripts":{"test":"mocha test/common/unit.js","test-tedious":"mocha test/tedious","test-msnodesqlv8":"mocha test/msnodesqlv8","test-cli":"mocha test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"xo":{"esnext":true,"rules":{"eqeqeq":"off","no-eq-null":"off"}},"gitHead":"bdb67e346254f194d056bb1a194c58873cfb1d67","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@4.0.0-alpha1","_shasum":"4581beaab5d2cb4653561b2333701cda4b8877de","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.9.5","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"4581beaab5d2cb4653561b2333701cda4b8877de","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.0.0-alpha1.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/mssql-4.0.0-alpha1.tgz_1487041266791_0.28603670373559"},"directories":{}},"4.0.0-alpha2":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.0.0-alpha2","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^2.6.1","generic-pool":"^3.1.7","tedious":"~1.15.0"},"devDependencies":{"mocha":"^2.1.0"},"engines":{"node":">=4"},"scripts":{"test":"mocha test/common/unit.js","test-tedious":"mocha test/tedious","test-msnodesqlv8":"mocha test/msnodesqlv8","test-cli":"mocha test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"xo":{"esnext":true,"rules":{"eqeqeq":"off","no-eq-null":"off"}},"gitHead":"063cbac919e0138292a0c04186734f0ce1d7d9fc","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@4.0.0-alpha2","_shasum":"63bd2f134808bea97d4b181c27fa08fdb351fbc4","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.1","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"63bd2f134808bea97d4b181c27fa08fdb351fbc4","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.0.0-alpha2.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/mssql-4.0.0-alpha2.tgz_1489198330006_0.03831758559681475"},"directories":{}},"4.0.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.0.0","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^2.6.3","generic-pool":"^3.1.7","tedious":"^2.0.0"},"devDependencies":{"mocha":"^2.1.0","standard":"^9.0.2"},"engines":{"node":">=4"},"scripts":{"test":"standard && node_modules/.bin/mocha test/common/unit.js","test-tedious":"mocha test/tedious","test-msnodesqlv8":"mocha test/msnodesqlv8","test-cli":"mocha test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"353a206f8e96e3ddf5cc294fc5e52363a9aaf50f","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@4.0.0","_shasum":"7e1cc9a2a77f22408adf31bd3e3361fe6b9a703a","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.10.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"7e1cc9a2a77f22408adf31bd3e3361fe6b9a703a","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.0.0.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/mssql-4.0.0.tgz_1491007213422_0.5343425741884857"},"directories":{}},"4.0.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.0.1","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^2.6.3","generic-pool":"^3.1.7","tedious":"^2.0.0"},"devDependencies":{"mocha":"^2.1.0","standard":"^9.0.2"},"engines":{"node":">=4"},"scripts":{"test":"standard && node_modules/.bin/mocha test/common/unit.js","test-tedious":"mocha test/tedious","test-msnodesqlv8":"mocha test/msnodesqlv8","test-cli":"mocha test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"e36e30aba611866b2095f8f7f1405911f9d273ca","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@4.0.1","_shasum":"5ac0028245f99a6bc8bd8dcd117c34244eba9f5b","_from":".","_npmVersion":"4.5.0","_nodeVersion":"6.10.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"5ac0028245f99a6bc8bd8dcd117c34244eba9f5b","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.0.1.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/mssql-4.0.1.tgz_1491084030594_0.04683448770083487"},"directories":{}},"4.0.2":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.0.2","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^2.6.3","generic-pool":"^3.1.7","tedious":"^2.0.0"},"devDependencies":{"mocha":"^2.1.0","standard":"^9.0.2"},"engines":{"node":">=4"},"scripts":{"test":"standard && node_modules/.bin/mocha test/common/unit.js","test-tedious":"mocha test/tedious","test-msnodesqlv8":"mocha test/msnodesqlv8","test-cli":"mocha test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"1a490f355969a995d17aafd5e217221c67127906","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@4.0.2","_shasum":"827c663b8657536e75a1df89fb7d8fc79cf31967","_from":".","_npmVersion":"4.5.0","_nodeVersion":"6.10.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"827c663b8657536e75a1df89fb7d8fc79cf31967","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.0.2.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/mssql-4.0.2.tgz_1492632903288_0.9668218288570642"},"directories":{}},"4.0.3":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.0.3","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^2.6.3","generic-pool":"^3.1.7","tedious":"^2.0.0"},"devDependencies":{"mocha":"^2.1.0","standard":"^9.0.2"},"engines":{"node":">=4"},"scripts":{"test":"standard && node_modules/.bin/mocha test/common/unit.js","test-tedious":"mocha test/tedious","test-msnodesqlv8":"mocha test/msnodesqlv8","test-cli":"mocha test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"dee9086569ea007d632813a1f209e6b2a716c2e3","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@4.0.3","_shasum":"4b0d848eb9318f587cc069a84cfc4f6b5b558999","_from":".","_npmVersion":"4.5.0","_nodeVersion":"6.10.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"4b0d848eb9318f587cc069a84cfc4f6b5b558999","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.0.3.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/mssql-4.0.3.tgz_1493138597801_0.721372454892844"},"directories":{}},"4.0.4":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.0.4","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^2.6.3","generic-pool":"^3.1.7","tedious":"^2.0.0"},"devDependencies":{"mocha":"^2.1.0","standard":"^9.0.2"},"engines":{"node":">=4"},"scripts":{"test":"standard && node_modules/.bin/mocha test/common/unit.js","test-tedious":"mocha test/tedious","test-msnodesqlv8":"mocha test/msnodesqlv8","test-cli":"mocha test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"a16180bd4253656753093de08cb50a627808b6b2","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@4.0.4","_shasum":"416d67df7653536cb6384951891fa1a47572a49b","_from":".","_npmVersion":"4.5.0","_nodeVersion":"6.10.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"shasum":"416d67df7653536cb6384951891fa1a47572a49b","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.0.4.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/mssql-4.0.4.tgz_1493156314169_0.1359078933019191"},"directories":{}},"4.1.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.1.0","main":"index.js","repository":{"type":"git","url":"git+https://github.com/patriksimek/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^2.6.3","generic-pool":"^3.1.7","tedious":"^2.0.0"},"devDependencies":{"mocha":"^2.1.0","standard":"^9.0.2"},"engines":{"node":">=4"},"scripts":{"test":"standard && node_modules/.bin/mocha test/common/unit.js","test-tedious":"mocha test/tedious","test-msnodesqlv8":"mocha test/msnodesqlv8","test-cli":"mocha test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"85c14ff5b01b1ae0575591c7e4f1c7327cf82e51","bugs":{"url":"https://github.com/patriksimek/node-mssql/issues"},"homepage":"https://github.com/patriksimek/node-mssql#readme","_id":"mssql@4.1.0","_npmVersion":"5.4.2","_nodeVersion":"8.6.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"integrity":"sha512-ekht0eILEV0P1CbpkwpAxhgO+/5goYizUJrt7pgDm3fP6lGKe0+8V9jhTvQZ8DPHkycSd0wYGUoz/YA7VN7kQQ==","shasum":"5a70e24d751c28bcb9f23acf709c1bdaccc8eae6","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.1.0.tgz"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql-4.1.0.tgz_1506702391005_0.8393137641251087"},"directories":{}},"4.2.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.2.0","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.1.0","generic-pool":"^3.4.2","tedious":"^2.3.1"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=4"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha test/common/unit.js","test-tedious":"mocha test/tedious","test-msnodesqlv8":"mocha test/msnodesqlv8","test-cli":"mocha test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"readme":"# node-mssql\n\nMicrosoft SQL Server client for Node.js\n\n[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Travis CI][travis-image]][travis-url] [![Appveyor CI][appveyor-image]][appveyor-url] [![Join the chat at https://gitter.im/patriksimek/node-mssql](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/patriksimek/node-mssql?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSupported TDS drivers:\n- [Tedious][tedious-url] (pure JavaScript - Windows/macOS/Linux, default)\n- [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server][msnodesqlv8-url] (native - Windows only)\n\n## Installation\n\n    npm install mssql\n\n## Quick Example\n\n```javascript\nconst sql = require('mssql')\n\nasync () => {\n    try {\n        await sql.connect('mssql://username:password@localhost/database')\n        const result = await sql.query`select * from mytable where id = ${value}`\n        console.dir(result)\n    } catch (err) {\n        // ... error checks\n    }\n}\n```\n\nIf you're on Windows Azure, add `?encrypt=true` to your connection string. See [docs](#configuration) to learn more.\n\n## Documentation\n\n### Examples\n\n* [Async/Await](#asyncawait)\n* [Promises](#promises)\n* [ES6 Tagged template literals](#es6-tagged-template-literals)\n* [Callbacks](#callbacks)\n* [Streaming](#streaming)\n* [Connection Pools](#connection-pools)\n\n### Configuration\n\n* [General](#general-same-for-all-drivers)\n* [Formats](#formats)\n\n### Drivers\n\n* [Tedious](#tedious)\n* [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server](#microsoft--contributors-node-v8-driver-for-nodejs-for-sql-server)\n\n### Connections\n\n* [ConnectionPool](#connections-1)\n* [connect](#connect-callback)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute-procedure-callback)\n* [input](#input-name-type-value)\n* [output](#output-name-type-value)\n* [pipe](#pipe-stream)\n* [query](#query-command-callback)\n* [batch](#batch-batch-callback)\n* [bulk](#bulk-table-callback)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin-isolationlevel-callback)\n* [commit](#commit-callback)\n* [rollback](#rollback-callback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#input-name-type)\n* [output](#output-name-type)\n* [prepare](#prepare-statement-callback)\n* [execute](#execute-values-callback)\n* [unprepare](#unprepare-callback)\n\n### Other\n\n* [CLI](#cli)\n* [Geography and Geometry](#geography-and-geometry)\n* [Table-Valued Parameter](#table-valued-parameter-tvp)\n* [Affected Rows](#affected-rows)\n* [JSON support](#json-support)\n* [Errors](#errors)\n* [Informational messages](#informational-messages)\n* [Metadata](#metadata)\n* [Data Types](#data-types)\n* [SQL injection](#sql-injection)\n* [Known Issues](#known-issues)\n* [Contributing](https://github.com/tediousjs/node-mssql/wiki/Contributing)\n* [3.x to 4.x changes](#3x-to-4x-changes)\n* [3.x Documentation](https://github.com/tediousjs/node-mssql/blob/1893969195045a250f0fdeeb2de7f30dcf6689ad/README.md)\n\n## Examples\n\n### Config\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...',\n\n    options: {\n        encrypt: true // Use this if you're on Windows Azure\n    }\n}\n```\n\n\n### Async/Await\n\n```javascript\nconst sql = require('mssql')\n\n(async function () {\n    try {\n        let pool = await sql.connect(config)\n        let result1 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .query('select * from mytable where id = @input_parameter')\n            \n        console.dir(result1)\n    \n        // Stored procedure\n        \n        let result2 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .output('output_parameter', sql.VarChar(50))\n            .execute('procedure_name')\n        \n        console.dir(result2)\n    } catch (err) {\n        // ... error checks\n    }\n})()\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Promises\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(pool => {\n    // Query\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .query('select * from mytable where id = @input_parameter')\n}).then(result => {\n    console.dir(result)\n    \n    // Stored procedure\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nNative Promise is used by default. You can easily change this with `sql.Promise = require('myownpromisepackage')`.\n\n### ES6 Tagged template literals\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(() => {\n    return sql.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n### Callbacks\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    // Query\n\n    new sql.Request().query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n    // Stored Procedure\n\n    new sql.Request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Streaming\n\nIf you plan to work with large amount of rows, you should always use streaming. Once you enable this, you must listen for events to receive data.\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    const request = new sql.Request()\n    request.stream = true // You can set streaming differently for each request\n    request.query('select * from verylargetable') // or request.execute(procedure)\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n## Connection Pools\n\n```javascript\nconst sql = require('mssql')\n\nconst pool1 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n\n    // Query\n\n    pool1.request() // or: new sql.Request(pool1)\n    .query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n})\n\npool1.on('error', err => {\n    // ... error handler\n})\n\nconst pool2 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n\n    // Stored Procedure\n\n    pool2.request() // or: new sql.Request(pool2)\n    .input('input_parameter', sql.Int, 10)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\npool2.on('error', err => {\n    // ... error handler\n})\n```\n\n**ES6 Tagged template literals**\n\n```javascript\nnew sql.ConnectionPool(config).connect().then(pool => {\n    return pool.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n## Configuration\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n### General (same for all drivers)\n\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **domain** - Once you set domain, driver will connect to SQL Server using domain login.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **connectionTimeout** - Connection timeout in ms (default: `15000`).\n- **requestTimeout** - Request timeout in ms (default: `15000`). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second.\n- **stream** - Stream recordsets/rows instead of returning them all at once as an argument of callback (default: `false`). You can also enable streaming for each request independently (`request.stream = true`). Always set to `true` if you plan to work with large amount of rows.\n- **parseJSON** - Parse JSON recordsets to JS objects (default: `false`). For more information please see section [JSON support](#json-support).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimum of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\nComplete list of pool options can be found [here](https://github.com/coopernurse/node-pool).\n\n### Formats\n\nIn addition to configuration object there is an option to pass config as a connection string. Two formats of connection string are supported.\n\n##### Classic Connection String\n\n```\nServer=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true\nDriver=msnodesqlv8;Server=(local)\\INSTANCE;Database=database;UID=DOMAIN\\username;PWD=password;Encrypt=true\n```\n\n##### Connection String URI\n\n```\nmssql://username:password@localhost:1433/database?encrypt=true\nmssql://username:password@localhost/INSTANCE/database?encrypt=true&domain=DOMAIN&driver=msnodesqlv8\n```\n\n## Drivers\n\n### Tedious\n\nDefault driver, actively maintained and production ready. Platform independent, runs everywhere Node.js runs. Officially supported by Microsoft.\n\n**Extra options:**\n\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1434 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `false`).\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_1`, `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n- **options.appName** - Application name used for SQL server logging.\n- **options.abortTransactionOnError** - A boolean determining whether to rollback a transaction automatically if any error is encountered during the given transaction's execution. This sets the value for `XACT_ABORT` during the initial SQL phase of a connection.\n\nMore information about Tedious specific options: http://tediousjs.github.io/tedious/api-connection.html\n\n### Microsoft / Contributors Node V8 Driver for Node.js for SQL Server\n\n**Requires Node.js 0.12.x or newer. Windows only.** This driver is not part of the default package and must be installed separately by `npm install msnodesqlv8`. To use this driver, use this require syntax: `const sql = require('mssql/msnodesqlv8')`.\n\n**Extra options:**\n\n- **connectionString** - Connection string (default: see below).\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not to use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n## Connections\n\nInternally, each `ConnectionPool` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool. Connection health check is built-in so once the dead connection is discovered, it is immediately replaced with a new one.\n\n**IMPORTANT**: Always attach an `error` listener to created connection. Whenever something goes wrong with the connection it will emit an error and if there is no listener it will crash your application with an uncaught error.\n\n```javascript\nconst pool = new sql.ConnectionPool({ /* config */ })\n```\n\n### Events\n\n- **error(err)** - Dispatched on connection error.\n\n---------------------------------------\n\n### connect ([callback])\n\nCreate a new connection pool. The initial probe connection is created to find out whether the configuration is valid.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after initial probe connection has established, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst pool = new sql.ConnectionPool({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n})\n\npool.connect(err => {\n    // ...\n})\n```\n\n__Errors__\n- ELOGIN (`ConnectionError`) - Login failed.\n- ETIMEOUT (`ConnectionError`) - Connection timeout.\n- EALREADYCONNECTED (`ConnectionError`) - Database is already connected!\n- EALREADYCONNECTING (`ConnectionError`) - Already connecting to database!\n- EINSTLOOKUP (`ConnectionError`) - Instance lookup failed.\n- ESOCKET (`ConnectionError`) - Socket error.\n\n---------------------------------------\n\n### close()\n\nClose all active connections in the pool.\n\n__Example__\n\n```javascript\npool.close()\n```\n\n## Request\n\n```javascript\nconst request = new sql.Request(/* [pool or transaction] */)\n```\n\nIf you omit pool/transaction argument, global pool is used instead.\n\n### Events\n\n- **recordset(columns)** - Dispatched when metadata for new recordset are parsed.\n- **row(row)** - Dispatched when new row is parsed.\n- **done(returnValue)** - Dispatched when request is complete.\n- **error(err)** - Dispatched on error.\n- **info(message)** - Dispatched on informational message.\n\n---------------------------------------\n\n### execute (procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.input('input_parameter', sql.Int, value)\nrequest.output('output_parameter', sql.Int)\nrequest.execute('procedure_name', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordsets.length) // count of recordsets returned by the procedure\n    console.log(result.recordsets[0].length) // count of rows contained in first recordset\n    console.log(result.recordset) // first recordset from result.recordsets\n    console.log(result.returnValue) // procedure return value\n    console.log(result.output) // key/value collection of output values\n    console.log(result.rowsAffected) // array of numbers, each number represents the number of rows affected by executed statemens\n\n    // ...\n})\n```\n\n__Errors__\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### input (name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automatically decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value)\nrequest.input('input_parameter', sql.Int, value)\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define your own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text)\n```\n\nYou can also overwrite the default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt)\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int)\nrequest.output('output_parameter', sql.VarChar(50), 'abc')\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### pipe (stream)\n\nSets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n\n__Arguments__\n\n- **stream** - Writable stream in object mode.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.pipe(stream)\nrequest.query('select * from mytable')\nstream.on('error', err => {\n    // ...\n})\nstream.on('finish', () => {\n    // ...\n})\n```\n\n---------------------------------------\n\n### query (command, [callback])\n\nExecute the SQL command. To execute commands like `create procedure` or if you plan to work with local temporary tables, use [batch](#batch-batch-callback) instead.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n\n    // ...\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number; select 2 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n    console.log(result.recordsets[0][0].number) // return 1\n    console.log(result.recordsets[1][0].number) // return 2\n})\n```\n\n**NOTE**: To get number of rows affected by the statement(s), see section [Affected Rows](#affected-rows).\n\n---------------------------------------\n\n### batch (batch, [callback])\n\nExecute the SQL command. Unlike [query](#query-command-callback), it doesn't use `sp_executesql`, so is not likely that SQL Server will reuse the execution plan it generates for the SQL. Use this only in special cases, for example when you need to execute commands like `create procedure` which can't be executed with [query](#query-command-callback) or if you're executing statements longer than 4000 chars on SQL Server 2000. Also you should use this if you're plan to work with local temporary tables ([more information here](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)).\n\nNOTE: Table-Valued Parameter (TVP) is not supported in batch.\n\n__Arguments__\n\n- **batch** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.batch('create procedure #temporary as select * from table', (err, result) => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\nYou can enable multiple recordsets in queries with the `request.multiple = true` command.\n\n---------------------------------------\n\n### bulk (table, [callback])\n\nPerform a bulk insert.\n\n__Arguments__\n\n- **table** - `sql.Table` instance.\n- **callback(err, rowCount)** - A callback which is called after bulk insert has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst table = new sql.Table('table_name') // or temporary table, e.g. #temptable\ntable.create = true\ntable.columns.add('a', sql.Int, {nullable: true, primary: true})\ntable.columns.add('b', sql.VarChar(50), {nullable: false})\ntable.rows.add(777, 'test')\n\nconst request = new sql.Request()\nrequest.bulk(table, (err, result) => {\n    // ... error checks\n})\n```\n\n**IMPORTANT**: Always indicate whether the column is nullable or not!\n\n**TIP**: If you set `table.create` to `true`, module will check if the table exists before it start sending data. If it doesn't, it will automatically create it. You can specify primary key columns by setting `primary: true` to column's options. Primary key constraint on multiple columns is supported.\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n__Errors__\n- ENAME (`RequestError`) - Table name must be specified for bulk insert.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### cancel()\n\nCancel currently executing request. Return `true` if cancellation packet was send successfully.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', (err, result) => {\n    console.log(err instanceof sql.RequestError)  // true\n    console.log(err.message)                      // Cancelled.\n    console.log(err.code)                         // ECANCEL\n\n    // ...\n})\n\nrequest.cancel()\n```\n\n## Transaction\n\n**IMPORTANT:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is acquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\n```\n\nIf you omit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    const request = new sql.Request(transaction)\n    request.query('insert into mytable (mycolumn) values (12345)', (err, result) => {\n        // ... error checks\n\n        transaction.commit(err => {\n            // ... error checks\n\n            console.log(\"Transaction committed.\")\n        })\n    })\n})\n```\n\nTransaction can also be created by `const transaction = pool.transaction()`. Requests can also be created by `const request = transaction.request()`.\n\n__Aborted transactions__\n\nThis example shows how you should correctly handle transaction errors when `abortTransactionOnError` (`XACT_ABORT`) is enabled. Added in 2.0.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    let rolledBack = false\n\n    transaction.on('rollback', aborted => {\n        // emited with aborted === true\n\n        rolledBack = true\n    })\n\n    new sql.Request(transaction)\n    .query('insert into mytable (bitcolumn) values (2)', (err, result) => {\n        // insert should fail because of invalid value\n\n        if (err) {\n            if (!rolledBack) {\n                transaction.rollback(err => {\n                    // ... error checks\n                })\n            }\n        } else {\n            transaction.commit(err => {\n                // ... error checks\n            })\n        }\n    })\n})\n```\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback(aborted)** - Dispatched on successful rollback with an argument determining if the transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### begin ([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYBEGUN (`TransactionError`) - Transaction has already begun.\n\n---------------------------------------\n\n### commit ([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has committed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.commit(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't commit transaction. There is a request in progress.\n\n---------------------------------------\n\n### rollback ([callback])\n\nRollback a transaction. If the queue isn't empty, all queued requests will be Cancelled and the transaction will be marked as aborted.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.rollback(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't rollback transaction. There is a request in progress.\n\n## Prepared Statement\n\n**IMPORTANT:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is acquired from the connection pool and all subsequent executions are executed exclusively on this connection. After you call `unprepare`, the connection is then released back to the connection pool.\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\n```\n\nIf you omit the connection argument, the global connection is used instead.\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        ps.unprepare(err => {\n            // ... error checks\n\n        })\n    })\n})\n```\n\n**IMPORTANT**: Remember that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement!\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n### input (name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int)\nps.input('input_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int)\nps.output('output_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### prepare (statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.prepare('select @param as value', err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYPREPARED (`PreparedStatementError`) - Statement is already prepared.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n\n---------------------------------------\n\n### execute (values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        console.log(result.recordset[0].value) // return 12345\n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\nYou can also stream executed request.\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.stream = true\n    const request = ps.execute({param: 12345})\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n        \n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\n**TIP**: To learn more about how number of affected rows works, see section [Affected Rows](#affected-rows).\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n\n---------------------------------------\n\n### unprepare ([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.unprepare(err => {\n        // ... error checks\n\n    })\n})\n```\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n\n## CLI\n\nBefore you can start using CLI, you must install `mssql` globally with `npm install mssql -g`. Once you do that you will be able to execute `mssql` command.\n\n__Setup__\n\nCreate a `.mssql.json` configuration file (anywhere). Structure of the file is the same as the standard configuration object.\n\n```json\n{\n    \"user\": \"...\",\n    \"password\": \"...\",\n    \"server\": \"localhost\",\n    \"database\": \"...\"\n}\n```\n\n__Example__\n\n```shell\necho \"select * from mytable\" | mssql /path/to/config\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}]]\n```\n\nYou can also query for multiple recordsets.\n\n```shell\necho \"select * from mytable; select * from myothertable\" | mssql\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}],[{\"id\":15,\"name\":\"Product name\"}]]\n```\n\nIf you omit config path argument, mssql will try to load it from current working directory.\n\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n\n{ srid: 0,\n  version: 1,\n  points:\n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nconst tvp = new sql.Table() // You can optionally specify table type name in the first argument.\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50))\ntvp.columns.add('b', sql.Int)\n\n// Add rows\ntvp.rows.add('hello tvp', 777) // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('tvp', tvp)\nrequest.execute('MyCustomStoredProcedure', (err, result) => {\n    // ... error checks\n\n    console.dir(result.recordsets[0][0]) // {a: 'hello tvp', b: 777}\n})\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n## Affected Rows\n\nIf you're performing `INSERT`, `UPDATE` or `DELETE` in a query, you can read number of affected rows. The `rowsAffected` variable is an array of numbers. Each number represents number of affected rows by a single statement.\n\n__Example using Promises__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100').then(result => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using callbacks__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100', (err, result) => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using streaming__\n\n```javascript\nconst request = new sql.Request()\nrequest.stream = true\nrequest.query('update myAwesomeTable set awesomness = 100')\nrequest.on('done', result => {\n    console.log(result.rowsAffected)\n})\n```\n\n## JSON support\n\nSQL Server 2016 introduced built-in JSON serialization. By default, JSON is returned as a plain text in a special column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B`.\n\nExample\n```sql\nSELECT\n    1 AS 'a.b.c',\n    2 AS 'a.b.d',\n    3 AS 'a.x',\n    4 AS 'a.y'\nFOR JSON PATH\n```\n\nResults in:\n```javascript\nrecordset = [ { 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B': '{\"a\":{\"b\":{\"c\":1,\"d\":2},\"x\":3,\"y\":4}}' } ]\n```\n\nYou can enable built-in JSON parser with `config.parseJSON = true`. Once you enable this, recordset will contain rows of parsed JS objects. Given the same example, result will look like this:\n```javascript\nrecordset = [ { a: { b: { c: 1, d: 2 }, x: 3, y: 4 } } ]\n```\n\n**IMPORTANT**: In order for this to work, there must be exactly one column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B` in the recordset.\n\nMore information about JSON support can be found in [official documentation](https://msdn.microsoft.com/en-us/library/dn921882.aspx).\n\n## Errors\n\nThere are 4 types of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, committing and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and its original stack may be cropped. You can always access original error with `err.originalError`.\n\nSQL Server may generate more than one error for one request so you can access preceding errors with `err.precedingErrors`.\n\n### Error Codes\n\nEach known error has `name`, `code` and `message` properties.\n\nName | Code | Message\n:--- | :--- | :---\n`ConnectionError` | ELOGIN | Login failed.\n`ConnectionError` | ETIMEOUT | Connection timeout.\n`ConnectionError` | EDRIVER | Unknown driver.\n`ConnectionError` | EALREADYCONNECTED | Database is already connected!\n`ConnectionError` | EALREADYCONNECTING | Already connecting to database!\n`ConnectionError` | ENOTOPEN | Connection not yet open.\n`ConnectionError` | EINSTLOOKUP | Instance lookup failed.\n`ConnectionError` | ESOCKET | Socket error.\n`ConnectionError` | ECONNCLOSED | Connection is closed.\n`TransactionError` | ENOTBEGUN | Transaction has not begun.\n`TransactionError` | EALREADYBEGUN | Transaction has already begun.\n`TransactionError` | EREQINPROG | Can't commit/rollback transaction. There is a request in progress.\n`TransactionError` | EABORT | Transaction has been aborted.\n`RequestError` | EREQUEST | Message from SQL Server. Error object contains additional details.\n`RequestError` | ECANCEL | Cancelled.\n`RequestError` | ETIMEOUT | Request timeout.\n`RequestError` | EARGS | Invalid number of arguments.\n`RequestError` | EINJECT | SQL injection warning.\n`RequestError` | ENOCONN | No connection is specified for that request.\n`PreparedStatementError` | EARGS | Invalid number of arguments.\n`PreparedStatementError` | EINJECT | SQL injection warning.\n`PreparedStatementError` | EALREADYPREPARED | Statement is already prepared.\n`PreparedStatementError` | ENOTPREPARED | Statement is not prepared.\n\n### Detailed SQL Errors\n\nSQL errors (`RequestError` with `err.code` equal to `EREQUEST`) contains additional details.\n\n- **err.number** - The error number.\n- **err.state** - The error state, used as a modifier to the number.\n- **err.class** - The class (severity) of the error. A class of less than 10 indicates an informational message. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **err.lineNumber** - The line number in the SQL batch or stored procedure that caused the error. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **err.serverName** - The server name.\n- **err.procName** - The stored procedure name.\n\n## Informational messages\n\nTo receive informational messages generated by `PRINT` or `RAISERROR` commands use:\n\n```javascript\nconst request = new sql.Request()\nrequest.on('info', info => {\n    console.dir(info)\n})\nrequest.query('print \\'Hello world.\\';', (err, result) => {\n    // ...\n})\n```\n\nStructure of informational message:\n\n- **info.message** - Message.\n- **info.number** - The message number.\n- **info.state** - The message state, used as a modifier to the number.\n- **info.class** - The class (severity) of the message. Equal or lower than 10. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **info.lineNumber** - The line number in the SQL batch or stored procedure that generated the message. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **info.serverName** - The server name.\n- **info.procName** - The stored procedure name.\n\n## Metadata\n\nRecordset metadata are accessible through the `recordset.columns` property.\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select convert(decimal(18, 4), 1) as first, \\'asdf\\' as second', (err, result) => {\n    console.dir(result.recordset.columns)\n\n    console.log(result.recordset.columns.first.type === sql.Decimal) // true\n    console.log(result.recordset.columns.second.type === sql.VarChar) // true\n})\n```\n\nColumns structure for example above:\n\n```javascript\n{\n    first: {\n        index: 0,\n        name: 'first',\n        length: 17,\n        type: [sql.Decimal],\n        scale: 4,\n        precision: 18,\n        nullable: true,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    },\n    second: {\n        index: 1,\n        name: 'second',\n        length: 4,\n        type: [sql.VarChar],\n        nullable: false,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    }\n}\n```\n\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\")               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\")           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\")      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar)                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\")              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33)              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33)          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33)       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date())        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date())     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Variant\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length. Types `sql.XML` and `sql.Variant` are not supported as input parameters.\n\n## SQL injection\n\nThis module has built-in SQL injection protection. Always use parameters or tagged template literals to pass sanitized values to your queries.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('myval', sql.VarChar, '-- commented')\nrequest.query('select @myval as myval', (err, result) => {\n    console.dir(result)\n})\n```\n\n## Known issues\n\n### Tedious\n\n- If you're facing problems with connecting SQL Server 2000, try setting the default TDS version to 7.1 with `config.options.tdsVersion = '7_1'` ([issue](https://github.com/tediousjs/node-mssql/issues/36))\n- If you're executing a statement longer than 4000 chars on SQL Server 2000, always use [batch](#batch-batch-callback) instead of [query](#query-command-callback) ([issue](https://github.com/tediousjs/node-mssql/issues/68))\n\n### msnodesqlv8\n\n- msnodesqlv8 has problem with errors during transactions - [reported](https://github.com/tediousjs/node-mssql/issues/77).\n- msnodesqlv8 doesn't support [detailed SQL errors](#detailed-sql-errors).\n\n## 3.x to 4.x changes\n\n- Library & tests are rewritten to ES6.\n- `Connection` was renamed to `ConnectionPool`.\n- Drivers are no longer loaded dynamically so the library is now compatible with Webpack. To use `msnodesqlv8` driver, use `const sql = require('mssql/msnodesqlv8')` syntax.\n- Every callback/resolve now returns `result` object only. This object contains `recordsets` (array of recordsets), `recordset` (first recordset from array of recordsets), `rowsAffected` (array of numbers representig number of affected rows by each insert/update/delete statement) and `output` (key/value collection of output parameters' values).\n- Affected rows are now returned as an array. A separate number for each SQL statement.\n- Directive `multiple: true` was removed.\n- `Transaction` and `PreparedStatement` internal queues was removed.\n- ConnectionPool no longer emits `connect` and `close` events.\n- Removed verbose and debug mode.\n- Removed support for `tds` and `msnodesql` drivers.\n- Removed support for Node versions lower than 4.\n\n## Sponsors\n\nDevelopment is sponsored by [Integromat](https://www.integromat.com/en/integrations/mssql).\n\n## License\n\nCopyright (c) 2013-2018 Patrik Simek\n\nThe MIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[npm-image]: https://img.shields.io/npm/v/mssql.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/mssql\n[downloads-image]: https://img.shields.io/npm/dm/mssql.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/mssql\n[david-image]: https://img.shields.io/david/tediousjs/node-mssql.svg?style=flat-square\n[david-url]: https://david-dm.org/tediousjs/node-mssql\n[travis-image]: https://img.shields.io/travis/tediousjs/node-mssql/master.svg?style=flat-square&label=unit\n[travis-url]: https://travis-ci.org/tediousjs/node-mssql\n[appveyor-image]: https://img.shields.io/appveyor/ci/patriksimek/node-mssql-o4dhf/master.svg?style=flat-square&label=integration\n[appveyor-url]: https://ci.appveyor.com/project/patriksimek/node-mssql-o4dhf\n\n[tedious-url]: https://www.npmjs.com/package/tedious\n[msnodesqlv8-url]: https://www.npmjs.com/package/msnodesqlv8\n","readmeFilename":"README.md","gitHead":"4879641e8a488b67bdb05efbbd757511f31c14b5","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@4.2.0","_npmVersion":"6.1.0","_nodeVersion":"8.11.2","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"integrity":"sha512-x0jvlmSh8sOUr6S4h9Bw0HpstmGDezZjJZUN06sH/k2An5TnqIf1CBaRCwttunw/Ezov0GIPVVxwwbimzQtHwA==","shasum":"12a611743dac56d9051e15f656c8f628a8848013","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.2.0.tgz","fileCount":19,"unpackedSize":192445,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbPnXaCRA9TVsSAnZWagAA484P/A/dNuliVSd3a5abTeBN\n4w4JJLHWJQluJUFOP7tcdApdc0cZ6jHp8mYXuI1ZP8U549UUaB18GLejLFOx\nBQ/8oE05ghOUEPFLPY7frkOamEu7b7qybQB682QlIVOheKFqUP0TOIZDxkNb\nLrmj9qalzfTZrZQ30w/8Qdv9+IKj4SUrlfF8AzL+b3Dj7+Ol+kG+Cadopnjw\nLkkkEEBir5Z92h1RRz/e1D2eDObd8GVMywRVPOYfP4wNj+ezoXgGDxdCvD1+\nzBNIunb8qkDUTlWBCumgAk5DfXHOoXQhdfm0xoGDOjhjI9XFDGhkIali/9cT\nDOJHc9CfmacfGkDBayvZwIMs+2oOHa4gMvx3NZ7ixtvYehwkysd6LoLiR4bY\npaiDq4VPVLyH2CdYyxJ0FRX1+eimrGKvkEo+a6Jt2rDJnO1/AKvpw7xrH8if\nuciFbuNKxZgNZv/twYGIoyGF1ef4oEhyfv9DAlCqAmyfvokchHRz9jdB9ReU\nGYrt9aJsYW6NFZCoajyWWO5wNonbt9e36GORFlmcPrt5WIA9jfHmCo3EI1by\niv8+VYrf1EmDH1RVSYAZ+E5xccNJ7XeaXslA38nwJ2uQRrrRVGqLDn2H9SBG\nBzD81S/BKzpbeFA1qPs1TqAOWqIOqP4GL0EYs9lxwEZ3BeLmoUG2wZcmvhWO\nsiIy\r\n=M/2/\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_4.2.0_1530820058697_0.1737950856037982"},"_hasShrinkwrap":false},"4.2.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.2.1","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.1.0","generic-pool":"^3.4.2","tedious":"^2.6.4"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=4"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha test/common/unit.js","test-tedious":"mocha test/tedious","test-msnodesqlv8":"mocha test/msnodesqlv8","test-cli":"mocha test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"readme":"# node-mssql\n\nMicrosoft SQL Server client for Node.js\n\n[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Travis CI][travis-image]][travis-url] [![Appveyor CI][appveyor-image]][appveyor-url] [![Join the chat at https://gitter.im/patriksimek/node-mssql](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/patriksimek/node-mssql?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSupported TDS drivers:\n- [Tedious][tedious-url] (pure JavaScript - Windows/macOS/Linux, default)\n- [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server][msnodesqlv8-url] (native - Windows only)\n\n## Installation\n\n    npm install mssql\n\nUse `@next` tag to install the most recent version with latest fixes and features.\n\n    npm install mssql@next\n\n## Quick Example\n\n```javascript\nconst sql = require('mssql')\n\nasync () => {\n    try {\n        await sql.connect('mssql://username:password@localhost/database')\n        const result = await sql.query`select * from mytable where id = ${value}`\n        console.dir(result)\n    } catch (err) {\n        // ... error checks\n    }\n}\n```\n\nIf you're on Windows Azure, add `?encrypt=true` to your connection string. See [docs](#configuration) to learn more.\n\n## Documentation\n\n### Examples\n\n* [Async/Await](#asyncawait)\n* [Promises](#promises)\n* [ES6 Tagged template literals](#es6-tagged-template-literals)\n* [Callbacks](#callbacks)\n* [Streaming](#streaming)\n* [Connection Pools](#connection-pools)\n\n### Configuration\n\n* [General](#general-same-for-all-drivers)\n* [Formats](#formats)\n\n### Drivers\n\n* [Tedious](#tedious)\n* [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server](#microsoft--contributors-node-v8-driver-for-nodejs-for-sql-server)\n\n### Connections\n\n* [ConnectionPool](#connections-1)\n* [connect](#connect-callback)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute-procedure-callback)\n* [input](#input-name-type-value)\n* [output](#output-name-type-value)\n* [pipe](#pipe-stream)\n* [query](#query-command-callback)\n* [batch](#batch-batch-callback)\n* [bulk](#bulk-table-callback)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin-isolationlevel-callback)\n* [commit](#commit-callback)\n* [rollback](#rollback-callback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#input-name-type)\n* [output](#output-name-type)\n* [prepare](#prepare-statement-callback)\n* [execute](#execute-values-callback)\n* [unprepare](#unprepare-callback)\n\n### Other\n\n* [CLI](#cli)\n* [Geography and Geometry](#geography-and-geometry)\n* [Table-Valued Parameter](#table-valued-parameter-tvp)\n* [Affected Rows](#affected-rows)\n* [JSON support](#json-support)\n* [Errors](#errors)\n* [Informational messages](#informational-messages)\n* [Metadata](#metadata)\n* [Data Types](#data-types)\n* [SQL injection](#sql-injection)\n* [Known Issues](#known-issues)\n* [Contributing](https://github.com/tediousjs/node-mssql/wiki/Contributing)\n* [3.x to 4.x changes](#3x-to-4x-changes)\n* [3.x Documentation](https://github.com/tediousjs/node-mssql/blob/1893969195045a250f0fdeeb2de7f30dcf6689ad/README.md)\n\n## Examples\n\n### Config\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...',\n\n    options: {\n        encrypt: true // Use this if you're on Windows Azure\n    }\n}\n```\n\n\n### Async/Await\n\n```javascript\nconst sql = require('mssql')\n\n(async function () {\n    try {\n        let pool = await sql.connect(config)\n        let result1 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .query('select * from mytable where id = @input_parameter')\n            \n        console.dir(result1)\n    \n        // Stored procedure\n        \n        let result2 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .output('output_parameter', sql.VarChar(50))\n            .execute('procedure_name')\n        \n        console.dir(result2)\n    } catch (err) {\n        // ... error checks\n    }\n})()\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Promises\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(pool => {\n    // Query\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .query('select * from mytable where id = @input_parameter')\n}).then(result => {\n    console.dir(result)\n    \n    // Stored procedure\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nNative Promise is used by default. You can easily change this with `sql.Promise = require('myownpromisepackage')`.\n\n### ES6 Tagged template literals\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(() => {\n    return sql.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n### Callbacks\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    // Query\n\n    new sql.Request().query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n    // Stored Procedure\n\n    new sql.Request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Streaming\n\nIf you plan to work with large amount of rows, you should always use streaming. Once you enable this, you must listen for events to receive data.\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    const request = new sql.Request()\n    request.stream = true // You can set streaming differently for each request\n    request.query('select * from verylargetable') // or request.execute(procedure)\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n## Connection Pools\n\n```javascript\nconst sql = require('mssql')\n\nconst pool1 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n\n    // Query\n\n    pool1.request() // or: new sql.Request(pool1)\n    .query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n})\n\npool1.on('error', err => {\n    // ... error handler\n})\n\nconst pool2 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n\n    // Stored Procedure\n\n    pool2.request() // or: new sql.Request(pool2)\n    .input('input_parameter', sql.Int, 10)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\npool2.on('error', err => {\n    // ... error handler\n})\n```\n\n**ES6 Tagged template literals**\n\n```javascript\nnew sql.ConnectionPool(config).connect().then(pool => {\n    return pool.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n## Configuration\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n### General (same for all drivers)\n\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **domain** - Once you set domain, driver will connect to SQL Server using domain login.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **connectionTimeout** - Connection timeout in ms (default: `15000`).\n- **requestTimeout** - Request timeout in ms (default: `15000`). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second.\n- **stream** - Stream recordsets/rows instead of returning them all at once as an argument of callback (default: `false`). You can also enable streaming for each request independently (`request.stream = true`). Always set to `true` if you plan to work with large amount of rows.\n- **parseJSON** - Parse JSON recordsets to JS objects (default: `false`). For more information please see section [JSON support](#json-support).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimum of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\nComplete list of pool options can be found [here](https://github.com/coopernurse/node-pool).\n\n### Formats\n\nIn addition to configuration object there is an option to pass config as a connection string. Two formats of connection string are supported.\n\n##### Classic Connection String\n\n```\nServer=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true\nDriver=msnodesqlv8;Server=(local)\\INSTANCE;Database=database;UID=DOMAIN\\username;PWD=password;Encrypt=true\n```\n\n##### Connection String URI\n\n```\nmssql://username:password@localhost:1433/database?encrypt=true\nmssql://username:password@localhost/INSTANCE/database?encrypt=true&domain=DOMAIN&driver=msnodesqlv8\n```\n\n## Drivers\n\n### Tedious\n\nDefault driver, actively maintained and production ready. Platform independent, runs everywhere Node.js runs. Officially supported by Microsoft.\n\n**Extra options:**\n\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1434 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `false`).\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_1`, `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n- **options.appName** - Application name used for SQL server logging.\n- **options.abortTransactionOnError** - A boolean determining whether to rollback a transaction automatically if any error is encountered during the given transaction's execution. This sets the value for `XACT_ABORT` during the initial SQL phase of a connection.\n\nMore information about Tedious specific options: http://tediousjs.github.io/tedious/api-connection.html\n\n### Microsoft / Contributors Node V8 Driver for Node.js for SQL Server\n\n**Requires Node.js 0.12.x or newer. Windows only.** This driver is not part of the default package and must be installed separately by `npm install msnodesqlv8`. To use this driver, use this require syntax: `const sql = require('mssql/msnodesqlv8')`.\n\n**Extra options:**\n\n- **connectionString** - Connection string (default: see below).\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not to use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n## Connections\n\nInternally, each `ConnectionPool` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool. Connection health check is built-in so once the dead connection is discovered, it is immediately replaced with a new one.\n\n**IMPORTANT**: Always attach an `error` listener to created connection. Whenever something goes wrong with the connection it will emit an error and if there is no listener it will crash your application with an uncaught error.\n\n```javascript\nconst pool = new sql.ConnectionPool({ /* config */ })\n```\n\n### Events\n\n- **error(err)** - Dispatched on connection error.\n\n---------------------------------------\n\n### connect ([callback])\n\nCreate a new connection pool. The initial probe connection is created to find out whether the configuration is valid.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after initial probe connection has established, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst pool = new sql.ConnectionPool({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n})\n\npool.connect(err => {\n    // ...\n})\n```\n\n__Errors__\n- ELOGIN (`ConnectionError`) - Login failed.\n- ETIMEOUT (`ConnectionError`) - Connection timeout.\n- EALREADYCONNECTED (`ConnectionError`) - Database is already connected!\n- EALREADYCONNECTING (`ConnectionError`) - Already connecting to database!\n- EINSTLOOKUP (`ConnectionError`) - Instance lookup failed.\n- ESOCKET (`ConnectionError`) - Socket error.\n\n---------------------------------------\n\n### close()\n\nClose all active connections in the pool.\n\n__Example__\n\n```javascript\npool.close()\n```\n\n## Request\n\n```javascript\nconst request = new sql.Request(/* [pool or transaction] */)\n```\n\nIf you omit pool/transaction argument, global pool is used instead.\n\n### Events\n\n- **recordset(columns)** - Dispatched when metadata for new recordset are parsed.\n- **row(row)** - Dispatched when new row is parsed.\n- **done(returnValue)** - Dispatched when request is complete.\n- **error(err)** - Dispatched on error.\n- **info(message)** - Dispatched on informational message.\n\n---------------------------------------\n\n### execute (procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.input('input_parameter', sql.Int, value)\nrequest.output('output_parameter', sql.Int)\nrequest.execute('procedure_name', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordsets.length) // count of recordsets returned by the procedure\n    console.log(result.recordsets[0].length) // count of rows contained in first recordset\n    console.log(result.recordset) // first recordset from result.recordsets\n    console.log(result.returnValue) // procedure return value\n    console.log(result.output) // key/value collection of output values\n    console.log(result.rowsAffected) // array of numbers, each number represents the number of rows affected by executed statemens\n\n    // ...\n})\n```\n\n__Errors__\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### input (name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automatically decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value)\nrequest.input('input_parameter', sql.Int, value)\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define your own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text)\n```\n\nYou can also overwrite the default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt)\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int)\nrequest.output('output_parameter', sql.VarChar(50), 'abc')\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### pipe (stream)\n\nSets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n\n__Arguments__\n\n- **stream** - Writable stream in object mode.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.pipe(stream)\nrequest.query('select * from mytable')\nstream.on('error', err => {\n    // ...\n})\nstream.on('finish', () => {\n    // ...\n})\n```\n\n---------------------------------------\n\n### query (command, [callback])\n\nExecute the SQL command. To execute commands like `create procedure` or if you plan to work with local temporary tables, use [batch](#batch-batch-callback) instead.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n\n    // ...\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number; select 2 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n    console.log(result.recordsets[0][0].number) // return 1\n    console.log(result.recordsets[1][0].number) // return 2\n})\n```\n\n**NOTE**: To get number of rows affected by the statement(s), see section [Affected Rows](#affected-rows).\n\n---------------------------------------\n\n### batch (batch, [callback])\n\nExecute the SQL command. Unlike [query](#query-command-callback), it doesn't use `sp_executesql`, so is not likely that SQL Server will reuse the execution plan it generates for the SQL. Use this only in special cases, for example when you need to execute commands like `create procedure` which can't be executed with [query](#query-command-callback) or if you're executing statements longer than 4000 chars on SQL Server 2000. Also you should use this if you're plan to work with local temporary tables ([more information here](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)).\n\nNOTE: Table-Valued Parameter (TVP) is not supported in batch.\n\n__Arguments__\n\n- **batch** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.batch('create procedure #temporary as select * from table', (err, result) => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\nYou can enable multiple recordsets in queries with the `request.multiple = true` command.\n\n---------------------------------------\n\n### bulk (table, [callback])\n\nPerform a bulk insert.\n\n__Arguments__\n\n- **table** - `sql.Table` instance.\n- **callback(err, rowCount)** - A callback which is called after bulk insert has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst table = new sql.Table('table_name') // or temporary table, e.g. #temptable\ntable.create = true\ntable.columns.add('a', sql.Int, {nullable: true, primary: true})\ntable.columns.add('b', sql.VarChar(50), {nullable: false})\ntable.rows.add(777, 'test')\n\nconst request = new sql.Request()\nrequest.bulk(table, (err, result) => {\n    // ... error checks\n})\n```\n\n**IMPORTANT**: Always indicate whether the column is nullable or not!\n\n**TIP**: If you set `table.create` to `true`, module will check if the table exists before it start sending data. If it doesn't, it will automatically create it. You can specify primary key columns by setting `primary: true` to column's options. Primary key constraint on multiple columns is supported.\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n__Errors__\n- ENAME (`RequestError`) - Table name must be specified for bulk insert.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### cancel()\n\nCancel currently executing request. Return `true` if cancellation packet was send successfully.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', (err, result) => {\n    console.log(err instanceof sql.RequestError)  // true\n    console.log(err.message)                      // Cancelled.\n    console.log(err.code)                         // ECANCEL\n\n    // ...\n})\n\nrequest.cancel()\n```\n\n## Transaction\n\n**IMPORTANT:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is acquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\n```\n\nIf you omit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    const request = new sql.Request(transaction)\n    request.query('insert into mytable (mycolumn) values (12345)', (err, result) => {\n        // ... error checks\n\n        transaction.commit(err => {\n            // ... error checks\n\n            console.log(\"Transaction committed.\")\n        })\n    })\n})\n```\n\nTransaction can also be created by `const transaction = pool.transaction()`. Requests can also be created by `const request = transaction.request()`.\n\n__Aborted transactions__\n\nThis example shows how you should correctly handle transaction errors when `abortTransactionOnError` (`XACT_ABORT`) is enabled. Added in 2.0.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    let rolledBack = false\n\n    transaction.on('rollback', aborted => {\n        // emited with aborted === true\n\n        rolledBack = true\n    })\n\n    new sql.Request(transaction)\n    .query('insert into mytable (bitcolumn) values (2)', (err, result) => {\n        // insert should fail because of invalid value\n\n        if (err) {\n            if (!rolledBack) {\n                transaction.rollback(err => {\n                    // ... error checks\n                })\n            }\n        } else {\n            transaction.commit(err => {\n                // ... error checks\n            })\n        }\n    })\n})\n```\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback(aborted)** - Dispatched on successful rollback with an argument determining if the transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### begin ([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYBEGUN (`TransactionError`) - Transaction has already begun.\n\n---------------------------------------\n\n### commit ([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has committed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.commit(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't commit transaction. There is a request in progress.\n\n---------------------------------------\n\n### rollback ([callback])\n\nRollback a transaction. If the queue isn't empty, all queued requests will be Cancelled and the transaction will be marked as aborted.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.rollback(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't rollback transaction. There is a request in progress.\n\n## Prepared Statement\n\n**IMPORTANT:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is acquired from the connection pool and all subsequent executions are executed exclusively on this connection. After you call `unprepare`, the connection is then released back to the connection pool.\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\n```\n\nIf you omit the connection argument, the global connection is used instead.\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        ps.unprepare(err => {\n            // ... error checks\n\n        })\n    })\n})\n```\n\n**IMPORTANT**: Remember that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement!\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n### input (name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int)\nps.input('input_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int)\nps.output('output_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### prepare (statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.prepare('select @param as value', err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYPREPARED (`PreparedStatementError`) - Statement is already prepared.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n\n---------------------------------------\n\n### execute (values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        console.log(result.recordset[0].value) // return 12345\n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\nYou can also stream executed request.\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.stream = true\n    const request = ps.execute({param: 12345})\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n        \n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\n**TIP**: To learn more about how number of affected rows works, see section [Affected Rows](#affected-rows).\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n\n---------------------------------------\n\n### unprepare ([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.unprepare(err => {\n        // ... error checks\n\n    })\n})\n```\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n\n## CLI\n\nBefore you can start using CLI, you must install `mssql` globally with `npm install mssql -g`. Once you do that you will be able to execute `mssql` command.\n\n__Setup__\n\nCreate a `.mssql.json` configuration file (anywhere). Structure of the file is the same as the standard configuration object.\n\n```json\n{\n    \"user\": \"...\",\n    \"password\": \"...\",\n    \"server\": \"localhost\",\n    \"database\": \"...\"\n}\n```\n\n__Example__\n\n```shell\necho \"select * from mytable\" | mssql /path/to/config\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}]]\n```\n\nYou can also query for multiple recordsets.\n\n```shell\necho \"select * from mytable; select * from myothertable\" | mssql\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}],[{\"id\":15,\"name\":\"Product name\"}]]\n```\n\nIf you omit config path argument, mssql will try to load it from current working directory.\n\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n\n{ srid: 0,\n  version: 1,\n  points:\n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nconst tvp = new sql.Table() // You can optionally specify table type name in the first argument.\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50))\ntvp.columns.add('b', sql.Int)\n\n// Add rows\ntvp.rows.add('hello tvp', 777) // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('tvp', tvp)\nrequest.execute('MyCustomStoredProcedure', (err, result) => {\n    // ... error checks\n\n    console.dir(result.recordsets[0][0]) // {a: 'hello tvp', b: 777}\n})\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n## Affected Rows\n\nIf you're performing `INSERT`, `UPDATE` or `DELETE` in a query, you can read number of affected rows. The `rowsAffected` variable is an array of numbers. Each number represents number of affected rows by a single statement.\n\n__Example using Promises__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100').then(result => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using callbacks__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100', (err, result) => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using streaming__\n\n```javascript\nconst request = new sql.Request()\nrequest.stream = true\nrequest.query('update myAwesomeTable set awesomness = 100')\nrequest.on('done', result => {\n    console.log(result.rowsAffected)\n})\n```\n\n## JSON support\n\nSQL Server 2016 introduced built-in JSON serialization. By default, JSON is returned as a plain text in a special column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B`.\n\nExample\n```sql\nSELECT\n    1 AS 'a.b.c',\n    2 AS 'a.b.d',\n    3 AS 'a.x',\n    4 AS 'a.y'\nFOR JSON PATH\n```\n\nResults in:\n```javascript\nrecordset = [ { 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B': '{\"a\":{\"b\":{\"c\":1,\"d\":2},\"x\":3,\"y\":4}}' } ]\n```\n\nYou can enable built-in JSON parser with `config.parseJSON = true`. Once you enable this, recordset will contain rows of parsed JS objects. Given the same example, result will look like this:\n```javascript\nrecordset = [ { a: { b: { c: 1, d: 2 }, x: 3, y: 4 } } ]\n```\n\n**IMPORTANT**: In order for this to work, there must be exactly one column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B` in the recordset.\n\nMore information about JSON support can be found in [official documentation](https://msdn.microsoft.com/en-us/library/dn921882.aspx).\n\n## Errors\n\nThere are 4 types of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, committing and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and its original stack may be cropped. You can always access original error with `err.originalError`.\n\nSQL Server may generate more than one error for one request so you can access preceding errors with `err.precedingErrors`.\n\n### Error Codes\n\nEach known error has `name`, `code` and `message` properties.\n\nName | Code | Message\n:--- | :--- | :---\n`ConnectionError` | ELOGIN | Login failed.\n`ConnectionError` | ETIMEOUT | Connection timeout.\n`ConnectionError` | EDRIVER | Unknown driver.\n`ConnectionError` | EALREADYCONNECTED | Database is already connected!\n`ConnectionError` | EALREADYCONNECTING | Already connecting to database!\n`ConnectionError` | ENOTOPEN | Connection not yet open.\n`ConnectionError` | EINSTLOOKUP | Instance lookup failed.\n`ConnectionError` | ESOCKET | Socket error.\n`ConnectionError` | ECONNCLOSED | Connection is closed.\n`TransactionError` | ENOTBEGUN | Transaction has not begun.\n`TransactionError` | EALREADYBEGUN | Transaction has already begun.\n`TransactionError` | EREQINPROG | Can't commit/rollback transaction. There is a request in progress.\n`TransactionError` | EABORT | Transaction has been aborted.\n`RequestError` | EREQUEST | Message from SQL Server. Error object contains additional details.\n`RequestError` | ECANCEL | Cancelled.\n`RequestError` | ETIMEOUT | Request timeout.\n`RequestError` | EARGS | Invalid number of arguments.\n`RequestError` | EINJECT | SQL injection warning.\n`RequestError` | ENOCONN | No connection is specified for that request.\n`PreparedStatementError` | EARGS | Invalid number of arguments.\n`PreparedStatementError` | EINJECT | SQL injection warning.\n`PreparedStatementError` | EALREADYPREPARED | Statement is already prepared.\n`PreparedStatementError` | ENOTPREPARED | Statement is not prepared.\n\n### Detailed SQL Errors\n\nSQL errors (`RequestError` with `err.code` equal to `EREQUEST`) contains additional details.\n\n- **err.number** - The error number.\n- **err.state** - The error state, used as a modifier to the number.\n- **err.class** - The class (severity) of the error. A class of less than 10 indicates an informational message. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **err.lineNumber** - The line number in the SQL batch or stored procedure that caused the error. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **err.serverName** - The server name.\n- **err.procName** - The stored procedure name.\n\n## Informational messages\n\nTo receive informational messages generated by `PRINT` or `RAISERROR` commands use:\n\n```javascript\nconst request = new sql.Request()\nrequest.on('info', info => {\n    console.dir(info)\n})\nrequest.query('print \\'Hello world.\\';', (err, result) => {\n    // ...\n})\n```\n\nStructure of informational message:\n\n- **info.message** - Message.\n- **info.number** - The message number.\n- **info.state** - The message state, used as a modifier to the number.\n- **info.class** - The class (severity) of the message. Equal or lower than 10. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **info.lineNumber** - The line number in the SQL batch or stored procedure that generated the message. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **info.serverName** - The server name.\n- **info.procName** - The stored procedure name.\n\n## Metadata\n\nRecordset metadata are accessible through the `recordset.columns` property.\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select convert(decimal(18, 4), 1) as first, \\'asdf\\' as second', (err, result) => {\n    console.dir(result.recordset.columns)\n\n    console.log(result.recordset.columns.first.type === sql.Decimal) // true\n    console.log(result.recordset.columns.second.type === sql.VarChar) // true\n})\n```\n\nColumns structure for example above:\n\n```javascript\n{\n    first: {\n        index: 0,\n        name: 'first',\n        length: 17,\n        type: [sql.Decimal],\n        scale: 4,\n        precision: 18,\n        nullable: true,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    },\n    second: {\n        index: 1,\n        name: 'second',\n        length: 4,\n        type: [sql.VarChar],\n        nullable: false,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    }\n}\n```\n\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\")               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\")           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\")      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar)                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\")              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33)              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33)          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33)       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date())        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date())     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Variant\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length. Types `sql.XML` and `sql.Variant` are not supported as input parameters.\n\n## SQL injection\n\nThis module has built-in SQL injection protection. Always use parameters or tagged template literals to pass sanitized values to your queries.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('myval', sql.VarChar, '-- commented')\nrequest.query('select @myval as myval', (err, result) => {\n    console.dir(result)\n})\n```\n\n## Known issues\n\n### Tedious\n\n- If you're facing problems with connecting SQL Server 2000, try setting the default TDS version to 7.1 with `config.options.tdsVersion = '7_1'` ([issue](https://github.com/tediousjs/node-mssql/issues/36))\n- If you're executing a statement longer than 4000 chars on SQL Server 2000, always use [batch](#batch-batch-callback) instead of [query](#query-command-callback) ([issue](https://github.com/tediousjs/node-mssql/issues/68))\n\n### msnodesqlv8\n\n- msnodesqlv8 has problem with errors during transactions - [reported](https://github.com/tediousjs/node-mssql/issues/77).\n- msnodesqlv8 doesn't support [detailed SQL errors](#detailed-sql-errors).\n\n## 3.x to 4.x changes\n\n- Library & tests are rewritten to ES6.\n- `Connection` was renamed to `ConnectionPool`.\n- Drivers are no longer loaded dynamically so the library is now compatible with Webpack. To use `msnodesqlv8` driver, use `const sql = require('mssql/msnodesqlv8')` syntax.\n- Every callback/resolve now returns `result` object only. This object contains `recordsets` (array of recordsets), `recordset` (first recordset from array of recordsets), `rowsAffected` (array of numbers representig number of affected rows by each insert/update/delete statement) and `output` (key/value collection of output parameters' values).\n- Affected rows are now returned as an array. A separate number for each SQL statement.\n- Directive `multiple: true` was removed.\n- `Transaction` and `PreparedStatement` internal queues was removed.\n- ConnectionPool no longer emits `connect` and `close` events.\n- Removed verbose and debug mode.\n- Removed support for `tds` and `msnodesql` drivers.\n- Removed support for Node versions lower than 4.\n\n## Sponsors\n\nDevelopment is sponsored by [Integromat](https://www.integromat.com/en/integrations/mssql).\n\n## License\n\nCopyright (c) 2013-2018 Patrik Simek\n\nThe MIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[npm-image]: https://img.shields.io/npm/v/mssql.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/mssql\n[downloads-image]: https://img.shields.io/npm/dm/mssql.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/mssql\n[david-image]: https://img.shields.io/david/tediousjs/node-mssql.svg?style=flat-square\n[david-url]: https://david-dm.org/tediousjs/node-mssql\n[travis-image]: https://img.shields.io/travis/tediousjs/node-mssql/master.svg?style=flat-square&label=unit\n[travis-url]: https://travis-ci.org/tediousjs/node-mssql\n[appveyor-image]: https://img.shields.io/appveyor/ci/patriksimek/node-mssql-o4dhf/master.svg?style=flat-square&label=integration\n[appveyor-url]: https://ci.appveyor.com/project/patriksimek/node-mssql-o4dhf\n\n[tedious-url]: https://www.npmjs.com/package/tedious\n[msnodesqlv8-url]: https://www.npmjs.com/package/msnodesqlv8\n","readmeFilename":"README.md","gitHead":"7f374a8d73b00b17aa5b5ea5621c4314fc6e2daa","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@4.2.1","_npmVersion":"6.1.0","_nodeVersion":"8.11.2","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"integrity":"sha512-89mJcK/xgcsRdlCfEZxRsE93NKZnZJFSASy7Eiw4Bx6exvkGb9Kd1ey9d9/jODTFssoZ3U0OOFK3wabYMpJypQ==","shasum":"c7133247e912d71185b09d3c2bae0f19345fcde6","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.2.1.tgz","fileCount":19,"unpackedSize":192772,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbZ2ggCRA9TVsSAnZWagAA3HEP/Rv0MqXvUXCU27O2yhtj\nvIdGgY7Gsc/BO5aH2sHQsceI38n1e7wZYybkDZROwwPI+P5N+Ij+lk2xm3YY\nZbIadHwAgwjeN3y7E8KTTvC3PXwyaEO9n78N6V7iPQkVR24nepMotDBhoN45\nXCGVBvuhUouX/du6ihljga+xI11/IS8O1zkZJmvtJm6KpcCRS6XMcA6Mtgjm\nukVMJ+uOEoUSvRknUdMsI6GgHXFkp+0P27amHL1GNlp4A8/eectZoI9StgUw\ndFWNFtxVuKFBLRZW+MEhK5FBbBt0juR6nVJz/j16FIZCUoZqjDeJYqboWmGQ\ncSWp2HZQHCeXG4895ga8h8KeolJswiMUCYwDcE3R77ZgdrlFT91ijQVGCypd\nj068RRE7M88YIVzqL+kfwee2ZapNQL+yEw4uU8hbu76WqfXuPU1FDRZ2XdFN\n3CFdQ23R/F/J69zdxKthWnkrKO5mBTSPKUdkotu8wg25fhr8aOuPzLZsQePS\nw5Kjb3Q1w2+OTvPHarG6JAc035JAbaBSl3tvu91bzo2gHJaLTFO4Jr8BJmTy\njfq46v15R36LyH59XydAcZf5fyuCVbl9qQEkPGCdglW41dOHe+27QYobbDXI\nWcgmZlbrvp6SZg8NmN0zWf/GtDbJAo0BVrAc5UeG/Ugnpu7wAJMPjkHW4UMh\nG0Nj\r\n=5Lrw\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_4.2.1_1533503519970_0.07286130781095235"},"_hasShrinkwrap":false},"4.2.2":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.2.2","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.4.2","tedious":"^2.7.1"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=4"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha test/common/unit.js","test-tedious":"mocha test/tedious","test-msnodesqlv8":"mocha test/msnodesqlv8","test-cli":"mocha test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"49d710a3627a6606e791283769759806a6c20273","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@4.2.2","_npmVersion":"6.4.1","_nodeVersion":"8.12.0","_npmUser":{"name":"patriksimek","email":"patrik@patriksimek.cz"},"dist":{"integrity":"sha512-LmClNZAD8k/BmXnu0twrWSW0sQXkrOx8WssSB2wtgsdpFeQmBNfUQ+sr5rT037F388KLoN3lZX7nFARgWTSYHw==","shasum":"98378427de9faf422430bad03c7919fb894ec490","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.2.2.tgz","fileCount":19,"unpackedSize":192890,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbx6ybCRA9TVsSAnZWagAAxBEQAIjLBH4kOWrNu1oOtWDi\nS+iNkI9KrixMfGzESJDs7fFrLrlPHTfVpa1B6BU9hpqiKQZvEEuqOO3cPum6\n8wlEyPrfOAg+JUVNXQ0KHNgr6+HJPlgyqKLADbzHmn++8/9HMwBDuDJLlwZM\n7v5hd27Mvub5gRM2VPocbCwJq0YRN5AbDXOt3CMxq9kMWI0OaOqN/UqjCGRP\nRaUg/FIErfydufdOHMlypAs6x3v1LF+MjAAkxyYyxIa5MwbIxpHtoiOgQwPZ\n4ce2CiahgTAjpCmpMMboT3qvn3fNOJJtX2NKiwWEbfgllSpVEx2vVqU02Qgf\n0GiGgeCBs6pBEhOWpNDo3oAES+D79ACadZq91ddhzoAuo5bOsF4gb9kVg54E\nhIxA16wMwrHqknk2Xrj6Q2y3Z7VAGU6tM14oxGp7J5kuhVhyqi0e8O52MXfw\nDSCfojyCHTy8F5kSIM1OW3Fmq70044qTFm7CM/r6kiDPegWqlDiVS/q9wLn+\nN9jBB+GRT8gt0HGZC8NYVS0g4XFNUMJamxluhj/G2xiJfOHApMcdh3EbhQqC\ncbQo8td30HpZRuhb8E9Z5WqRN8MkgvPf6Y4GdI8ntPqTZsDdbnxmk5uviVn7\nuTQ0pDxPA89mpaOgyDR0VSs32vjOFea2/Tt915M34JHFHqTL1X+8kVLmlapx\nE/ob\r\n=Iwts\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_4.2.2_1539812506032_0.6629761954160209"},"_hasShrinkwrap":false},"4.2.3":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.2.3","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.4.2","tedious":"^2.7.1"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=4"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha -t 15000 test/common/unit.js","test-tedious":"mocha -t 15000 test/tedious","test-msnodesqlv8":"mocha -t 15000 test/msnodesqlv8","test-cli":"mocha -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"6a3d88eba974f6799c96c1d3d40a656a4c181cc6","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@4.2.3","_npmVersion":"6.4.1","_nodeVersion":"10.13.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-GocHjqx2qaIQ/FwJTnLCoscrnbROCgSJfgpxoPun7rDpJkDS4b82sZ+lh/3hH+UuTC7T4f7VtJO5GLA6VyWfCw==","shasum":"5dc2500a1f0177d3b40f8b7bdc2ebf02f155160b","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.2.3.tgz","fileCount":19,"unpackedSize":194552,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb4brICRA9TVsSAnZWagAAhvQP/3Lg7hoKHVdRgjES74Gm\nKb5nKDgH4cieSMJB+gSMna42HopjkHbpU7mlZC8zkIO2q9+iUlOboZLTMq40\n67ZIAF0kQbg2eHXMd94069xFK8bhLCpq5/dyRPMrpSdGF3qoAVhfkhLv94SR\nkTo9Oo1+lH4mkvOxVNAoxeydw4rOTL8Rli41iTbTA9xxrD0xdx4MZlcV8W+R\n5jQkXiFpDBL4+oAKUbz0WzmkC78oo2Nr5A/P9L+hcpUg9FTqRGMwFtNhOMU0\nGAMkgfOE3wE/35bVM1nSredy8MqYSKV/SpgRbtfqByrH58QzYVkWEuRfz2k+\nyO/sFc3LkY7j19sEfxdgB25z6m825Yp0UY+B6AoPWJkCLGq/V1ZeqA2do62s\nWMlwl2W5Z1ZiPzkNy9VePnO0AeXSbonvjHQtoam9Lb9oBhUoxOgbSp5uGIJP\nlFzjWp1+7oNWBzmpwM/ehZWU8QVhKiyETaULYuqLifcShImL9xBb7BYgdzMh\nyQWME2ATOkwFmlAQCn1Euok/ADuZQ0oEVU0gko1MaIhsjvHctVev0BBw0u9C\nDtzUjbpWGa4SWAYSkvmyc4yOZD818C66I2FILfqu2cfhEDQ69OY0EGYush67\nL+Frzp03jTfA8nss0Jqi1Ktk98EPvQno2toBgdc1U8Y0e5p1g0Cj9sSPMZBP\nprFG\r\n=tfW1\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_4.2.3_1541520070758_0.887399059433829"},"_hasShrinkwrap":false},"4.3.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.3.0","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.4.2","tedious":"^2.7.1"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=4"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha -t 15000 test/common/unit.js","test-tedious":"mocha -t 15000 test/tedious","test-msnodesqlv8":"mocha -t 15000 test/msnodesqlv8","test-cli":"mocha -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"7cb04a2825cfb6f29d9e1599eea44c1414beb651","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@4.3.0","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-MpSwdLMbKfFL3DwjhgbJdFViU+ye9YR+op/t/CdhWwYdA90qWYjPyWbIzso/2xRfm7liYNkN5EZjAS9PWFLLZg==","shasum":"1ff6d1392a3332236fefd66b48c3d44e9630ff80","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.3.0.tgz","fileCount":19,"unpackedSize":195470,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb9qHpCRA9TVsSAnZWagAA8LEP/1ejXsYyQHB7wrUMRbxJ\nDSSPwuV8xnxADmIbux1mejOJQUr4+bmXUxdrPflhSLeMz3+BzvAZshYcaTjw\nu8mFOqTA92pIZax2k8xI6SPlVoHZYE5H2QSdSICVh+tWw8TXZ+lXz/zlvzoq\nVDD+rReqKPbyVEJXYzDuAThta4UdlMkeoBzQyBxVCB/axufPzGE2Wi2kobAA\ngH865wNEKv5to7xBZPB/Mb6CNa0WyXZTCfIN7drhB545fV36L7ronIsB3raa\n3on/SLd6oFnPuWCayaAWRwRCgJF8idmKv4Bs5gxtlAorLvcaqzrhUbf0ag0h\n4eIJud9d89DgEE98l6N/eL+Swnc3MR3jhMpEY/+6YFUji4o/Iuu/qvNZQtml\nEaLKYRt/1DXcGQdCxh/atgR6oieCMZFcrB9Go2yaQaCtI+lHBFcq2jQLkACG\nL/ms8N7Z2hJchR03iwlz+fTsRJgT1BK2yvZHL2cTa4+nTJkAn0GmY2gkclXg\naIF3ej2g3VONE5MiKjBTOmzNnLLkbHse/6n/PvuBA0n1Vye1QCdXFqZGXbkE\n+M9ow9UBmNXqzmit7R+pvT3QKqTCGau+h0Cyy3VzTcyuMerL3/1dYz5SZcoU\nZth8puozn36x/JQZW1gnTCbwdDbAuQIYPcCjKB5S8c65xiMZDu7cT78oiMTS\nD8GJ\r\n=OWnN\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_4.3.0_1542889959900_0.9136293182173982"},"_hasShrinkwrap":false},"5.0.0-alpha.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"5.0.0-alpha.1","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.4.2","tedious":"^3.0.1"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha -t 15000 test/common/unit.js","test-tedious":"mocha -t 15000 test/tedious","test-msnodesqlv8":"mocha -t 15000 test/msnodesqlv8","test-cli":"mocha -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"44cc6eba3bb8025e913ea3d6c2f96c688941da18","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@5.0.0-alpha.1","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-ZG4vlI2CdmTNcyPK+NuhewAAzgIJ0pktcps80sbaRQyVtRpsh2UuiF55sH9kGnqF/AxzawnutsfmNKOVDG6HQA==","shasum":"4586ffb728d5f516660d7ecfc5856e5ae3ba8cec","tarball":"https://registry.npmjs.org/mssql/-/mssql-5.0.0-alpha.1.tgz","fileCount":19,"unpackedSize":195604,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb9rwgCRA9TVsSAnZWagAAgIwP/i/qdJXTwnGeUlgqJk2o\nn3j54tcKs48Cvt9+sfh79ZqjicCFXzCfA7EPHrrt1zbrwWPvbjzDAkKIjdEZ\nJd8yViRrlrBEcJoNI76n04xf3ywVgqHppqk/7xcV87p3mKnipd1NrYY1J08N\nqiFAZtnwWEz4G1UiJq9htnT5PXOAtpr0rgj3Q3G51A0aKWaSINWuCvxGFt/P\noEc+ErcZ4WOtMrVSUpJNuTJD+d7dhssxV9ZTKitqtAhIvng1TIdE9U4tU27j\nN5kRva8lW4vSGza3vDB7tpMxR2JX/my9yZhqjW1aYgE/OfBIdOMzcx+zWYEt\neqVbNTF+e/7YBJGoK+FPU17YtacGekPLMMsai4iy7MGF69nhsooaZH9WeoRM\n+7aSWPrm2kVmNYh7oh6jFTjAqfiuUDsehbBnWLPU3WnRUNa6tsvyACAd+chJ\nm75UHaeeKAqF+gAemZuh8xSxDQqYNTwMbb77um+cC8Pfu1kxbmNf7rHxbyq6\n1CR76ArxbIfjhh8PJnAXmBzT3B42iSBnX9pIT7UzfGdwHeaieF4lQV5XbBKK\nsEotJM22AE7ZmHhD2aUaNcJUAwd29P9gGxPXWONh2tPTd8Npl0m6Gvf+n+L+\n1QNB1pjjXF4tkp1SSVdGh75kbC/ElI27CT9NHIQlh/p5vlZO+uarajt9FKSS\nlt14\r\n=GaLS\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"patriksimek","email":"patrik@patriksimek.cz"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_5.0.0-alpha.1_1542896671363_0.5839377849670122"},"_hasShrinkwrap":false},"5.0.0-alpha.2":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"5.0.0-alpha.2","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.4.2","tedious":"^4.1.1"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha -t 15000 test/common/unit.js","test-tedious":"mocha -t 15000 test/tedious","test-msnodesqlv8":"mocha -t 15000 test/msnodesqlv8","test-cli":"mocha -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"2e6125f7b360e7db76c882cbb8a71e749c5dbfe5","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@5.0.0-alpha.2","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-1b6my4WvFZTBTgunkKIYLD7Ikua3XuFViNvuGgKiyPy9n8UCJb9SiyqvyBEW/JOOA1DiiMc4e13eqozQHGO/mw==","shasum":"d84b057aca7bc4204329d58fef8523737fa21789","tarball":"https://registry.npmjs.org/mssql/-/mssql-5.0.0-alpha.2.tgz","fileCount":19,"unpackedSize":196930,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcMylACRA9TVsSAnZWagAAqswP/3XgxSdPElv4fNjaatIx\nPu3fJlI+nzfBeiEv9VIeDNlqZVuHd0Dh8LkUujXYy4n6ppqNrLZVZ7CW8/2r\netvInEFMWZqrOc4E1dOnPVEylCO7IIchWCl7HZIVhW2lAkIRWAe+seYzeANQ\neFGF3IZnEB8lb1bic8OL6KOKdXBCDfnF2KjVU2OcfeVsrA5ZvKayt1jaIjcr\nKhwxfv5mNm0ESV4RYDAEJTGgIhHtuUfSyQLCw2QG2tKKTlFMNrcOe/rntl6z\n96scgP5GHXYq+ABjuDC8ggN6zNnM/Rk+DKBpy59mPFi7dEaXPn2p67azfOyH\n2Am4uMIhA2g4zdfaFPzfrJJrMTPT4oMHAoTrsS7Gf+/puysp+hbHsiM4ILrp\nORFoGP+fxfhM4R85dMeAejFZO1oG/0guHqE0DasexAD3hYXmuEvI1hHmpngU\na9dOR4LwdpkvwzAP/P6IZ4OhYQTBdsH3rd8HlMzefk51xb3IP9jVEVjD1Y25\nLZr3PcMFSbebaVLEQ5HQzuaDFEj3X5oZh0He2tJnCtyNEi5aTPQDHMBAtqDh\nEBrqU3ReHJmFCTWgYISJRjmyuJfSshzHL0rUCmcsEDr/8ystLE9PKecPc2yI\n+kLnIxwH+fygbDdgtjkBxiGs/Us8iy++7vg8oIoS8UA/Hy9OVnIuEz8Cfa5u\njyJp\r\n=v/BG\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_5.0.0-alpha.2_1546856767300_0.10863387650858258"},"_hasShrinkwrap":false},"5.0.0-alpha.3":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"5.0.0-alpha.3","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.4.2","tedious":"^4.1.1"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha -t 15000 test/common/unit.js","test-tedious":"mocha -t 15000 test/tedious","test-msnodesqlv8":"mocha -t 15000 test/msnodesqlv8","test-cli":"mocha -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"949f6b23607e2e40d7cebeaf4b08bc9c807f2b04","readme":"# node-mssql\n\nMicrosoft SQL Server client for Node.js\n\n[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Travis CI][travis-image]][travis-url] [![Appveyor CI][appveyor-image]][appveyor-url] [![Join the chat at https://gitter.im/patriksimek/node-mssql](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/patriksimek/node-mssql?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSupported TDS drivers:\n- [Tedious][tedious-url] (pure JavaScript - Windows/macOS/Linux, default)\n- [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server][msnodesqlv8-url] (native - Windows only)\n\n## Installation\n\n    npm install mssql\n\n## Quick Example\n\n```javascript\nconst sql = require('mssql')\n\nasync () => {\n    try {\n        await sql.connect('mssql://username:password@localhost/database')\n        const result = await sql.query`select * from mytable where id = ${value}`\n        console.dir(result)\n    } catch (err) {\n        // ... error checks\n    }\n}\n```\n\nIf you're on Windows Azure, add `?encrypt=true` to your connection string. See [docs](#configuration) to learn more.\n\n## Documentation\n\n### Examples\n\n* [Async/Await](#asyncawait)\n* [Promises](#promises)\n* [ES6 Tagged template literals](#es6-tagged-template-literals)\n* [Callbacks](#callbacks)\n* [Streaming](#streaming)\n* [Connection Pools](#connection-pools)\n\n### Configuration\n\n* [General](#general-same-for-all-drivers)\n* [Formats](#formats)\n\n### Drivers\n\n* [Tedious](#tedious)\n* [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server](#microsoft--contributors-node-v8-driver-for-nodejs-for-sql-server)\n\n### Connections\n\n* [ConnectionPool](#connections-1)\n* [connect](#connect-callback)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute-procedure-callback)\n* [input](#input-name-type-value)\n* [output](#output-name-type-value)\n* [pipe](#pipe-stream)\n* [query](#query-command-callback)\n* [batch](#batch-batch-callback)\n* [bulk](#bulk-table-callback)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin-isolationlevel-callback)\n* [commit](#commit-callback)\n* [rollback](#rollback-callback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#input-name-type)\n* [output](#output-name-type)\n* [prepare](#prepare-statement-callback)\n* [execute](#execute-values-callback)\n* [unprepare](#unprepare-callback)\n\n### Other\n\n* [CLI](#cli)\n* [Geography and Geometry](#geography-and-geometry)\n* [Table-Valued Parameter](#table-valued-parameter-tvp)\n* [Affected Rows](#affected-rows)\n* [JSON support](#json-support)\n* [Errors](#errors)\n* [Informational messages](#informational-messages)\n* [Metadata](#metadata)\n* [Data Types](#data-types)\n* [SQL injection](#sql-injection)\n* [Known Issues](#known-issues)\n* [Contributing](https://github.com/tediousjs/node-mssql/wiki/Contributing)\n* [3.x to 4.x changes](#3x-to-4x-changes)\n* [3.x Documentation](https://github.com/tediousjs/node-mssql/blob/1893969195045a250f0fdeeb2de7f30dcf6689ad/README.md)\n\n## Examples\n\n### Config\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...',\n\n    options: {\n        encrypt: true // Use this if you're on Windows Azure\n    }\n}\n```\n\n\n### Async/Await\n\n```javascript\nconst sql = require('mssql')\n\n(async function () {\n    try {\n        let pool = await sql.connect(config)\n        let result1 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .query('select * from mytable where id = @input_parameter')\n            \n        console.dir(result1)\n    \n        // Stored procedure\n        \n        let result2 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .output('output_parameter', sql.VarChar(50))\n            .execute('procedure_name')\n        \n        console.dir(result2)\n    } catch (err) {\n        // ... error checks\n    }\n})()\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Promises\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(pool => {\n    // Query\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .query('select * from mytable where id = @input_parameter')\n}).then(result => {\n    console.dir(result)\n    \n    // Stored procedure\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nNative Promise is used by default. You can easily change this with `sql.Promise = require('myownpromisepackage')`.\n\n### ES6 Tagged template literals\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(() => {\n    return sql.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n### Callbacks\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    // Query\n\n    new sql.Request().query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n    // Stored Procedure\n\n    new sql.Request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Streaming\n\nIf you plan to work with large amount of rows, you should always use streaming. Once you enable this, you must listen for events to receive data.\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    const request = new sql.Request()\n    request.stream = true // You can set streaming differently for each request\n    request.query('select * from verylargetable') // or request.execute(procedure)\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nWhen streaming large sets of data you want to back-off or chunk the amount of data you're processing\n to prevent memory exhaustion issues; you can use the `Request.pause()` function to do this. Here is\n an example of managing rows in batches of 15:\n\n```javascript\nlet rowsToProcess = [];\nrequest.on('row', row => {\n  if (rowsToProcess.length < 15) {\n    rowsToProcess.push(row);\n  } else {\n    request.pause();\n    processRows();\n  }\n});\nrequest.on('done', () => {\n    processRows();\n});\n\nfunction processRows() {\n  // process rows\n  rowsToProcess = [];\n  request.resume();\n}\n```\n\n## Connection Pools\n\nUsing a single connection pool for your application/service is recommended.\nInstantiating a pool with a callback, or immediately calling `.connect`, is asynchronous to ensure a connection can be\nestablished before returning. From that point, you're able to acquire connections as normal:  \n\n```javascript\nconst sql = require('mssql')\n\n// async/await style:\nconst pool1 = new sql.ConnectionPool(config).connect();\n\npool1.on('error', err => {\n    // ... error handler\n})\n\nasync function messageHandler() {\n    await pool1; // ensures that the pool has been created\n    try {\n    \tconst request = pool1.request(); // or: new sql.Request(pool1)\n    \tconst result = request.query('select 1 as number')\n    \tconsole.dir(result)\n    \treturn result;\n\t} catch (err) {\n        console.error('SQL error', err);\n\t}\n}\n\n// promise style:\nconst pool2 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n});\n\npool2.on('error', err => {\n    // ... error handler\n})\n\nfunction runStoredProcedure() {\n    return pool2.then((pool) => {\n\t\tpool.request() // or: new sql.Request(pool2)\n\t\t.input('input_parameter', sql.Int, 10)\n\t\t.output('output_parameter', sql.VarChar(50))\n\t\t.execute('procedure_name', (err, result) => {\n\t\t\t// ... error checks\n\t\t\tconsole.dir(result)\n\t\t})\n    });\n}\n```\n\nAwaiting or `.then`ing the pool creation is a safe way to ensure that the pool is always ready, without knowing where it\nis needed first. In practice, once the pool is created then there will be no delay for the next operation.\n\n**ES6 Tagged template literals**\n\n```javascript\nnew sql.ConnectionPool(config).connect().then(pool => {\n    return pool.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n## Configuration\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n### General (same for all drivers)\n\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **domain** - Once you set domain, driver will connect to SQL Server using domain login.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **connectionTimeout** - Connection timeout in ms (default: `15000`).\n- **requestTimeout** - Request timeout in ms (default: `15000`). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second. When passed via connection string, the key must be `request timeout`\n- **stream** - Stream recordsets/rows instead of returning them all at once as an argument of callback (default: `false`). You can also enable streaming for each request independently (`request.stream = true`). Always set to `true` if you plan to work with large amount of rows.\n- **parseJSON** - Parse JSON recordsets to JS objects (default: `false`). For more information please see section [JSON support](#json-support).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimum of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\nComplete list of pool options can be found [here](https://github.com/coopernurse/node-pool).\n\n### Formats\n\nIn addition to configuration object there is an option to pass config as a connection string. Two formats of connection string are supported.\n\n##### Classic Connection String\n\n```\nServer=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true\nDriver=msnodesqlv8;Server=(local)\\INSTANCE;Database=database;UID=DOMAIN\\username;PWD=password;Encrypt=true\n```\n\n##### Connection String URI\n\n```\nmssql://username:password@localhost:1433/database?encrypt=true\nmssql://username:password@localhost/INSTANCE/database?encrypt=true&domain=DOMAIN&driver=msnodesqlv8\n```\n\n## Drivers\n\n### Tedious\n\nDefault driver, actively maintained and production ready. Platform independent, runs everywhere Node.js runs. Officially supported by Microsoft.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the configured tedious `Connection`. It can be used for attaching event handlers like in this example:\n```js\nrequire('mssql').connect(...config, beforeConnect: conn => {\n  conn.once('connect', err => { err ? console.error(err) : console.log('mssql connected')})\n  conn.once('end', err => { err ? console.error(err) : console.log('mssql disconnected')})\n}})\n```\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1434 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `false`).\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_1`, `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n- **options.appName** - Application name used for SQL server logging.\n- **options.abortTransactionOnError** - A boolean determining whether to rollback a transaction automatically if any error is encountered during the given transaction's execution. This sets the value for `XACT_ABORT` during the initial SQL phase of a connection.\n\nMore information about Tedious specific options: http://tediousjs.github.io/tedious/api-connection.html\n\n### Microsoft / Contributors Node V8 Driver for Node.js for SQL Server\n\n**Requires Node.js 0.12.x or newer. Windows only.** This driver is not part of the default package and must be installed separately by `npm install msnodesqlv8`. To use this driver, use this require syntax: `const sql = require('mssql/msnodesqlv8')`.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the connection configuration, that can be modified to pass extra parameters to the driver's `open()` method.\n- **connectionString** - Connection string (default: see below).\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not to use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n## Connections\n\nInternally, each `ConnectionPool` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool. Connection health check is built-in so once the dead connection is discovered, it is immediately replaced with a new one.\n\n**IMPORTANT**: Always attach an `error` listener to created connection. Whenever something goes wrong with the connection it will emit an error and if there is no listener it will crash your application with an uncaught error.\n\n```javascript\nconst pool = new sql.ConnectionPool({ /* config */ })\n```\n\n### Events\n\n- **error(err)** - Dispatched on connection error.\n\n---------------------------------------\n\n### connect ([callback])\n\nCreate a new connection pool. The initial probe connection is created to find out whether the configuration is valid.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after initial probe connection has established, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst pool = new sql.ConnectionPool({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n})\n\npool.connect(err => {\n    // ...\n})\n```\n\n__Errors__\n- ELOGIN (`ConnectionError`) - Login failed.\n- ETIMEOUT (`ConnectionError`) - Connection timeout.\n- EALREADYCONNECTED (`ConnectionError`) - Database is already connected!\n- EALREADYCONNECTING (`ConnectionError`) - Already connecting to database!\n- EINSTLOOKUP (`ConnectionError`) - Instance lookup failed.\n- ESOCKET (`ConnectionError`) - Socket error.\n\n---------------------------------------\n\n### close()\n\nClose all active connections in the pool.\n\n__Example__\n\n```javascript\npool.close()\n```\n\n## Request\n\n```javascript\nconst request = new sql.Request(/* [pool or transaction] */)\n```\n\nIf you omit pool/transaction argument, global pool is used instead.\n\n### Events\n\n- **recordset(columns)** - Dispatched when metadata for new recordset are parsed.\n- **row(row)** - Dispatched when new row is parsed.\n- **done(returnValue)** - Dispatched when request is complete.\n- **error(err)** - Dispatched on error.\n- **info(message)** - Dispatched on informational message.\n\n---------------------------------------\n\n### execute (procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.input('input_parameter', sql.Int, value)\nrequest.output('output_parameter', sql.Int)\nrequest.execute('procedure_name', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordsets.length) // count of recordsets returned by the procedure\n    console.log(result.recordsets[0].length) // count of rows contained in first recordset\n    console.log(result.recordset) // first recordset from result.recordsets\n    console.log(result.returnValue) // procedure return value\n    console.log(result.output) // key/value collection of output values\n    console.log(result.rowsAffected) // array of numbers, each number represents the number of rows affected by executed statemens\n\n    // ...\n})\n```\n\n__Errors__\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### input (name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automatically decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value)\nrequest.input('input_parameter', sql.Int, value)\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define your own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text)\n```\n\nYou can also overwrite the default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt)\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int)\nrequest.output('output_parameter', sql.VarChar(50), 'abc')\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### pipe (stream)\n\nSets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n\n__Arguments__\n\n- **stream** - Writable stream in object mode.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.pipe(stream)\nrequest.query('select * from mytable')\nstream.on('error', err => {\n    // ...\n})\nstream.on('finish', () => {\n    // ...\n})\n```\n\n---------------------------------------\n\n### query (command, [callback])\n\nExecute the SQL command. To execute commands like `create procedure` or if you plan to work with local temporary tables, use [batch](#batch-batch-callback) instead.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n\n    // ...\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number; select 2 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n    console.log(result.recordsets[0][0].number) // return 1\n    console.log(result.recordsets[1][0].number) // return 2\n})\n```\n\n**NOTE**: To get number of rows affected by the statement(s), see section [Affected Rows](#affected-rows).\n\n---------------------------------------\n\n### batch (batch, [callback])\n\nExecute the SQL command. Unlike [query](#query-command-callback), it doesn't use `sp_executesql`, so is not likely that SQL Server will reuse the execution plan it generates for the SQL. Use this only in special cases, for example when you need to execute commands like `create procedure` which can't be executed with [query](#query-command-callback) or if you're executing statements longer than 4000 chars on SQL Server 2000. Also you should use this if you're plan to work with local temporary tables ([more information here](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)).\n\nNOTE: Table-Valued Parameter (TVP) is not supported in batch.\n\n__Arguments__\n\n- **batch** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.batch('create procedure #temporary as select * from table', (err, result) => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\nYou can enable multiple recordsets in queries with the `request.multiple = true` command.\n\n---------------------------------------\n\n### bulk (table, [callback])\n\nPerform a bulk insert.\n\n__Arguments__\n\n- **table** - `sql.Table` instance.\n- **callback(err, rowCount)** - A callback which is called after bulk insert has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst table = new sql.Table('table_name') // or temporary table, e.g. #temptable\ntable.create = true\ntable.columns.add('a', sql.Int, {nullable: true, primary: true})\ntable.columns.add('b', sql.VarChar(50), {nullable: false})\ntable.rows.add(777, 'test')\n\nconst request = new sql.Request()\nrequest.bulk(table, (err, result) => {\n    // ... error checks\n})\n```\n\n**IMPORTANT**: Always indicate whether the column is nullable or not!\n\n**TIP**: If you set `table.create` to `true`, module will check if the table exists before it start sending data. If it doesn't, it will automatically create it. You can specify primary key columns by setting `primary: true` to column's options. Primary key constraint on multiple columns is supported.\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n__Errors__\n- ENAME (`RequestError`) - Table name must be specified for bulk insert.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### cancel()\n\nCancel currently executing request. Return `true` if cancellation packet was send successfully.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', (err, result) => {\n    console.log(err instanceof sql.RequestError)  // true\n    console.log(err.message)                      // Cancelled.\n    console.log(err.code)                         // ECANCEL\n\n    // ...\n})\n\nrequest.cancel()\n```\n\n## Transaction\n\n**IMPORTANT:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is acquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\n```\n\nIf you omit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    const request = new sql.Request(transaction)\n    request.query('insert into mytable (mycolumn) values (12345)', (err, result) => {\n        // ... error checks\n\n        transaction.commit(err => {\n            // ... error checks\n\n            console.log(\"Transaction committed.\")\n        })\n    })\n})\n```\n\nTransaction can also be created by `const transaction = pool.transaction()`. Requests can also be created by `const request = transaction.request()`.\n\n__Aborted transactions__\n\nThis example shows how you should correctly handle transaction errors when `abortTransactionOnError` (`XACT_ABORT`) is enabled. Added in 2.0.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    let rolledBack = false\n\n    transaction.on('rollback', aborted => {\n        // emited with aborted === true\n\n        rolledBack = true\n    })\n\n    new sql.Request(transaction)\n    .query('insert into mytable (bitcolumn) values (2)', (err, result) => {\n        // insert should fail because of invalid value\n\n        if (err) {\n            if (!rolledBack) {\n                transaction.rollback(err => {\n                    // ... error checks\n                })\n            }\n        } else {\n            transaction.commit(err => {\n                // ... error checks\n            })\n        }\n    })\n})\n```\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback(aborted)** - Dispatched on successful rollback with an argument determining if the transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### begin ([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYBEGUN (`TransactionError`) - Transaction has already begun.\n\n---------------------------------------\n\n### commit ([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has committed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.commit(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't commit transaction. There is a request in progress.\n\n---------------------------------------\n\n### rollback ([callback])\n\nRollback a transaction. If the queue isn't empty, all queued requests will be Cancelled and the transaction will be marked as aborted.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.rollback(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't rollback transaction. There is a request in progress.\n\n## Prepared Statement\n\n**IMPORTANT:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is acquired from the connection pool and all subsequent executions are executed exclusively on this connection. After you call `unprepare`, the connection is then released back to the connection pool.\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\n```\n\nIf you omit the connection argument, the global connection is used instead.\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        ps.unprepare(err => {\n            // ... error checks\n\n        })\n    })\n})\n```\n\n**IMPORTANT**: Remember that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement!\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n### input (name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int)\nps.input('input_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int)\nps.output('output_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### prepare (statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.prepare('select @param as value', err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYPREPARED (`PreparedStatementError`) - Statement is already prepared.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n\n---------------------------------------\n\n### execute (values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        console.log(result.recordset[0].value) // return 12345\n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\nYou can also stream executed request.\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.stream = true\n    const request = ps.execute({param: 12345})\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n        \n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\n**TIP**: To learn more about how number of affected rows works, see section [Affected Rows](#affected-rows).\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n\n---------------------------------------\n\n### unprepare ([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.unprepare(err => {\n        // ... error checks\n\n    })\n})\n```\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n\n## CLI\n\nBefore you can start using CLI, you must install `mssql` globally with `npm install mssql -g`. Once you do that you will be able to execute `mssql` command.\n\n__Setup__\n\nCreate a `.mssql.json` configuration file (anywhere). Structure of the file is the same as the standard configuration object.\n\n```json\n{\n    \"user\": \"...\",\n    \"password\": \"...\",\n    \"server\": \"localhost\",\n    \"database\": \"...\"\n}\n```\n\n__Example__\n\n```shell\necho \"select * from mytable\" | mssql /path/to/config\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}]]\n```\n\nYou can also query for multiple recordsets.\n\n```shell\necho \"select * from mytable; select * from myothertable\" | mssql\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}],[{\"id\":15,\"name\":\"Product name\"}]]\n```\n\nIf you omit config path argument, mssql will try to load it from current working directory.\n\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n\n{ srid: 0,\n  version: 1,\n  points:\n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nconst tvp = new sql.Table() // You can optionally specify table type name in the first argument.\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50))\ntvp.columns.add('b', sql.Int)\n\n// Add rows\ntvp.rows.add('hello tvp', 777) // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('tvp', tvp)\nrequest.execute('MyCustomStoredProcedure', (err, result) => {\n    // ... error checks\n\n    console.dir(result.recordsets[0][0]) // {a: 'hello tvp', b: 777}\n})\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n## Affected Rows\n\nIf you're performing `INSERT`, `UPDATE` or `DELETE` in a query, you can read number of affected rows. The `rowsAffected` variable is an array of numbers. Each number represents number of affected rows by a single statement.\n\n__Example using Promises__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100').then(result => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using callbacks__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100', (err, result) => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using streaming__\n\n```javascript\nconst request = new sql.Request()\nrequest.stream = true\nrequest.query('update myAwesomeTable set awesomness = 100')\nrequest.on('done', result => {\n    console.log(result.rowsAffected)\n})\n```\n\n## JSON support\n\nSQL Server 2016 introduced built-in JSON serialization. By default, JSON is returned as a plain text in a special column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B`.\n\nExample\n```sql\nSELECT\n    1 AS 'a.b.c',\n    2 AS 'a.b.d',\n    3 AS 'a.x',\n    4 AS 'a.y'\nFOR JSON PATH\n```\n\nResults in:\n```javascript\nrecordset = [ { 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B': '{\"a\":{\"b\":{\"c\":1,\"d\":2},\"x\":3,\"y\":4}}' } ]\n```\n\nYou can enable built-in JSON parser with `config.parseJSON = true`. Once you enable this, recordset will contain rows of parsed JS objects. Given the same example, result will look like this:\n```javascript\nrecordset = [ { a: { b: { c: 1, d: 2 }, x: 3, y: 4 } } ]\n```\n\n**IMPORTANT**: In order for this to work, there must be exactly one column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B` in the recordset.\n\nMore information about JSON support can be found in [official documentation](https://msdn.microsoft.com/en-us/library/dn921882.aspx).\n\n## Errors\n\nThere are 4 types of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, committing and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and its original stack may be cropped. You can always access original error with `err.originalError`.\n\nSQL Server may generate more than one error for one request so you can access preceding errors with `err.precedingErrors`.\n\n### Error Codes\n\nEach known error has `name`, `code` and `message` properties.\n\nName | Code | Message\n:--- | :--- | :---\n`ConnectionError` | ELOGIN | Login failed.\n`ConnectionError` | ETIMEOUT | Connection timeout.\n`ConnectionError` | EDRIVER | Unknown driver.\n`ConnectionError` | EALREADYCONNECTED | Database is already connected!\n`ConnectionError` | EALREADYCONNECTING | Already connecting to database!\n`ConnectionError` | ENOTOPEN | Connection not yet open.\n`ConnectionError` | EINSTLOOKUP | Instance lookup failed.\n`ConnectionError` | ESOCKET | Socket error.\n`ConnectionError` | ECONNCLOSED | Connection is closed.\n`TransactionError` | ENOTBEGUN | Transaction has not begun.\n`TransactionError` | EALREADYBEGUN | Transaction has already begun.\n`TransactionError` | EREQINPROG | Can't commit/rollback transaction. There is a request in progress.\n`TransactionError` | EABORT | Transaction has been aborted.\n`RequestError` | EREQUEST | Message from SQL Server. Error object contains additional details.\n`RequestError` | ECANCEL | Cancelled.\n`RequestError` | ETIMEOUT | Request timeout.\n`RequestError` | EARGS | Invalid number of arguments.\n`RequestError` | EINJECT | SQL injection warning.\n`RequestError` | ENOCONN | No connection is specified for that request.\n`PreparedStatementError` | EARGS | Invalid number of arguments.\n`PreparedStatementError` | EINJECT | SQL injection warning.\n`PreparedStatementError` | EALREADYPREPARED | Statement is already prepared.\n`PreparedStatementError` | ENOTPREPARED | Statement is not prepared.\n\n### Detailed SQL Errors\n\nSQL errors (`RequestError` with `err.code` equal to `EREQUEST`) contains additional details.\n\n- **err.number** - The error number.\n- **err.state** - The error state, used as a modifier to the number.\n- **err.class** - The class (severity) of the error. A class of less than 10 indicates an informational message. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **err.lineNumber** - The line number in the SQL batch or stored procedure that caused the error. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **err.serverName** - The server name.\n- **err.procName** - The stored procedure name.\n\n## Informational messages\n\nTo receive informational messages generated by `PRINT` or `RAISERROR` commands use:\n\n```javascript\nconst request = new sql.Request()\nrequest.on('info', info => {\n    console.dir(info)\n})\nrequest.query('print \\'Hello world.\\';', (err, result) => {\n    // ...\n})\n```\n\nStructure of informational message:\n\n- **info.message** - Message.\n- **info.number** - The message number.\n- **info.state** - The message state, used as a modifier to the number.\n- **info.class** - The class (severity) of the message. Equal or lower than 10. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **info.lineNumber** - The line number in the SQL batch or stored procedure that generated the message. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **info.serverName** - The server name.\n- **info.procName** - The stored procedure name.\n\n## Metadata\n\nRecordset metadata are accessible through the `recordset.columns` property.\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select convert(decimal(18, 4), 1) as first, \\'asdf\\' as second', (err, result) => {\n    console.dir(result.recordset.columns)\n\n    console.log(result.recordset.columns.first.type === sql.Decimal) // true\n    console.log(result.recordset.columns.second.type === sql.VarChar) // true\n})\n```\n\nColumns structure for example above:\n\n```javascript\n{\n    first: {\n        index: 0,\n        name: 'first',\n        length: 17,\n        type: [sql.Decimal],\n        scale: 4,\n        precision: 18,\n        nullable: true,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    },\n    second: {\n        index: 1,\n        name: 'second',\n        length: 4,\n        type: [sql.VarChar],\n        nullable: false,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    }\n}\n```\n\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\")               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\")           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\")      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar)                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\")              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33)              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33)          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33)       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date())        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date())     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Variant\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length. Types `sql.XML` and `sql.Variant` are not supported as input parameters.\n\n## SQL injection\n\nThis module has built-in SQL injection protection. Always use parameters or tagged template literals to pass sanitized values to your queries.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('myval', sql.VarChar, '-- commented')\nrequest.query('select @myval as myval', (err, result) => {\n    console.dir(result)\n})\n```\n\n## Known issues\n\n### Tedious\n\n- If you're facing problems with connecting SQL Server 2000, try setting the default TDS version to 7.1 with `config.options.tdsVersion = '7_1'` ([issue](https://github.com/tediousjs/node-mssql/issues/36))\n- If you're executing a statement longer than 4000 chars on SQL Server 2000, always use [batch](#batch-batch-callback) instead of [query](#query-command-callback) ([issue](https://github.com/tediousjs/node-mssql/issues/68))\n\n### msnodesqlv8\n\n- msnodesqlv8 has problem with errors during transactions - [reported](https://github.com/tediousjs/node-mssql/issues/77).\n- msnodesqlv8 doesn't support [detailed SQL errors](#detailed-sql-errors).\n\n## 3.x to 4.x changes\n\n- Library & tests are rewritten to ES6.\n- `Connection` was renamed to `ConnectionPool`.\n- Drivers are no longer loaded dynamically so the library is now compatible with Webpack. To use `msnodesqlv8` driver, use `const sql = require('mssql/msnodesqlv8')` syntax.\n- Every callback/resolve now returns `result` object only. This object contains `recordsets` (array of recordsets), `recordset` (first recordset from array of recordsets), `rowsAffected` (array of numbers representig number of affected rows by each insert/update/delete statement) and `output` (key/value collection of output parameters' values).\n- Affected rows are now returned as an array. A separate number for each SQL statement.\n- Directive `multiple: true` was removed.\n- `Transaction` and `PreparedStatement` internal queues was removed.\n- ConnectionPool no longer emits `connect` and `close` events.\n- Removed verbose and debug mode.\n- Removed support for `tds` and `msnodesql` drivers.\n- Removed support for Node versions lower than 4.\n\n[npm-image]: https://img.shields.io/npm/v/mssql.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/mssql\n[downloads-image]: https://img.shields.io/npm/dm/mssql.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/mssql\n[david-image]: https://img.shields.io/david/tediousjs/node-mssql.svg?style=flat-square\n[david-url]: https://david-dm.org/tediousjs/node-mssql\n[travis-image]: https://img.shields.io/travis/tediousjs/node-mssql/master.svg?style=flat-square&label=unit\n[travis-url]: https://travis-ci.org/tediousjs/node-mssql\n[appveyor-image]: https://img.shields.io/appveyor/ci/patriksimek/node-mssql-o4dhf/master.svg?style=flat-square&label=integration\n[appveyor-url]: https://ci.appveyor.com/project/patriksimek/node-mssql-o4dhf\n\n[tedious-url]: https://www.npmjs.com/package/tedious\n[msnodesqlv8-url]: https://www.npmjs.com/package/msnodesqlv8\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@5.0.0-alpha.3","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-sTCRi1Nz2XzIfaYLiqQV+4g7GWk5m2EoOEkaBiRadBQHVo+9yZWCxowhy9a7pFC00/L2AHkM7GBkua8o/ZOq7w==","shasum":"51a3a68e410edcbe21954b3ea0b314bac968b729","tarball":"https://registry.npmjs.org/mssql/-/mssql-5.0.0-alpha.3.tgz","fileCount":20,"unpackedSize":199428,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcM2KhCRA9TVsSAnZWagAAolcP/RegEGIPVr+pm6p06g9c\nWfT8GEoEW8Dp5REA5LA/4frxeJFsKfaqC5skRH4FIeEadmj9izu87Y/pwYhJ\nfnmWVpmsXJX1g8nXvfjnaRYhun8dx59O39coHY9RuhvIOHxqQQbNnDtLLJgq\nxyKE04QYLP8NLeTR57U01PIfPFyiaQYjJa2OAjMYpHeiDlOunGXFLUSFFyC3\n70DJWv0az5NgSnAPi42qtgmbigmBs1EWWuR4SnwrrnHy8KmimykbwnMQ01Q1\nPlEQhdds6oBc9zpu2KY8cg4met5Gl2pOXTNvjtOGzTcN/QBoWkBFNF79zbGA\nHnmWr6UYH6MhZYa23yXyHJ1N9bJRUZt+stsHWFV8y38TH139QHH3CfMkXomy\n6GygO+H5FBO9J4d5dj45AxiBnokKhHuoztXPWoruEyDtmbiPyZhoEOs9QOfJ\nPcapLyZtGYALNDlaZMHOfXo+50K4wa5pp3VdqpOtSMIovVbTMZQWU/17VgEL\nm8OxIMoRZ3ZbzwpXMwosfp4JKVtAtCpsFNEwKiULKYJyWxFEWF6x1nCkFRtN\nNa+o9rp0t7UGuKNu8gu4YZLpQyd8rlYJf6t4IbUcu183D3RXf1tMxNX4UdrU\nB8lecvkc2fngnHr3PBN7IUMFszqjw5ixvM60dkFr3KetJ5Itt90tDMGYG7XP\nl2t6\r\n=bnlx\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_5.0.0-alpha.3_1546871456449_0.2758080981845277"},"_hasShrinkwrap":false},"5.0.0-alhpa.4":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"5.0.0-alhpa.4","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.4.2","tedious":"^4.1.1"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"bdc050e6afd0e0f2e2e1a76a3316abe04dc5d199","readme":"# node-mssql\n\nMicrosoft SQL Server client for Node.js\n\n[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Travis CI][travis-image]][travis-url] [![Appveyor CI][appveyor-image]][appveyor-url] [![Join the chat at https://gitter.im/patriksimek/node-mssql](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/patriksimek/node-mssql?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSupported TDS drivers:\n- [Tedious][tedious-url] (pure JavaScript - Windows/macOS/Linux, default)\n- [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server][msnodesqlv8-url] (native - Windows only)\n\n## Installation\n\n    npm install mssql\n\n## Quick Example\n\n```javascript\nconst sql = require('mssql')\n\nasync () => {\n    try {\n        await sql.connect('mssql://username:password@localhost/database')\n        const result = await sql.query`select * from mytable where id = ${value}`\n        console.dir(result)\n    } catch (err) {\n        // ... error checks\n    }\n}\n```\n\nIf you're on Windows Azure, add `?encrypt=true` to your connection string. See [docs](#configuration) to learn more.\n\n## Documentation\n\n### Examples\n\n* [Async/Await](#asyncawait)\n* [Promises](#promises)\n* [ES6 Tagged template literals](#es6-tagged-template-literals)\n* [Callbacks](#callbacks)\n* [Streaming](#streaming)\n* [Connection Pools](#connection-pools)\n\n### Configuration\n\n* [General](#general-same-for-all-drivers)\n* [Formats](#formats)\n\n### Drivers\n\n* [Tedious](#tedious)\n* [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server](#microsoft--contributors-node-v8-driver-for-nodejs-for-sql-server)\n\n### Connections\n\n* [ConnectionPool](#connections-1)\n* [connect](#connect-callback)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute-procedure-callback)\n* [input](#input-name-type-value)\n* [output](#output-name-type-value)\n* [pipe](#pipe-stream)\n* [query](#query-command-callback)\n* [batch](#batch-batch-callback)\n* [bulk](#bulk-table-callback)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin-isolationlevel-callback)\n* [commit](#commit-callback)\n* [rollback](#rollback-callback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#input-name-type)\n* [output](#output-name-type)\n* [prepare](#prepare-statement-callback)\n* [execute](#execute-values-callback)\n* [unprepare](#unprepare-callback)\n\n### Other\n\n* [CLI](#cli)\n* [Geography and Geometry](#geography-and-geometry)\n* [Table-Valued Parameter](#table-valued-parameter-tvp)\n* [Affected Rows](#affected-rows)\n* [JSON support](#json-support)\n* [Errors](#errors)\n* [Informational messages](#informational-messages)\n* [Metadata](#metadata)\n* [Data Types](#data-types)\n* [SQL injection](#sql-injection)\n* [Known Issues](#known-issues)\n* [Contributing](https://github.com/tediousjs/node-mssql/wiki/Contributing)\n* [3.x to 4.x changes](#3x-to-4x-changes)\n* [3.x Documentation](https://github.com/tediousjs/node-mssql/blob/1893969195045a250f0fdeeb2de7f30dcf6689ad/README.md)\n\n## Examples\n\n### Config\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...',\n\n    options: {\n        encrypt: true // Use this if you're on Windows Azure\n    }\n}\n```\n\n\n### Async/Await\n\n```javascript\nconst sql = require('mssql')\n\n(async function () {\n    try {\n        let pool = await sql.connect(config)\n        let result1 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .query('select * from mytable where id = @input_parameter')\n            \n        console.dir(result1)\n    \n        // Stored procedure\n        \n        let result2 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .output('output_parameter', sql.VarChar(50))\n            .execute('procedure_name')\n        \n        console.dir(result2)\n    } catch (err) {\n        // ... error checks\n    }\n})()\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Promises\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(pool => {\n    // Query\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .query('select * from mytable where id = @input_parameter')\n}).then(result => {\n    console.dir(result)\n    \n    // Stored procedure\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nNative Promise is used by default. You can easily change this with `sql.Promise = require('myownpromisepackage')`.\n\n### ES6 Tagged template literals\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(() => {\n    return sql.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n### Callbacks\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    // Query\n\n    new sql.Request().query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n    // Stored Procedure\n\n    new sql.Request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Streaming\n\nIf you plan to work with large amount of rows, you should always use streaming. Once you enable this, you must listen for events to receive data.\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    const request = new sql.Request()\n    request.stream = true // You can set streaming differently for each request\n    request.query('select * from verylargetable') // or request.execute(procedure)\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nWhen streaming large sets of data you want to back-off or chunk the amount of data you're processing\n to prevent memory exhaustion issues; you can use the `Request.pause()` function to do this. Here is\n an example of managing rows in batches of 15:\n\n```javascript\nlet rowsToProcess = [];\nrequest.on('row', row => {\n  if (rowsToProcess.length < 15) {\n    rowsToProcess.push(row);\n  } else {\n    request.pause();\n    processRows();\n  }\n});\nrequest.on('done', () => {\n    processRows();\n});\n\nfunction processRows() {\n  // process rows\n  rowsToProcess = [];\n  request.resume();\n}\n```\n\n## Connection Pools\n\nUsing a single connection pool for your application/service is recommended.\nInstantiating a pool with a callback, or immediately calling `.connect`, is asynchronous to ensure a connection can be\nestablished before returning. From that point, you're able to acquire connections as normal:  \n\n```javascript\nconst sql = require('mssql')\n\n// async/await style:\nconst pool1 = new sql.ConnectionPool(config).connect();\n\npool1.on('error', err => {\n    // ... error handler\n})\n\nasync function messageHandler() {\n    await pool1; // ensures that the pool has been created\n    try {\n    \tconst request = pool1.request(); // or: new sql.Request(pool1)\n    \tconst result = request.query('select 1 as number')\n    \tconsole.dir(result)\n    \treturn result;\n\t} catch (err) {\n        console.error('SQL error', err);\n\t}\n}\n\n// promise style:\nconst pool2 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n});\n\npool2.on('error', err => {\n    // ... error handler\n})\n\nfunction runStoredProcedure() {\n    return pool2.then((pool) => {\n\t\tpool.request() // or: new sql.Request(pool2)\n\t\t.input('input_parameter', sql.Int, 10)\n\t\t.output('output_parameter', sql.VarChar(50))\n\t\t.execute('procedure_name', (err, result) => {\n\t\t\t// ... error checks\n\t\t\tconsole.dir(result)\n\t\t})\n    });\n}\n```\n\nAwaiting or `.then`ing the pool creation is a safe way to ensure that the pool is always ready, without knowing where it\nis needed first. In practice, once the pool is created then there will be no delay for the next operation.\n\n**ES6 Tagged template literals**\n\n```javascript\nnew sql.ConnectionPool(config).connect().then(pool => {\n    return pool.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n## Configuration\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n### General (same for all drivers)\n\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **domain** - Once you set domain, driver will connect to SQL Server using domain login.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **connectionTimeout** - Connection timeout in ms (default: `15000`).\n- **requestTimeout** - Request timeout in ms (default: `15000`). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second. When passed via connection string, the key must be `request timeout`\n- **stream** - Stream recordsets/rows instead of returning them all at once as an argument of callback (default: `false`). You can also enable streaming for each request independently (`request.stream = true`). Always set to `true` if you plan to work with large amount of rows.\n- **parseJSON** - Parse JSON recordsets to JS objects (default: `false`). For more information please see section [JSON support](#json-support).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimum of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\nComplete list of pool options can be found [here](https://github.com/coopernurse/node-pool).\n\n### Formats\n\nIn addition to configuration object there is an option to pass config as a connection string. Two formats of connection string are supported.\n\n##### Classic Connection String\n\n```\nServer=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true\nDriver=msnodesqlv8;Server=(local)\\INSTANCE;Database=database;UID=DOMAIN\\username;PWD=password;Encrypt=true\n```\n\n##### Connection String URI\n\n```\nmssql://username:password@localhost:1433/database?encrypt=true\nmssql://username:password@localhost/INSTANCE/database?encrypt=true&domain=DOMAIN&driver=msnodesqlv8\n```\n\n## Drivers\n\n### Tedious\n\nDefault driver, actively maintained and production ready. Platform independent, runs everywhere Node.js runs. Officially supported by Microsoft.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the configured tedious `Connection`. It can be used for attaching event handlers like in this example:\n```js\nrequire('mssql').connect(...config, beforeConnect: conn => {\n  conn.once('connect', err => { err ? console.error(err) : console.log('mssql connected')})\n  conn.once('end', err => { err ? console.error(err) : console.log('mssql disconnected')})\n}})\n```\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1434 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `false`).\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_1`, `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n- **options.appName** - Application name used for SQL server logging.\n- **options.abortTransactionOnError** - A boolean determining whether to rollback a transaction automatically if any error is encountered during the given transaction's execution. This sets the value for `XACT_ABORT` during the initial SQL phase of a connection.\n\nMore information about Tedious specific options: http://tediousjs.github.io/tedious/api-connection.html\n\n### Microsoft / Contributors Node V8 Driver for Node.js for SQL Server\n\n**Requires Node.js 0.12.x or newer. Windows only.** This driver is not part of the default package and must be installed separately by `npm install msnodesqlv8`. To use this driver, use this require syntax: `const sql = require('mssql/msnodesqlv8')`.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the connection configuration, that can be modified to pass extra parameters to the driver's `open()` method.\n- **connectionString** - Connection string (default: see below).\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not to use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n## Connections\n\nInternally, each `ConnectionPool` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool. Connection health check is built-in so once the dead connection is discovered, it is immediately replaced with a new one.\n\n**IMPORTANT**: Always attach an `error` listener to created connection. Whenever something goes wrong with the connection it will emit an error and if there is no listener it will crash your application with an uncaught error.\n\n```javascript\nconst pool = new sql.ConnectionPool({ /* config */ })\n```\n\n### Events\n\n- **error(err)** - Dispatched on connection error.\n\n---------------------------------------\n\n### connect ([callback])\n\nCreate a new connection pool. The initial probe connection is created to find out whether the configuration is valid.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after initial probe connection has established, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst pool = new sql.ConnectionPool({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n})\n\npool.connect(err => {\n    // ...\n})\n```\n\n__Errors__\n- ELOGIN (`ConnectionError`) - Login failed.\n- ETIMEOUT (`ConnectionError`) - Connection timeout.\n- EALREADYCONNECTED (`ConnectionError`) - Database is already connected!\n- EALREADYCONNECTING (`ConnectionError`) - Already connecting to database!\n- EINSTLOOKUP (`ConnectionError`) - Instance lookup failed.\n- ESOCKET (`ConnectionError`) - Socket error.\n\n---------------------------------------\n\n### close()\n\nClose all active connections in the pool.\n\n__Example__\n\n```javascript\npool.close()\n```\n\n## Request\n\n```javascript\nconst request = new sql.Request(/* [pool or transaction] */)\n```\n\nIf you omit pool/transaction argument, global pool is used instead.\n\n### Events\n\n- **recordset(columns)** - Dispatched when metadata for new recordset are parsed.\n- **row(row)** - Dispatched when new row is parsed.\n- **done(returnValue)** - Dispatched when request is complete.\n- **error(err)** - Dispatched on error.\n- **info(message)** - Dispatched on informational message.\n\n---------------------------------------\n\n### execute (procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.input('input_parameter', sql.Int, value)\nrequest.output('output_parameter', sql.Int)\nrequest.execute('procedure_name', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordsets.length) // count of recordsets returned by the procedure\n    console.log(result.recordsets[0].length) // count of rows contained in first recordset\n    console.log(result.recordset) // first recordset from result.recordsets\n    console.log(result.returnValue) // procedure return value\n    console.log(result.output) // key/value collection of output values\n    console.log(result.rowsAffected) // array of numbers, each number represents the number of rows affected by executed statemens\n\n    // ...\n})\n```\n\n__Errors__\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### input (name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automatically decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value)\nrequest.input('input_parameter', sql.Int, value)\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define your own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text)\n```\n\nYou can also overwrite the default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt)\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int)\nrequest.output('output_parameter', sql.VarChar(50), 'abc')\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### pipe (stream)\n\nSets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n\n__Arguments__\n\n- **stream** - Writable stream in object mode.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.pipe(stream)\nrequest.query('select * from mytable')\nstream.on('error', err => {\n    // ...\n})\nstream.on('finish', () => {\n    // ...\n})\n```\n\n---------------------------------------\n\n### query (command, [callback])\n\nExecute the SQL command. To execute commands like `create procedure` or if you plan to work with local temporary tables, use [batch](#batch-batch-callback) instead.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n\n    // ...\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number; select 2 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n    console.log(result.recordsets[0][0].number) // return 1\n    console.log(result.recordsets[1][0].number) // return 2\n})\n```\n\n**NOTE**: To get number of rows affected by the statement(s), see section [Affected Rows](#affected-rows).\n\n---------------------------------------\n\n### batch (batch, [callback])\n\nExecute the SQL command. Unlike [query](#query-command-callback), it doesn't use `sp_executesql`, so is not likely that SQL Server will reuse the execution plan it generates for the SQL. Use this only in special cases, for example when you need to execute commands like `create procedure` which can't be executed with [query](#query-command-callback) or if you're executing statements longer than 4000 chars on SQL Server 2000. Also you should use this if you're plan to work with local temporary tables ([more information here](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)).\n\nNOTE: Table-Valued Parameter (TVP) is not supported in batch.\n\n__Arguments__\n\n- **batch** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.batch('create procedure #temporary as select * from table', (err, result) => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\nYou can enable multiple recordsets in queries with the `request.multiple = true` command.\n\n---------------------------------------\n\n### bulk (table, [options,] [callback])\n\nPerform a bulk insert.\n\n__Arguments__\n\n- **table** - `sql.Table` instance.\n- **options** - Options object to be passed through to driver (currently tedious only). Optional. If argument is a function it will be treated as the callback.\n- **callback(err, rowCount)** - A callback which is called after bulk insert has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst table = new sql.Table('table_name') // or temporary table, e.g. #temptable\ntable.create = true\ntable.columns.add('a', sql.Int, {nullable: true, primary: true})\ntable.columns.add('b', sql.VarChar(50), {nullable: false})\ntable.rows.add(777, 'test')\n\nconst request = new sql.Request()\nrequest.bulk(table, (err, result) => {\n    // ... error checks\n})\n```\n\n**IMPORTANT**: Always indicate whether the column is nullable or not!\n\n**TIP**: If you set `table.create` to `true`, module will check if the table exists before it start sending data. If it doesn't, it will automatically create it. You can specify primary key columns by setting `primary: true` to column's options. Primary key constraint on multiple columns is supported.\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n__Errors__\n- ENAME (`RequestError`) - Table name must be specified for bulk insert.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### cancel()\n\nCancel currently executing request. Return `true` if cancellation packet was send successfully.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', (err, result) => {\n    console.log(err instanceof sql.RequestError)  // true\n    console.log(err.message)                      // Cancelled.\n    console.log(err.code)                         // ECANCEL\n\n    // ...\n})\n\nrequest.cancel()\n```\n\n## Transaction\n\n**IMPORTANT:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is acquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\n```\n\nIf you omit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    const request = new sql.Request(transaction)\n    request.query('insert into mytable (mycolumn) values (12345)', (err, result) => {\n        // ... error checks\n\n        transaction.commit(err => {\n            // ... error checks\n\n            console.log(\"Transaction committed.\")\n        })\n    })\n})\n```\n\nTransaction can also be created by `const transaction = pool.transaction()`. Requests can also be created by `const request = transaction.request()`.\n\n__Aborted transactions__\n\nThis example shows how you should correctly handle transaction errors when `abortTransactionOnError` (`XACT_ABORT`) is enabled. Added in 2.0.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    let rolledBack = false\n\n    transaction.on('rollback', aborted => {\n        // emited with aborted === true\n\n        rolledBack = true\n    })\n\n    new sql.Request(transaction)\n    .query('insert into mytable (bitcolumn) values (2)', (err, result) => {\n        // insert should fail because of invalid value\n\n        if (err) {\n            if (!rolledBack) {\n                transaction.rollback(err => {\n                    // ... error checks\n                })\n            }\n        } else {\n            transaction.commit(err => {\n                // ... error checks\n            })\n        }\n    })\n})\n```\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback(aborted)** - Dispatched on successful rollback with an argument determining if the transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### begin ([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYBEGUN (`TransactionError`) - Transaction has already begun.\n\n---------------------------------------\n\n### commit ([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has committed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.commit(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't commit transaction. There is a request in progress.\n\n---------------------------------------\n\n### rollback ([callback])\n\nRollback a transaction. If the queue isn't empty, all queued requests will be Cancelled and the transaction will be marked as aborted.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.rollback(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't rollback transaction. There is a request in progress.\n\n## Prepared Statement\n\n**IMPORTANT:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is acquired from the connection pool and all subsequent executions are executed exclusively on this connection. After you call `unprepare`, the connection is then released back to the connection pool.\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\n```\n\nIf you omit the connection argument, the global connection is used instead.\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        ps.unprepare(err => {\n            // ... error checks\n\n        })\n    })\n})\n```\n\n**IMPORTANT**: Remember that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement!\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n### input (name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int)\nps.input('input_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int)\nps.output('output_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### prepare (statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.prepare('select @param as value', err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYPREPARED (`PreparedStatementError`) - Statement is already prepared.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n\n---------------------------------------\n\n### execute (values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        console.log(result.recordset[0].value) // return 12345\n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\nYou can also stream executed request.\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.stream = true\n    const request = ps.execute({param: 12345})\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n        \n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\n**TIP**: To learn more about how number of affected rows works, see section [Affected Rows](#affected-rows).\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n\n---------------------------------------\n\n### unprepare ([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.unprepare(err => {\n        // ... error checks\n\n    })\n})\n```\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n\n## CLI\n\nBefore you can start using CLI, you must install `mssql` globally with `npm install mssql -g`. Once you do that you will be able to execute `mssql` command.\n\n__Setup__\n\nCreate a `.mssql.json` configuration file (anywhere). Structure of the file is the same as the standard configuration object.\n\n```json\n{\n    \"user\": \"...\",\n    \"password\": \"...\",\n    \"server\": \"localhost\",\n    \"database\": \"...\"\n}\n```\n\n__Example__\n\n```shell\necho \"select * from mytable\" | mssql /path/to/config\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}]]\n```\n\nYou can also query for multiple recordsets.\n\n```shell\necho \"select * from mytable; select * from myothertable\" | mssql\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}],[{\"id\":15,\"name\":\"Product name\"}]]\n```\n\nIf you omit config path argument, mssql will try to load it from current working directory.\n\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n\n{ srid: 0,\n  version: 1,\n  points:\n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nconst tvp = new sql.Table() // You can optionally specify table type name in the first argument.\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50))\ntvp.columns.add('b', sql.Int)\n\n// Add rows\ntvp.rows.add('hello tvp', 777) // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('tvp', tvp)\nrequest.execute('MyCustomStoredProcedure', (err, result) => {\n    // ... error checks\n\n    console.dir(result.recordsets[0][0]) // {a: 'hello tvp', b: 777}\n})\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n## Affected Rows\n\nIf you're performing `INSERT`, `UPDATE` or `DELETE` in a query, you can read number of affected rows. The `rowsAffected` variable is an array of numbers. Each number represents number of affected rows by a single statement.\n\n__Example using Promises__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100').then(result => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using callbacks__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100', (err, result) => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using streaming__\n\n```javascript\nconst request = new sql.Request()\nrequest.stream = true\nrequest.query('update myAwesomeTable set awesomness = 100')\nrequest.on('done', result => {\n    console.log(result.rowsAffected)\n})\n```\n\n## JSON support\n\nSQL Server 2016 introduced built-in JSON serialization. By default, JSON is returned as a plain text in a special column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B`.\n\nExample\n```sql\nSELECT\n    1 AS 'a.b.c',\n    2 AS 'a.b.d',\n    3 AS 'a.x',\n    4 AS 'a.y'\nFOR JSON PATH\n```\n\nResults in:\n```javascript\nrecordset = [ { 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B': '{\"a\":{\"b\":{\"c\":1,\"d\":2},\"x\":3,\"y\":4}}' } ]\n```\n\nYou can enable built-in JSON parser with `config.parseJSON = true`. Once you enable this, recordset will contain rows of parsed JS objects. Given the same example, result will look like this:\n```javascript\nrecordset = [ { a: { b: { c: 1, d: 2 }, x: 3, y: 4 } } ]\n```\n\n**IMPORTANT**: In order for this to work, there must be exactly one column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B` in the recordset.\n\nMore information about JSON support can be found in [official documentation](https://msdn.microsoft.com/en-us/library/dn921882.aspx).\n\n## Errors\n\nThere are 4 types of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, committing and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and its original stack may be cropped. You can always access original error with `err.originalError`.\n\nSQL Server may generate more than one error for one request so you can access preceding errors with `err.precedingErrors`.\n\n### Error Codes\n\nEach known error has `name`, `code` and `message` properties.\n\nName | Code | Message\n:--- | :--- | :---\n`ConnectionError` | ELOGIN | Login failed.\n`ConnectionError` | ETIMEOUT | Connection timeout.\n`ConnectionError` | EDRIVER | Unknown driver.\n`ConnectionError` | EALREADYCONNECTED | Database is already connected!\n`ConnectionError` | EALREADYCONNECTING | Already connecting to database!\n`ConnectionError` | ENOTOPEN | Connection not yet open.\n`ConnectionError` | EINSTLOOKUP | Instance lookup failed.\n`ConnectionError` | ESOCKET | Socket error.\n`ConnectionError` | ECONNCLOSED | Connection is closed.\n`TransactionError` | ENOTBEGUN | Transaction has not begun.\n`TransactionError` | EALREADYBEGUN | Transaction has already begun.\n`TransactionError` | EREQINPROG | Can't commit/rollback transaction. There is a request in progress.\n`TransactionError` | EABORT | Transaction has been aborted.\n`RequestError` | EREQUEST | Message from SQL Server. Error object contains additional details.\n`RequestError` | ECANCEL | Cancelled.\n`RequestError` | ETIMEOUT | Request timeout.\n`RequestError` | EARGS | Invalid number of arguments.\n`RequestError` | EINJECT | SQL injection warning.\n`RequestError` | ENOCONN | No connection is specified for that request.\n`PreparedStatementError` | EARGS | Invalid number of arguments.\n`PreparedStatementError` | EINJECT | SQL injection warning.\n`PreparedStatementError` | EALREADYPREPARED | Statement is already prepared.\n`PreparedStatementError` | ENOTPREPARED | Statement is not prepared.\n\n### Detailed SQL Errors\n\nSQL errors (`RequestError` with `err.code` equal to `EREQUEST`) contains additional details.\n\n- **err.number** - The error number.\n- **err.state** - The error state, used as a modifier to the number.\n- **err.class** - The class (severity) of the error. A class of less than 10 indicates an informational message. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **err.lineNumber** - The line number in the SQL batch or stored procedure that caused the error. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **err.serverName** - The server name.\n- **err.procName** - The stored procedure name.\n\n## Informational messages\n\nTo receive informational messages generated by `PRINT` or `RAISERROR` commands use:\n\n```javascript\nconst request = new sql.Request()\nrequest.on('info', info => {\n    console.dir(info)\n})\nrequest.query('print \\'Hello world.\\';', (err, result) => {\n    // ...\n})\n```\n\nStructure of informational message:\n\n- **info.message** - Message.\n- **info.number** - The message number.\n- **info.state** - The message state, used as a modifier to the number.\n- **info.class** - The class (severity) of the message. Equal or lower than 10. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **info.lineNumber** - The line number in the SQL batch or stored procedure that generated the message. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **info.serverName** - The server name.\n- **info.procName** - The stored procedure name.\n\n## Metadata\n\nRecordset metadata are accessible through the `recordset.columns` property.\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select convert(decimal(18, 4), 1) as first, \\'asdf\\' as second', (err, result) => {\n    console.dir(result.recordset.columns)\n\n    console.log(result.recordset.columns.first.type === sql.Decimal) // true\n    console.log(result.recordset.columns.second.type === sql.VarChar) // true\n})\n```\n\nColumns structure for example above:\n\n```javascript\n{\n    first: {\n        index: 0,\n        name: 'first',\n        length: 17,\n        type: [sql.Decimal],\n        scale: 4,\n        precision: 18,\n        nullable: true,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    },\n    second: {\n        index: 1,\n        name: 'second',\n        length: 4,\n        type: [sql.VarChar],\n        nullable: false,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    }\n}\n```\n\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\")               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\")           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\")      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar)                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\")              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33)              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33)          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33)       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date())        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date())     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Variant\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length. Types `sql.XML` and `sql.Variant` are not supported as input parameters.\n\n## SQL injection\n\nThis module has built-in SQL injection protection. Always use parameters or tagged template literals to pass sanitized values to your queries.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('myval', sql.VarChar, '-- commented')\nrequest.query('select @myval as myval', (err, result) => {\n    console.dir(result)\n})\n```\n\n## Known issues\n\n### Tedious\n\n- If you're facing problems with connecting SQL Server 2000, try setting the default TDS version to 7.1 with `config.options.tdsVersion = '7_1'` ([issue](https://github.com/tediousjs/node-mssql/issues/36))\n- If you're executing a statement longer than 4000 chars on SQL Server 2000, always use [batch](#batch-batch-callback) instead of [query](#query-command-callback) ([issue](https://github.com/tediousjs/node-mssql/issues/68))\n\n### msnodesqlv8\n\n- msnodesqlv8 has problem with errors during transactions - [reported](https://github.com/tediousjs/node-mssql/issues/77).\n- msnodesqlv8 doesn't support [detailed SQL errors](#detailed-sql-errors).\n\n## 3.x to 4.x changes\n\n- Library & tests are rewritten to ES6.\n- `Connection` was renamed to `ConnectionPool`.\n- Drivers are no longer loaded dynamically so the library is now compatible with Webpack. To use `msnodesqlv8` driver, use `const sql = require('mssql/msnodesqlv8')` syntax.\n- Every callback/resolve now returns `result` object only. This object contains `recordsets` (array of recordsets), `recordset` (first recordset from array of recordsets), `rowsAffected` (array of numbers representig number of affected rows by each insert/update/delete statement) and `output` (key/value collection of output parameters' values).\n- Affected rows are now returned as an array. A separate number for each SQL statement.\n- Directive `multiple: true` was removed.\n- `Transaction` and `PreparedStatement` internal queues was removed.\n- ConnectionPool no longer emits `connect` and `close` events.\n- Removed verbose and debug mode.\n- Removed support for `tds` and `msnodesql` drivers.\n- Removed support for Node versions lower than 4.\n\n[npm-image]: https://img.shields.io/npm/v/mssql.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/mssql\n[downloads-image]: https://img.shields.io/npm/dm/mssql.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/mssql\n[david-image]: https://img.shields.io/david/tediousjs/node-mssql.svg?style=flat-square\n[david-url]: https://david-dm.org/tediousjs/node-mssql\n[travis-image]: https://img.shields.io/travis/tediousjs/node-mssql/master.svg?style=flat-square&label=unit\n[travis-url]: https://travis-ci.org/tediousjs/node-mssql\n[appveyor-image]: https://img.shields.io/appveyor/ci/patriksimek/node-mssql-o4dhf/master.svg?style=flat-square&label=integration\n[appveyor-url]: https://ci.appveyor.com/project/patriksimek/node-mssql-o4dhf\n\n[tedious-url]: https://www.npmjs.com/package/tedious\n[msnodesqlv8-url]: https://www.npmjs.com/package/msnodesqlv8\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@5.0.0-alhpa.4","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-61inx1mbiF+/OdCalm19ahwClanSJ1dO0wgGFsXbh1c695fAdy0Xa/b+UYT4FwTnPFaj0daKXg9pByCVb5X10g==","shasum":"2dfef1a2ddbe7a7b2fc0e7bba51258ae93b3bd7d","tarball":"https://registry.npmjs.org/mssql/-/mssql-5.0.0-alhpa.4.tgz","fileCount":19,"unpackedSize":198304,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcQE/wCRA9TVsSAnZWagAAbdAQAJ+7VjIAmHK2X7B0smi9\n4F7lLZi1G1UEY2xHya4YjBch8oj3xATqUoATDbID2pyDUZdGoR0DdJwTtDAa\nBcddDY5DzBRl0mk/RO97lqxPBBRwD8Fbm7wKs12HoLBihqvKoP8GlWdF1T6x\nW4mvlBDdQRBUHjy0mzJq7cDaBEpG2tUsKq4utdpsBsQcEIg5nJZB+RX5h8jj\n6pfbLIrhqZqanUEnftB4589EnaX1zHFcarSVtv70EC/gA/uqPNdnd/x0jQuP\n01KmRIeeJpyro0FDupelIg8uav7aLG7w/bleAKvE5NktowmZn2TF11oFnv9a\nJ6jgahrIN/mwWrhk/xvIcSdaBa/JJuIMc+tovpYn/tocHQDEu2NHQ2nsgU4I\nNTyJPo/2R0F3K41wdztu6z33VpFDgCAbHyriWuNGTDAnPAgY0AiFRHxmuDLT\nAAa5D/elztskvlUQ0YncyEISSXi9BoH7FkOKbAf7XjbTMOkJgtlpAYoj3usq\nQN3T2l79AlWT12ByGbno8rrfFpnr9m1S9K+0FEuv8JOSCkXo0cdfPMTuTTJI\nc5m0fxC4llzo2zlHZoX1caSd3R7kLuNNQgEBeU7utHMfa/ge9MtXuUv1E43P\nnaCxZ6yifnxFunvzRFNh8SJ+3qkJaSNx60ExXuk9SjBXlBTk2tRQiObko+xf\nrE87\r\n=IXpU\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_5.0.0-alhpa.4_1547718639366_0.07488734907178007"},"_hasShrinkwrap":false},"5.0.0-alpha.5":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"5.0.0-alpha.5","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.4.2","tedious":"^4.1.1"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"7290671db08d4f9a66cd7444258bf6c6b8d1397e","readme":"# node-mssql\n\nMicrosoft SQL Server client for Node.js\n\n[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Travis CI][travis-image]][travis-url] [![Appveyor CI][appveyor-image]][appveyor-url] [![Join the chat at https://gitter.im/patriksimek/node-mssql](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/patriksimek/node-mssql?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSupported TDS drivers:\n- [Tedious][tedious-url] (pure JavaScript - Windows/macOS/Linux, default)\n- [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server][msnodesqlv8-url] (native - Windows only)\n\n## Installation\n\n    npm install mssql\n\n## Quick Example\n\n```javascript\nconst sql = require('mssql')\n\nasync () => {\n    try {\n        await sql.connect('mssql://username:password@localhost/database')\n        const result = await sql.query`select * from mytable where id = ${value}`\n        console.dir(result)\n    } catch (err) {\n        // ... error checks\n    }\n}\n```\n\nIf you're on Windows Azure, add `?encrypt=true` to your connection string. See [docs](#configuration) to learn more.\n\n## Documentation\n\n### Examples\n\n* [Async/Await](#asyncawait)\n* [Promises](#promises)\n* [ES6 Tagged template literals](#es6-tagged-template-literals)\n* [Callbacks](#callbacks)\n* [Streaming](#streaming)\n* [Connection Pools](#connection-pools)\n\n### Configuration\n\n* [General](#general-same-for-all-drivers)\n* [Formats](#formats)\n\n### Drivers\n\n* [Tedious](#tedious)\n* [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server](#microsoft--contributors-node-v8-driver-for-nodejs-for-sql-server)\n\n### Connections\n\n* [ConnectionPool](#connections-1)\n* [connect](#connect-callback)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute-procedure-callback)\n* [input](#input-name-type-value)\n* [output](#output-name-type-value)\n* [pipe](#pipe-stream)\n* [query](#query-command-callback)\n* [batch](#batch-batch-callback)\n* [bulk](#bulk-table-callback)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin-isolationlevel-callback)\n* [commit](#commit-callback)\n* [rollback](#rollback-callback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#input-name-type)\n* [output](#output-name-type)\n* [prepare](#prepare-statement-callback)\n* [execute](#execute-values-callback)\n* [unprepare](#unprepare-callback)\n\n### Other\n\n* [CLI](#cli)\n* [Geography and Geometry](#geography-and-geometry)\n* [Table-Valued Parameter](#table-valued-parameter-tvp)\n* [Affected Rows](#affected-rows)\n* [JSON support](#json-support)\n* [Errors](#errors)\n* [Informational messages](#informational-messages)\n* [Metadata](#metadata)\n* [Data Types](#data-types)\n* [SQL injection](#sql-injection)\n* [Known Issues](#known-issues)\n* [Contributing](https://github.com/tediousjs/node-mssql/wiki/Contributing)\n* [3.x to 4.x changes](#3x-to-4x-changes)\n* [3.x Documentation](https://github.com/tediousjs/node-mssql/blob/1893969195045a250f0fdeeb2de7f30dcf6689ad/README.md)\n\n## Examples\n\n### Config\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...',\n\n    options: {\n        encrypt: true // Use this if you're on Windows Azure\n    }\n}\n```\n\n\n### Async/Await\n\n```javascript\nconst sql = require('mssql')\n\n(async function () {\n    try {\n        let pool = await sql.connect(config)\n        let result1 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .query('select * from mytable where id = @input_parameter')\n            \n        console.dir(result1)\n    \n        // Stored procedure\n        \n        let result2 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .output('output_parameter', sql.VarChar(50))\n            .execute('procedure_name')\n        \n        console.dir(result2)\n    } catch (err) {\n        // ... error checks\n    }\n})()\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Promises\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(pool => {\n    // Query\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .query('select * from mytable where id = @input_parameter')\n}).then(result => {\n    console.dir(result)\n    \n    // Stored procedure\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nNative Promise is used by default. You can easily change this with `sql.Promise = require('myownpromisepackage')`.\n\n### ES6 Tagged template literals\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(() => {\n    return sql.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n### Callbacks\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    // Query\n\n    new sql.Request().query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n    // Stored Procedure\n\n    new sql.Request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Streaming\n\nIf you plan to work with large amount of rows, you should always use streaming. Once you enable this, you must listen for events to receive data.\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    const request = new sql.Request()\n    request.stream = true // You can set streaming differently for each request\n    request.query('select * from verylargetable') // or request.execute(procedure)\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nWhen streaming large sets of data you want to back-off or chunk the amount of data you're processing\n to prevent memory exhaustion issues; you can use the `Request.pause()` function to do this. Here is\n an example of managing rows in batches of 15:\n\n```javascript\nlet rowsToProcess = [];\nrequest.on('row', row => {\n  rowsToProcess.push(row);\n  if (rowsToProcess.length >= 15) {\n    request.pause();\n    processRows();\n  }\n});\nrequest.on('done', () => {\n    processRows();\n});\n\nfunction processRows() {\n  // process rows\n  rowsToProcess = [];\n  request.resume();\n}\n```\n\n## Connection Pools\n\nUsing a single connection pool for your application/service is recommended.\nInstantiating a pool with a callback, or immediately calling `.connect`, is asynchronous to ensure a connection can be\nestablished before returning. From that point, you're able to acquire connections as normal:  \n\n```javascript\nconst sql = require('mssql')\n\n// async/await style:\nconst pool1 = new sql.ConnectionPool(config).connect();\n\npool1.on('error', err => {\n    // ... error handler\n})\n\nasync function messageHandler() {\n    await pool1; // ensures that the pool has been created\n    try {\n    \tconst request = pool1.request(); // or: new sql.Request(pool1)\n    \tconst result = request.query('select 1 as number')\n    \tconsole.dir(result)\n    \treturn result;\n\t} catch (err) {\n        console.error('SQL error', err);\n\t}\n}\n\n// promise style:\nconst pool2 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n});\n\npool2.on('error', err => {\n    // ... error handler\n})\n\nfunction runStoredProcedure() {\n    return pool2.then((pool) => {\n\t\tpool.request() // or: new sql.Request(pool2)\n\t\t.input('input_parameter', sql.Int, 10)\n\t\t.output('output_parameter', sql.VarChar(50))\n\t\t.execute('procedure_name', (err, result) => {\n\t\t\t// ... error checks\n\t\t\tconsole.dir(result)\n\t\t})\n    });\n}\n```\n\nAwaiting or `.then`ing the pool creation is a safe way to ensure that the pool is always ready, without knowing where it\nis needed first. In practice, once the pool is created then there will be no delay for the next operation.\n\n**ES6 Tagged template literals**\n\n```javascript\nnew sql.ConnectionPool(config).connect().then(pool => {\n    return pool.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n## Configuration\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n### General (same for all drivers)\n\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **domain** - Once you set domain, driver will connect to SQL Server using domain login.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **connectionTimeout** - Connection timeout in ms (default: `15000`).\n- **requestTimeout** - Request timeout in ms (default: `15000`). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second. When passed via connection string, the key must be `request timeout`\n- **stream** - Stream recordsets/rows instead of returning them all at once as an argument of callback (default: `false`). You can also enable streaming for each request independently (`request.stream = true`). Always set to `true` if you plan to work with large amount of rows.\n- **parseJSON** - Parse JSON recordsets to JS objects (default: `false`). For more information please see section [JSON support](#json-support).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimum of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\nComplete list of pool options can be found [here](https://github.com/coopernurse/node-pool).\n\n### Formats\n\nIn addition to configuration object there is an option to pass config as a connection string. Two formats of connection string are supported.\n\n##### Classic Connection String\n\n```\nServer=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true\nDriver=msnodesqlv8;Server=(local)\\INSTANCE;Database=database;UID=DOMAIN\\username;PWD=password;Encrypt=true\n```\n\n##### Connection String URI\n\n```\nmssql://username:password@localhost:1433/database?encrypt=true\nmssql://username:password@localhost/INSTANCE/database?encrypt=true&domain=DOMAIN&driver=msnodesqlv8\n```\n\n## Drivers\n\n### Tedious\n\nDefault driver, actively maintained and production ready. Platform independent, runs everywhere Node.js runs. Officially supported by Microsoft.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the configured tedious `Connection`. It can be used for attaching event handlers like in this example:\n```js\nrequire('mssql').connect(...config, beforeConnect: conn => {\n  conn.once('connect', err => { err ? console.error(err) : console.log('mssql connected')})\n  conn.once('end', err => { err ? console.error(err) : console.log('mssql disconnected')})\n}})\n```\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1434 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `false`).\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_1`, `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n- **options.appName** - Application name used for SQL server logging.\n- **options.abortTransactionOnError** - A boolean determining whether to rollback a transaction automatically if any error is encountered during the given transaction's execution. This sets the value for `XACT_ABORT` during the initial SQL phase of a connection.\n\nMore information about Tedious specific options: http://tediousjs.github.io/tedious/api-connection.html\n\n### Microsoft / Contributors Node V8 Driver for Node.js for SQL Server\n\n**Requires Node.js 0.12.x or newer. Windows only.** This driver is not part of the default package and must be installed separately by `npm install msnodesqlv8`. To use this driver, use this require syntax: `const sql = require('mssql/msnodesqlv8')`.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the connection configuration, that can be modified to pass extra parameters to the driver's `open()` method.\n- **connectionString** - Connection string (default: see below).\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not to use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n## Connections\n\nInternally, each `ConnectionPool` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool. Connection health check is built-in so once the dead connection is discovered, it is immediately replaced with a new one.\n\n**IMPORTANT**: Always attach an `error` listener to created connection. Whenever something goes wrong with the connection it will emit an error and if there is no listener it will crash your application with an uncaught error.\n\n```javascript\nconst pool = new sql.ConnectionPool({ /* config */ })\n```\n\n### Events\n\n- **error(err)** - Dispatched on connection error.\n\n---------------------------------------\n\n### connect ([callback])\n\nCreate a new connection pool. The initial probe connection is created to find out whether the configuration is valid.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after initial probe connection has established, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst pool = new sql.ConnectionPool({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n})\n\npool.connect(err => {\n    // ...\n})\n```\n\n__Errors__\n- ELOGIN (`ConnectionError`) - Login failed.\n- ETIMEOUT (`ConnectionError`) - Connection timeout.\n- EALREADYCONNECTED (`ConnectionError`) - Database is already connected!\n- EALREADYCONNECTING (`ConnectionError`) - Already connecting to database!\n- EINSTLOOKUP (`ConnectionError`) - Instance lookup failed.\n- ESOCKET (`ConnectionError`) - Socket error.\n\n---------------------------------------\n\n### close()\n\nClose all active connections in the pool.\n\n__Example__\n\n```javascript\npool.close()\n```\n\n## Request\n\n```javascript\nconst request = new sql.Request(/* [pool or transaction] */)\n```\n\nIf you omit pool/transaction argument, global pool is used instead.\n\n### Events\n\n- **recordset(columns)** - Dispatched when metadata for new recordset are parsed.\n- **row(row)** - Dispatched when new row is parsed.\n- **done(returnValue)** - Dispatched when request is complete.\n- **error(err)** - Dispatched on error.\n- **info(message)** - Dispatched on informational message.\n\n---------------------------------------\n\n### execute (procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.input('input_parameter', sql.Int, value)\nrequest.output('output_parameter', sql.Int)\nrequest.execute('procedure_name', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordsets.length) // count of recordsets returned by the procedure\n    console.log(result.recordsets[0].length) // count of rows contained in first recordset\n    console.log(result.recordset) // first recordset from result.recordsets\n    console.log(result.returnValue) // procedure return value\n    console.log(result.output) // key/value collection of output values\n    console.log(result.rowsAffected) // array of numbers, each number represents the number of rows affected by executed statemens\n\n    // ...\n})\n```\n\n__Errors__\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### input (name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automatically decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value)\nrequest.input('input_parameter', sql.Int, value)\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define your own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text)\n```\n\nYou can also overwrite the default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt)\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int)\nrequest.output('output_parameter', sql.VarChar(50), 'abc')\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### pipe (stream)\n\nSets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n\n__Arguments__\n\n- **stream** - Writable stream in object mode.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.pipe(stream)\nrequest.query('select * from mytable')\nstream.on('error', err => {\n    // ...\n})\nstream.on('finish', () => {\n    // ...\n})\n```\n\n---------------------------------------\n\n### query (command, [callback])\n\nExecute the SQL command. To execute commands like `create procedure` or if you plan to work with local temporary tables, use [batch](#batch-batch-callback) instead.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n\n    // ...\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number; select 2 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n    console.log(result.recordsets[0][0].number) // return 1\n    console.log(result.recordsets[1][0].number) // return 2\n})\n```\n\n**NOTE**: To get number of rows affected by the statement(s), see section [Affected Rows](#affected-rows).\n\n---------------------------------------\n\n### batch (batch, [callback])\n\nExecute the SQL command. Unlike [query](#query-command-callback), it doesn't use `sp_executesql`, so is not likely that SQL Server will reuse the execution plan it generates for the SQL. Use this only in special cases, for example when you need to execute commands like `create procedure` which can't be executed with [query](#query-command-callback) or if you're executing statements longer than 4000 chars on SQL Server 2000. Also you should use this if you're plan to work with local temporary tables ([more information here](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)).\n\nNOTE: Table-Valued Parameter (TVP) is not supported in batch.\n\n__Arguments__\n\n- **batch** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.batch('create procedure #temporary as select * from table', (err, result) => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\nYou can enable multiple recordsets in queries with the `request.multiple = true` command.\n\n---------------------------------------\n\n### bulk (table, [options,] [callback])\n\nPerform a bulk insert.\n\n__Arguments__\n\n- **table** - `sql.Table` instance.\n- **options** - Options object to be passed through to driver (currently tedious only). Optional. If argument is a function it will be treated as the callback.\n- **callback(err, rowCount)** - A callback which is called after bulk insert has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst table = new sql.Table('table_name') // or temporary table, e.g. #temptable\ntable.create = true\ntable.columns.add('a', sql.Int, {nullable: true, primary: true})\ntable.columns.add('b', sql.VarChar(50), {nullable: false})\ntable.rows.add(777, 'test')\n\nconst request = new sql.Request()\nrequest.bulk(table, (err, result) => {\n    // ... error checks\n})\n```\n\n**IMPORTANT**: Always indicate whether the column is nullable or not!\n\n**TIP**: If you set `table.create` to `true`, module will check if the table exists before it start sending data. If it doesn't, it will automatically create it. You can specify primary key columns by setting `primary: true` to column's options. Primary key constraint on multiple columns is supported.\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n__Errors__\n- ENAME (`RequestError`) - Table name must be specified for bulk insert.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### cancel()\n\nCancel currently executing request. Return `true` if cancellation packet was send successfully.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', (err, result) => {\n    console.log(err instanceof sql.RequestError)  // true\n    console.log(err.message)                      // Cancelled.\n    console.log(err.code)                         // ECANCEL\n\n    // ...\n})\n\nrequest.cancel()\n```\n\n## Transaction\n\n**IMPORTANT:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is acquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\n```\n\nIf you omit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    const request = new sql.Request(transaction)\n    request.query('insert into mytable (mycolumn) values (12345)', (err, result) => {\n        // ... error checks\n\n        transaction.commit(err => {\n            // ... error checks\n\n            console.log(\"Transaction committed.\")\n        })\n    })\n})\n```\n\nTransaction can also be created by `const transaction = pool.transaction()`. Requests can also be created by `const request = transaction.request()`.\n\n__Aborted transactions__\n\nThis example shows how you should correctly handle transaction errors when `abortTransactionOnError` (`XACT_ABORT`) is enabled. Added in 2.0.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    let rolledBack = false\n\n    transaction.on('rollback', aborted => {\n        // emited with aborted === true\n\n        rolledBack = true\n    })\n\n    new sql.Request(transaction)\n    .query('insert into mytable (bitcolumn) values (2)', (err, result) => {\n        // insert should fail because of invalid value\n\n        if (err) {\n            if (!rolledBack) {\n                transaction.rollback(err => {\n                    // ... error checks\n                })\n            }\n        } else {\n            transaction.commit(err => {\n                // ... error checks\n            })\n        }\n    })\n})\n```\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback(aborted)** - Dispatched on successful rollback with an argument determining if the transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### begin ([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYBEGUN (`TransactionError`) - Transaction has already begun.\n\n---------------------------------------\n\n### commit ([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has committed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.commit(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't commit transaction. There is a request in progress.\n\n---------------------------------------\n\n### rollback ([callback])\n\nRollback a transaction. If the queue isn't empty, all queued requests will be Cancelled and the transaction will be marked as aborted.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.rollback(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't rollback transaction. There is a request in progress.\n\n## Prepared Statement\n\n**IMPORTANT:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is acquired from the connection pool and all subsequent executions are executed exclusively on this connection. After you call `unprepare`, the connection is then released back to the connection pool.\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\n```\n\nIf you omit the connection argument, the global connection is used instead.\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        // release the connection after queries are executed\n        ps.unprepare(err => {\n            // ... error checks\n\n        })\n    })\n})\n```\n\n**IMPORTANT**: Remember that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement when you've finished your queries!\n\nYou can execute multiple queries against the same prepared statement but you *must* unprepare the statement when you have finished using it otherwise you will cause the connection pool to run out of available connections.\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n### input (name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int)\nps.input('input_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int)\nps.output('output_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### prepare (statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.prepare('select @param as value', err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYPREPARED (`PreparedStatementError`) - Statement is already prepared.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n\n---------------------------------------\n\n### execute (values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        console.log(result.recordset[0].value) // return 12345\n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\nYou can also stream executed request.\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.stream = true\n    const request = ps.execute({param: 12345})\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n        \n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\n**TIP**: To learn more about how number of affected rows works, see section [Affected Rows](#affected-rows).\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n\n---------------------------------------\n\n### unprepare ([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.unprepare(err => {\n        // ... error checks\n\n    })\n})\n```\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n\n## CLI\n\nBefore you can start using CLI, you must install `mssql` globally with `npm install mssql -g`. Once you do that you will be able to execute `mssql` command.\n\n__Setup__\n\nCreate a `.mssql.json` configuration file (anywhere). Structure of the file is the same as the standard configuration object.\n\n```json\n{\n    \"user\": \"...\",\n    \"password\": \"...\",\n    \"server\": \"localhost\",\n    \"database\": \"...\"\n}\n```\n\n__Example__\n\n```shell\necho \"select * from mytable\" | mssql /path/to/config\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}]]\n```\n\nYou can also query for multiple recordsets.\n\n```shell\necho \"select * from mytable; select * from myothertable\" | mssql\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}],[{\"id\":15,\"name\":\"Product name\"}]]\n```\n\nIf you omit config path argument, mssql will try to load it from current working directory.\n\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n\n{ srid: 0,\n  version: 1,\n  points:\n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nconst tvp = new sql.Table() // You can optionally specify table type name in the first argument.\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50))\ntvp.columns.add('b', sql.Int)\n\n// Add rows\ntvp.rows.add('hello tvp', 777) // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('tvp', tvp)\nrequest.execute('MyCustomStoredProcedure', (err, result) => {\n    // ... error checks\n\n    console.dir(result.recordsets[0][0]) // {a: 'hello tvp', b: 777}\n})\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n## Affected Rows\n\nIf you're performing `INSERT`, `UPDATE` or `DELETE` in a query, you can read number of affected rows. The `rowsAffected` variable is an array of numbers. Each number represents number of affected rows by a single statement.\n\n__Example using Promises__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100').then(result => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using callbacks__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100', (err, result) => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using streaming__\n\n```javascript\nconst request = new sql.Request()\nrequest.stream = true\nrequest.query('update myAwesomeTable set awesomness = 100')\nrequest.on('done', result => {\n    console.log(result.rowsAffected)\n})\n```\n\n## JSON support\n\nSQL Server 2016 introduced built-in JSON serialization. By default, JSON is returned as a plain text in a special column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B`.\n\nExample\n```sql\nSELECT\n    1 AS 'a.b.c',\n    2 AS 'a.b.d',\n    3 AS 'a.x',\n    4 AS 'a.y'\nFOR JSON PATH\n```\n\nResults in:\n```javascript\nrecordset = [ { 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B': '{\"a\":{\"b\":{\"c\":1,\"d\":2},\"x\":3,\"y\":4}}' } ]\n```\n\nYou can enable built-in JSON parser with `config.parseJSON = true`. Once you enable this, recordset will contain rows of parsed JS objects. Given the same example, result will look like this:\n```javascript\nrecordset = [ { a: { b: { c: 1, d: 2 }, x: 3, y: 4 } } ]\n```\n\n**IMPORTANT**: In order for this to work, there must be exactly one column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B` in the recordset.\n\nMore information about JSON support can be found in [official documentation](https://msdn.microsoft.com/en-us/library/dn921882.aspx).\n\n## Errors\n\nThere are 4 types of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, committing and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and its original stack may be cropped. You can always access original error with `err.originalError`.\n\nSQL Server may generate more than one error for one request so you can access preceding errors with `err.precedingErrors`.\n\n### Error Codes\n\nEach known error has `name`, `code` and `message` properties.\n\nName | Code | Message\n:--- | :--- | :---\n`ConnectionError` | ELOGIN | Login failed.\n`ConnectionError` | ETIMEOUT | Connection timeout.\n`ConnectionError` | EDRIVER | Unknown driver.\n`ConnectionError` | EALREADYCONNECTED | Database is already connected!\n`ConnectionError` | EALREADYCONNECTING | Already connecting to database!\n`ConnectionError` | ENOTOPEN | Connection not yet open.\n`ConnectionError` | EINSTLOOKUP | Instance lookup failed.\n`ConnectionError` | ESOCKET | Socket error.\n`ConnectionError` | ECONNCLOSED | Connection is closed.\n`TransactionError` | ENOTBEGUN | Transaction has not begun.\n`TransactionError` | EALREADYBEGUN | Transaction has already begun.\n`TransactionError` | EREQINPROG | Can't commit/rollback transaction. There is a request in progress.\n`TransactionError` | EABORT | Transaction has been aborted.\n`RequestError` | EREQUEST | Message from SQL Server. Error object contains additional details.\n`RequestError` | ECANCEL | Cancelled.\n`RequestError` | ETIMEOUT | Request timeout.\n`RequestError` | EARGS | Invalid number of arguments.\n`RequestError` | EINJECT | SQL injection warning.\n`RequestError` | ENOCONN | No connection is specified for that request.\n`PreparedStatementError` | EARGS | Invalid number of arguments.\n`PreparedStatementError` | EINJECT | SQL injection warning.\n`PreparedStatementError` | EALREADYPREPARED | Statement is already prepared.\n`PreparedStatementError` | ENOTPREPARED | Statement is not prepared.\n\n### Detailed SQL Errors\n\nSQL errors (`RequestError` with `err.code` equal to `EREQUEST`) contains additional details.\n\n- **err.number** - The error number.\n- **err.state** - The error state, used as a modifier to the number.\n- **err.class** - The class (severity) of the error. A class of less than 10 indicates an informational message. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **err.lineNumber** - The line number in the SQL batch or stored procedure that caused the error. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **err.serverName** - The server name.\n- **err.procName** - The stored procedure name.\n\n## Informational messages\n\nTo receive informational messages generated by `PRINT` or `RAISERROR` commands use:\n\n```javascript\nconst request = new sql.Request()\nrequest.on('info', info => {\n    console.dir(info)\n})\nrequest.query('print \\'Hello world.\\';', (err, result) => {\n    // ...\n})\n```\n\nStructure of informational message:\n\n- **info.message** - Message.\n- **info.number** - The message number.\n- **info.state** - The message state, used as a modifier to the number.\n- **info.class** - The class (severity) of the message. Equal or lower than 10. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **info.lineNumber** - The line number in the SQL batch or stored procedure that generated the message. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **info.serverName** - The server name.\n- **info.procName** - The stored procedure name.\n\n## Metadata\n\nRecordset metadata are accessible through the `recordset.columns` property.\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select convert(decimal(18, 4), 1) as first, \\'asdf\\' as second', (err, result) => {\n    console.dir(result.recordset.columns)\n\n    console.log(result.recordset.columns.first.type === sql.Decimal) // true\n    console.log(result.recordset.columns.second.type === sql.VarChar) // true\n})\n```\n\nColumns structure for example above:\n\n```javascript\n{\n    first: {\n        index: 0,\n        name: 'first',\n        length: 17,\n        type: [sql.Decimal],\n        scale: 4,\n        precision: 18,\n        nullable: true,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    },\n    second: {\n        index: 1,\n        name: 'second',\n        length: 4,\n        type: [sql.VarChar],\n        nullable: false,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    }\n}\n```\n\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\")               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\")           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\")      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar)                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\")              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33)              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33)          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33)       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date())        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date())     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Variant\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length. Types `sql.XML` and `sql.Variant` are not supported as input parameters.\n\n## SQL injection\n\nThis module has built-in SQL injection protection. Always use parameters or tagged template literals to pass sanitized values to your queries.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('myval', sql.VarChar, '-- commented')\nrequest.query('select @myval as myval', (err, result) => {\n    console.dir(result)\n})\n```\n\n## Known issues\n\n### Tedious\n\n- If you're facing problems with connecting SQL Server 2000, try setting the default TDS version to 7.1 with `config.options.tdsVersion = '7_1'` ([issue](https://github.com/tediousjs/node-mssql/issues/36))\n- If you're executing a statement longer than 4000 chars on SQL Server 2000, always use [batch](#batch-batch-callback) instead of [query](#query-command-callback) ([issue](https://github.com/tediousjs/node-mssql/issues/68))\n\n### msnodesqlv8\n\n- msnodesqlv8 has problem with errors during transactions - [reported](https://github.com/tediousjs/node-mssql/issues/77).\n- msnodesqlv8 doesn't support [detailed SQL errors](#detailed-sql-errors).\n\n## 3.x to 4.x changes\n\n- Library & tests are rewritten to ES6.\n- `Connection` was renamed to `ConnectionPool`.\n- Drivers are no longer loaded dynamically so the library is now compatible with Webpack. To use `msnodesqlv8` driver, use `const sql = require('mssql/msnodesqlv8')` syntax.\n- Every callback/resolve now returns `result` object only. This object contains `recordsets` (array of recordsets), `recordset` (first recordset from array of recordsets), `rowsAffected` (array of numbers representig number of affected rows by each insert/update/delete statement) and `output` (key/value collection of output parameters' values).\n- Affected rows are now returned as an array. A separate number for each SQL statement.\n- Directive `multiple: true` was removed.\n- `Transaction` and `PreparedStatement` internal queues was removed.\n- ConnectionPool no longer emits `connect` and `close` events.\n- Removed verbose and debug mode.\n- Removed support for `tds` and `msnodesql` drivers.\n- Removed support for Node versions lower than 4.\n\n[npm-image]: https://img.shields.io/npm/v/mssql.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/mssql\n[downloads-image]: https://img.shields.io/npm/dm/mssql.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/mssql\n[david-image]: https://img.shields.io/david/tediousjs/node-mssql.svg?style=flat-square\n[david-url]: https://david-dm.org/tediousjs/node-mssql\n[travis-image]: https://img.shields.io/travis/tediousjs/node-mssql/master.svg?style=flat-square&label=unit\n[travis-url]: https://travis-ci.org/tediousjs/node-mssql\n[appveyor-image]: https://img.shields.io/appveyor/ci/patriksimek/node-mssql-o4dhf/master.svg?style=flat-square&label=integration\n[appveyor-url]: https://ci.appveyor.com/project/patriksimek/node-mssql-o4dhf\n\n[tedious-url]: https://www.npmjs.com/package/tedious\n[msnodesqlv8-url]: https://www.npmjs.com/package/msnodesqlv8\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@5.0.0-alpha.5","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-c/3lI240nFoJq0b7H2oBpGHfgbX+rW6nzAbzJnhfngEU95AUopUQ23f06z8STFyuI4/W7og9qIlZCakuBY8E0g==","shasum":"60ad24b19894c887acd0ffc800ae096cb24c0b2f","tarball":"https://registry.npmjs.org/mssql/-/mssql-5.0.0-alpha.5.tgz","fileCount":19,"unpackedSize":198610,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcUCkjCRA9TVsSAnZWagAA60IP/1dkqM1AMSE5LZIHtPiU\nutEF2T61baLQbjFgd1a6HascUM3j25JlsSBq8HNZRwYo+QYnuNBdmmLDg86S\nVgAg1U+ccpjuYyNmGk3Bd0twYNXcOcfa9kB7Zrn73jj7bMFi3LCTODBenzw7\ntjlv3T8N4GIpjQKqhUDKjpeMVAUwcCxs0Nerj5KdTw+CQCoI+16AiurD0KJm\nyPq5UlWNnzTqR/ScFqPNzPefdwiYEMdtv1XKQm6Y8EGISrbV2jKoaFsGyboX\nNLPEyO4FNCuznlhJYVz0DQi5d2MURJVt9GRkueuswaIP/ON2TwDzx5jXJacF\nifLYgzjdDE9pyKmlhyDAk9cv7LJs+VmuuTNyj0AXwkCGBrAJqCJRW9b1uHR4\nu/TbU0mSEDKu092sMi+kVOcM2QRvnLloSBz2+DdgCOyHufGs2XnDsmBimm3W\ndQVX34rusEuHcXLf96ytlbYm51F82ozkeCkUfF5ejrr1XZZiRW4PttX0ZBTP\n+VXpxk5sY6OLTzcl6ArzB5hHOkMrDcwK2pLebd4Rkt+XS8elUFdzmnVQG4s7\nFxfmcVbEgdTzu/iTBGvnZ51LWWebl87fbcEDyIPk+cX51XxUe9vFYCZHcPvl\nb/1NIiqdX5P3Ndgn+qEOMyFNbu7alMP6/LmQskg2G2aWxmBDN+CEhLRtn2Oy\nbcNR\r\n=cXm8\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_5.0.0-alpha.5_1548757282809_0.7594222502559647"},"_hasShrinkwrap":false},"5.0.0-beta.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"5.0.0-beta.1","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.6.0","tedious":"^4.1.1"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"d952794ca69cd933746938289f4f11ba62e0f1d7","readme":"# node-mssql\n\nMicrosoft SQL Server client for Node.js\n\n[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Travis CI][travis-image]][travis-url] [![Appveyor CI][appveyor-image]][appveyor-url] [![Join the chat at https://gitter.im/patriksimek/node-mssql](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/patriksimek/node-mssql?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSupported TDS drivers:\n- [Tedious][tedious-url] (pure JavaScript - Windows/macOS/Linux, default)\n- [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server][msnodesqlv8-url] (native - Windows only)\n\n## Installation\n\n    npm install mssql\n\n## Quick Example\n\n```javascript\nconst sql = require('mssql')\n\nasync () => {\n    try {\n        await sql.connect('mssql://username:password@localhost/database')\n        const result = await sql.query`select * from mytable where id = ${value}`\n        console.dir(result)\n    } catch (err) {\n        // ... error checks\n    }\n}\n```\n\nIf you're on Windows Azure, add `?encrypt=true` to your connection string. See [docs](#configuration) to learn more.\n\n## Documentation\n\n### Examples\n\n* [Async/Await](#asyncawait)\n* [Promises](#promises)\n* [ES6 Tagged template literals](#es6-tagged-template-literals)\n* [Callbacks](#callbacks)\n* [Streaming](#streaming)\n* [Connection Pools](#connection-pools)\n\n### Configuration\n\n* [General](#general-same-for-all-drivers)\n* [Formats](#formats)\n\n### Drivers\n\n* [Tedious](#tedious)\n* [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server](#microsoft--contributors-node-v8-driver-for-nodejs-for-sql-server)\n\n### Connections\n\n* [ConnectionPool](#connections-1)\n* [connect](#connect-callback)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute-procedure-callback)\n* [input](#input-name-type-value)\n* [output](#output-name-type-value)\n* [pipe](#pipe-stream)\n* [query](#query-command-callback)\n* [batch](#batch-batch-callback)\n* [bulk](#bulk-table-callback)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin-isolationlevel-callback)\n* [commit](#commit-callback)\n* [rollback](#rollback-callback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#input-name-type)\n* [output](#output-name-type)\n* [prepare](#prepare-statement-callback)\n* [execute](#execute-values-callback)\n* [unprepare](#unprepare-callback)\n\n### Other\n\n* [CLI](#cli)\n* [Geography and Geometry](#geography-and-geometry)\n* [Table-Valued Parameter](#table-valued-parameter-tvp)\n* [Affected Rows](#affected-rows)\n* [JSON support](#json-support)\n* [Errors](#errors)\n* [Informational messages](#informational-messages)\n* [Metadata](#metadata)\n* [Data Types](#data-types)\n* [SQL injection](#sql-injection)\n* [Known Issues](#known-issues)\n* [Contributing](https://github.com/tediousjs/node-mssql/wiki/Contributing)\n* [3.x to 4.x changes](#3x-to-4x-changes)\n* [3.x Documentation](https://github.com/tediousjs/node-mssql/blob/1893969195045a250f0fdeeb2de7f30dcf6689ad/README.md)\n\n## Examples\n\n### Config\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...',\n\n    options: {\n        encrypt: true // Use this if you're on Windows Azure\n    }\n}\n```\n\n\n### Async/Await\n\n```javascript\nconst sql = require('mssql')\n\n(async function () {\n    try {\n        let pool = await sql.connect(config)\n        let result1 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .query('select * from mytable where id = @input_parameter')\n            \n        console.dir(result1)\n    \n        // Stored procedure\n        \n        let result2 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .output('output_parameter', sql.VarChar(50))\n            .execute('procedure_name')\n        \n        console.dir(result2)\n    } catch (err) {\n        // ... error checks\n    }\n})()\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Promises\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(pool => {\n    // Query\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .query('select * from mytable where id = @input_parameter')\n}).then(result => {\n    console.dir(result)\n    \n    // Stored procedure\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nNative Promise is used by default. You can easily change this with `sql.Promise = require('myownpromisepackage')`.\n\n### ES6 Tagged template literals\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(() => {\n    return sql.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n### Callbacks\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    // Query\n\n    new sql.Request().query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n    // Stored Procedure\n\n    new sql.Request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Streaming\n\nIf you plan to work with large amount of rows, you should always use streaming. Once you enable this, you must listen for events to receive data.\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    const request = new sql.Request()\n    request.stream = true // You can set streaming differently for each request\n    request.query('select * from verylargetable') // or request.execute(procedure)\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nWhen streaming large sets of data you want to back-off or chunk the amount of data you're processing\n to prevent memory exhaustion issues; you can use the `Request.pause()` function to do this. Here is\n an example of managing rows in batches of 15:\n\n```javascript\nlet rowsToProcess = [];\nrequest.on('row', row => {\n  rowsToProcess.push(row);\n  if (rowsToProcess.length >= 15) {\n    request.pause();\n    processRows();\n  }\n});\nrequest.on('done', () => {\n    processRows();\n});\n\nfunction processRows() {\n  // process rows\n  rowsToProcess = [];\n  request.resume();\n}\n```\n\n## Connection Pools\n\nUsing a single connection pool for your application/service is recommended.\nInstantiating a pool with a callback, or immediately calling `.connect`, is asynchronous to ensure a connection can be\nestablished before returning. From that point, you're able to acquire connections as normal:  \n\n```javascript\nconst sql = require('mssql')\n\n// async/await style:\nconst pool1 = new sql.ConnectionPool(config).connect();\n\npool1.on('error', err => {\n    // ... error handler\n})\n\nasync function messageHandler() {\n    await pool1; // ensures that the pool has been created\n    try {\n    \tconst request = pool1.request(); // or: new sql.Request(pool1)\n    \tconst result = request.query('select 1 as number')\n    \tconsole.dir(result)\n    \treturn result;\n\t} catch (err) {\n        console.error('SQL error', err);\n\t}\n}\n\n// promise style:\nconst pool2 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n});\n\npool2.on('error', err => {\n    // ... error handler\n})\n\nfunction runStoredProcedure() {\n    return pool2.then((pool) => {\n\t\tpool.request() // or: new sql.Request(pool2)\n\t\t.input('input_parameter', sql.Int, 10)\n\t\t.output('output_parameter', sql.VarChar(50))\n\t\t.execute('procedure_name', (err, result) => {\n\t\t\t// ... error checks\n\t\t\tconsole.dir(result)\n\t\t})\n    });\n}\n```\n\nAwaiting or `.then`ing the pool creation is a safe way to ensure that the pool is always ready, without knowing where it\nis needed first. In practice, once the pool is created then there will be no delay for the next operation.\n\n**ES6 Tagged template literals**\n\n```javascript\nnew sql.ConnectionPool(config).connect().then(pool => {\n    return pool.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n## Configuration\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n### General (same for all drivers)\n\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **domain** - Once you set domain, driver will connect to SQL Server using domain login.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **connectionTimeout** - Connection timeout in ms (default: `15000`).\n- **requestTimeout** - Request timeout in ms (default: `15000`). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second. When passed via connection string, the key must be `request timeout`\n- **stream** - Stream recordsets/rows instead of returning them all at once as an argument of callback (default: `false`). You can also enable streaming for each request independently (`request.stream = true`). Always set to `true` if you plan to work with large amount of rows.\n- **parseJSON** - Parse JSON recordsets to JS objects (default: `false`). For more information please see section [JSON support](#json-support).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimum of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\nComplete list of pool options can be found [here](https://github.com/coopernurse/node-pool).\n\n### Formats\n\nIn addition to configuration object there is an option to pass config as a connection string. Two formats of connection string are supported.\n\n##### Classic Connection String\n\n```\nServer=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true\nDriver=msnodesqlv8;Server=(local)\\INSTANCE;Database=database;UID=DOMAIN\\username;PWD=password;Encrypt=true\n```\n\n##### Connection String URI\n\n```\nmssql://username:password@localhost:1433/database?encrypt=true\nmssql://username:password@localhost/INSTANCE/database?encrypt=true&domain=DOMAIN&driver=msnodesqlv8\n```\n\n## Drivers\n\n### Tedious\n\nDefault driver, actively maintained and production ready. Platform independent, runs everywhere Node.js runs. Officially supported by Microsoft.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the configured tedious `Connection`. It can be used for attaching event handlers like in this example:\n```js\nrequire('mssql').connect(...config, beforeConnect: conn => {\n  conn.once('connect', err => { err ? console.error(err) : console.log('mssql connected')})\n  conn.once('end', err => { err ? console.error(err) : console.log('mssql disconnected')})\n}})\n```\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1434 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `false`).\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_1`, `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n- **options.appName** - Application name used for SQL server logging.\n- **options.abortTransactionOnError** - A boolean determining whether to rollback a transaction automatically if any error is encountered during the given transaction's execution. This sets the value for `XACT_ABORT` during the initial SQL phase of a connection.\n\nMore information about Tedious specific options: http://tediousjs.github.io/tedious/api-connection.html\n\n### Microsoft / Contributors Node V8 Driver for Node.js for SQL Server\n\n**Requires Node.js 0.12.x or newer. Windows only.** This driver is not part of the default package and must be installed separately by `npm install msnodesqlv8`. To use this driver, use this require syntax: `const sql = require('mssql/msnodesqlv8')`.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the connection configuration, that can be modified to pass extra parameters to the driver's `open()` method.\n- **connectionString** - Connection string (default: see below).\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not to use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n## Connections\n\nInternally, each `ConnectionPool` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool. Connection health check is built-in so once the dead connection is discovered, it is immediately replaced with a new one.\n\n**IMPORTANT**: Always attach an `error` listener to created connection. Whenever something goes wrong with the connection it will emit an error and if there is no listener it will crash your application with an uncaught error.\n\n```javascript\nconst pool = new sql.ConnectionPool({ /* config */ })\n```\n\n### Events\n\n- **error(err)** - Dispatched on connection error.\n\n---------------------------------------\n\n### connect ([callback])\n\nCreate a new connection pool. The initial probe connection is created to find out whether the configuration is valid.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after initial probe connection has established, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst pool = new sql.ConnectionPool({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n})\n\npool.connect(err => {\n    // ...\n})\n```\n\n__Errors__\n- ELOGIN (`ConnectionError`) - Login failed.\n- ETIMEOUT (`ConnectionError`) - Connection timeout.\n- EALREADYCONNECTED (`ConnectionError`) - Database is already connected!\n- EALREADYCONNECTING (`ConnectionError`) - Already connecting to database!\n- EINSTLOOKUP (`ConnectionError`) - Instance lookup failed.\n- ESOCKET (`ConnectionError`) - Socket error.\n\n---------------------------------------\n\n### close()\n\nClose all active connections in the pool.\n\n__Example__\n\n```javascript\npool.close()\n```\n\n## Request\n\n```javascript\nconst request = new sql.Request(/* [pool or transaction] */)\n```\n\nIf you omit pool/transaction argument, global pool is used instead.\n\n### Events\n\n- **recordset(columns)** - Dispatched when metadata for new recordset are parsed.\n- **row(row)** - Dispatched when new row is parsed.\n- **done(returnValue)** - Dispatched when request is complete.\n- **error(err)** - Dispatched on error.\n- **info(message)** - Dispatched on informational message.\n\n---------------------------------------\n\n### execute (procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.input('input_parameter', sql.Int, value)\nrequest.output('output_parameter', sql.Int)\nrequest.execute('procedure_name', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordsets.length) // count of recordsets returned by the procedure\n    console.log(result.recordsets[0].length) // count of rows contained in first recordset\n    console.log(result.recordset) // first recordset from result.recordsets\n    console.log(result.returnValue) // procedure return value\n    console.log(result.output) // key/value collection of output values\n    console.log(result.rowsAffected) // array of numbers, each number represents the number of rows affected by executed statemens\n\n    // ...\n})\n```\n\n__Errors__\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### input (name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automatically decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value)\nrequest.input('input_parameter', sql.Int, value)\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define your own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text)\n```\n\nYou can also overwrite the default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt)\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int)\nrequest.output('output_parameter', sql.VarChar(50), 'abc')\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### pipe (stream)\n\nSets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n\n__Arguments__\n\n- **stream** - Writable stream in object mode.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.pipe(stream)\nrequest.query('select * from mytable')\nstream.on('error', err => {\n    // ...\n})\nstream.on('finish', () => {\n    // ...\n})\n```\n\n---------------------------------------\n\n### query (command, [callback])\n\nExecute the SQL command. To execute commands like `create procedure` or if you plan to work with local temporary tables, use [batch](#batch-batch-callback) instead.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n\n    // ...\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number; select 2 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n    console.log(result.recordsets[0][0].number) // return 1\n    console.log(result.recordsets[1][0].number) // return 2\n})\n```\n\n**NOTE**: To get number of rows affected by the statement(s), see section [Affected Rows](#affected-rows).\n\n---------------------------------------\n\n### batch (batch, [callback])\n\nExecute the SQL command. Unlike [query](#query-command-callback), it doesn't use `sp_executesql`, so is not likely that SQL Server will reuse the execution plan it generates for the SQL. Use this only in special cases, for example when you need to execute commands like `create procedure` which can't be executed with [query](#query-command-callback) or if you're executing statements longer than 4000 chars on SQL Server 2000. Also you should use this if you're plan to work with local temporary tables ([more information here](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)).\n\nNOTE: Table-Valued Parameter (TVP) is not supported in batch.\n\n__Arguments__\n\n- **batch** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.batch('create procedure #temporary as select * from table', (err, result) => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\nYou can enable multiple recordsets in queries with the `request.multiple = true` command.\n\n---------------------------------------\n\n### bulk (table, [options,] [callback])\n\nPerform a bulk insert.\n\n__Arguments__\n\n- **table** - `sql.Table` instance.\n- **options** - Options object to be passed through to driver (currently tedious only). Optional. If argument is a function it will be treated as the callback.\n- **callback(err, rowCount)** - A callback which is called after bulk insert has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst table = new sql.Table('table_name') // or temporary table, e.g. #temptable\ntable.create = true\ntable.columns.add('a', sql.Int, {nullable: true, primary: true})\ntable.columns.add('b', sql.VarChar(50), {nullable: false})\ntable.rows.add(777, 'test')\n\nconst request = new sql.Request()\nrequest.bulk(table, (err, result) => {\n    // ... error checks\n})\n```\n\n**IMPORTANT**: Always indicate whether the column is nullable or not!\n\n**TIP**: If you set `table.create` to `true`, module will check if the table exists before it start sending data. If it doesn't, it will automatically create it. You can specify primary key columns by setting `primary: true` to column's options. Primary key constraint on multiple columns is supported.\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n__Errors__\n- ENAME (`RequestError`) - Table name must be specified for bulk insert.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### cancel()\n\nCancel currently executing request. Return `true` if cancellation packet was send successfully.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', (err, result) => {\n    console.log(err instanceof sql.RequestError)  // true\n    console.log(err.message)                      // Cancelled.\n    console.log(err.code)                         // ECANCEL\n\n    // ...\n})\n\nrequest.cancel()\n```\n\n## Transaction\n\n**IMPORTANT:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is acquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\n```\n\nIf you omit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    const request = new sql.Request(transaction)\n    request.query('insert into mytable (mycolumn) values (12345)', (err, result) => {\n        // ... error checks\n\n        transaction.commit(err => {\n            // ... error checks\n\n            console.log(\"Transaction committed.\")\n        })\n    })\n})\n```\n\nTransaction can also be created by `const transaction = pool.transaction()`. Requests can also be created by `const request = transaction.request()`.\n\n__Aborted transactions__\n\nThis example shows how you should correctly handle transaction errors when `abortTransactionOnError` (`XACT_ABORT`) is enabled. Added in 2.0.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    let rolledBack = false\n\n    transaction.on('rollback', aborted => {\n        // emited with aborted === true\n\n        rolledBack = true\n    })\n\n    new sql.Request(transaction)\n    .query('insert into mytable (bitcolumn) values (2)', (err, result) => {\n        // insert should fail because of invalid value\n\n        if (err) {\n            if (!rolledBack) {\n                transaction.rollback(err => {\n                    // ... error checks\n                })\n            }\n        } else {\n            transaction.commit(err => {\n                // ... error checks\n            })\n        }\n    })\n})\n```\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback(aborted)** - Dispatched on successful rollback with an argument determining if the transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### begin ([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYBEGUN (`TransactionError`) - Transaction has already begun.\n\n---------------------------------------\n\n### commit ([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has committed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.commit(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't commit transaction. There is a request in progress.\n\n---------------------------------------\n\n### rollback ([callback])\n\nRollback a transaction. If the queue isn't empty, all queued requests will be Cancelled and the transaction will be marked as aborted.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.rollback(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't rollback transaction. There is a request in progress.\n\n## Prepared Statement\n\n**IMPORTANT:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is acquired from the connection pool and all subsequent executions are executed exclusively on this connection. After you call `unprepare`, the connection is then released back to the connection pool.\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\n```\n\nIf you omit the connection argument, the global connection is used instead.\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        // release the connection after queries are executed\n        ps.unprepare(err => {\n            // ... error checks\n\n        })\n    })\n})\n```\n\n**IMPORTANT**: Remember that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement when you've finished your queries!\n\nYou can execute multiple queries against the same prepared statement but you *must* unprepare the statement when you have finished using it otherwise you will cause the connection pool to run out of available connections.\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n### input (name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int)\nps.input('input_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int)\nps.output('output_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### prepare (statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.prepare('select @param as value', err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYPREPARED (`PreparedStatementError`) - Statement is already prepared.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n\n---------------------------------------\n\n### execute (values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        console.log(result.recordset[0].value) // return 12345\n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\nYou can also stream executed request.\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.stream = true\n    const request = ps.execute({param: 12345})\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n        \n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\n**TIP**: To learn more about how number of affected rows works, see section [Affected Rows](#affected-rows).\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n\n---------------------------------------\n\n### unprepare ([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.unprepare(err => {\n        // ... error checks\n\n    })\n})\n```\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n\n## CLI\n\nBefore you can start using CLI, you must install `mssql` globally with `npm install mssql -g`. Once you do that you will be able to execute `mssql` command.\n\n__Setup__\n\nCreate a `.mssql.json` configuration file (anywhere). Structure of the file is the same as the standard configuration object.\n\n```json\n{\n    \"user\": \"...\",\n    \"password\": \"...\",\n    \"server\": \"localhost\",\n    \"database\": \"...\"\n}\n```\n\n__Example__\n\n```shell\necho \"select * from mytable\" | mssql /path/to/config\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}]]\n```\n\nYou can also query for multiple recordsets.\n\n```shell\necho \"select * from mytable; select * from myothertable\" | mssql\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}],[{\"id\":15,\"name\":\"Product name\"}]]\n```\n\nIf you omit config path argument, mssql will try to load it from current working directory.\n\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n\n{ srid: 0,\n  version: 1,\n  points:\n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nconst tvp = new sql.Table() // You can optionally specify table type name in the first argument.\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50))\ntvp.columns.add('b', sql.Int)\n\n// Add rows\ntvp.rows.add('hello tvp', 777) // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('tvp', tvp)\nrequest.execute('MyCustomStoredProcedure', (err, result) => {\n    // ... error checks\n\n    console.dir(result.recordsets[0][0]) // {a: 'hello tvp', b: 777}\n})\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n## Affected Rows\n\nIf you're performing `INSERT`, `UPDATE` or `DELETE` in a query, you can read number of affected rows. The `rowsAffected` variable is an array of numbers. Each number represents number of affected rows by a single statement.\n\n__Example using Promises__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100').then(result => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using callbacks__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100', (err, result) => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using streaming__\n\n```javascript\nconst request = new sql.Request()\nrequest.stream = true\nrequest.query('update myAwesomeTable set awesomness = 100')\nrequest.on('done', result => {\n    console.log(result.rowsAffected)\n})\n```\n\n## JSON support\n\nSQL Server 2016 introduced built-in JSON serialization. By default, JSON is returned as a plain text in a special column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B`.\n\nExample\n```sql\nSELECT\n    1 AS 'a.b.c',\n    2 AS 'a.b.d',\n    3 AS 'a.x',\n    4 AS 'a.y'\nFOR JSON PATH\n```\n\nResults in:\n```javascript\nrecordset = [ { 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B': '{\"a\":{\"b\":{\"c\":1,\"d\":2},\"x\":3,\"y\":4}}' } ]\n```\n\nYou can enable built-in JSON parser with `config.parseJSON = true`. Once you enable this, recordset will contain rows of parsed JS objects. Given the same example, result will look like this:\n```javascript\nrecordset = [ { a: { b: { c: 1, d: 2 }, x: 3, y: 4 } } ]\n```\n\n**IMPORTANT**: In order for this to work, there must be exactly one column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B` in the recordset.\n\nMore information about JSON support can be found in [official documentation](https://msdn.microsoft.com/en-us/library/dn921882.aspx).\n\n## Errors\n\nThere are 4 types of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, committing and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and its original stack may be cropped. You can always access original error with `err.originalError`.\n\nSQL Server may generate more than one error for one request so you can access preceding errors with `err.precedingErrors`.\n\n### Error Codes\n\nEach known error has `name`, `code` and `message` properties.\n\nName | Code | Message\n:--- | :--- | :---\n`ConnectionError` | ELOGIN | Login failed.\n`ConnectionError` | ETIMEOUT | Connection timeout.\n`ConnectionError` | EDRIVER | Unknown driver.\n`ConnectionError` | EALREADYCONNECTED | Database is already connected!\n`ConnectionError` | EALREADYCONNECTING | Already connecting to database!\n`ConnectionError` | ENOTOPEN | Connection not yet open.\n`ConnectionError` | EINSTLOOKUP | Instance lookup failed.\n`ConnectionError` | ESOCKET | Socket error.\n`ConnectionError` | ECONNCLOSED | Connection is closed.\n`TransactionError` | ENOTBEGUN | Transaction has not begun.\n`TransactionError` | EALREADYBEGUN | Transaction has already begun.\n`TransactionError` | EREQINPROG | Can't commit/rollback transaction. There is a request in progress.\n`TransactionError` | EABORT | Transaction has been aborted.\n`RequestError` | EREQUEST | Message from SQL Server. Error object contains additional details.\n`RequestError` | ECANCEL | Cancelled.\n`RequestError` | ETIMEOUT | Request timeout.\n`RequestError` | EARGS | Invalid number of arguments.\n`RequestError` | EINJECT | SQL injection warning.\n`RequestError` | ENOCONN | No connection is specified for that request.\n`PreparedStatementError` | EARGS | Invalid number of arguments.\n`PreparedStatementError` | EINJECT | SQL injection warning.\n`PreparedStatementError` | EALREADYPREPARED | Statement is already prepared.\n`PreparedStatementError` | ENOTPREPARED | Statement is not prepared.\n\n### Detailed SQL Errors\n\nSQL errors (`RequestError` with `err.code` equal to `EREQUEST`) contains additional details.\n\n- **err.number** - The error number.\n- **err.state** - The error state, used as a modifier to the number.\n- **err.class** - The class (severity) of the error. A class of less than 10 indicates an informational message. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **err.lineNumber** - The line number in the SQL batch or stored procedure that caused the error. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **err.serverName** - The server name.\n- **err.procName** - The stored procedure name.\n\n## Informational messages\n\nTo receive informational messages generated by `PRINT` or `RAISERROR` commands use:\n\n```javascript\nconst request = new sql.Request()\nrequest.on('info', info => {\n    console.dir(info)\n})\nrequest.query('print \\'Hello world.\\';', (err, result) => {\n    // ...\n})\n```\n\nStructure of informational message:\n\n- **info.message** - Message.\n- **info.number** - The message number.\n- **info.state** - The message state, used as a modifier to the number.\n- **info.class** - The class (severity) of the message. Equal or lower than 10. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **info.lineNumber** - The line number in the SQL batch or stored procedure that generated the message. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **info.serverName** - The server name.\n- **info.procName** - The stored procedure name.\n\n## Metadata\n\nRecordset metadata are accessible through the `recordset.columns` property.\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select convert(decimal(18, 4), 1) as first, \\'asdf\\' as second', (err, result) => {\n    console.dir(result.recordset.columns)\n\n    console.log(result.recordset.columns.first.type === sql.Decimal) // true\n    console.log(result.recordset.columns.second.type === sql.VarChar) // true\n})\n```\n\nColumns structure for example above:\n\n```javascript\n{\n    first: {\n        index: 0,\n        name: 'first',\n        length: 17,\n        type: [sql.Decimal],\n        scale: 4,\n        precision: 18,\n        nullable: true,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    },\n    second: {\n        index: 1,\n        name: 'second',\n        length: 4,\n        type: [sql.VarChar],\n        nullable: false,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    }\n}\n```\n\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\")               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\")           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\")      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar)                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\")              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33)              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33)          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33)       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date())        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date())     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Variant\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length. Types `sql.XML` and `sql.Variant` are not supported as input parameters.\n\n## SQL injection\n\nThis module has built-in SQL injection protection. Always use parameters or tagged template literals to pass sanitized values to your queries.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('myval', sql.VarChar, '-- commented')\nrequest.query('select @myval as myval', (err, result) => {\n    console.dir(result)\n})\n```\n\n## Known issues\n\n### Tedious\n\n- If you're facing problems with connecting SQL Server 2000, try setting the default TDS version to 7.1 with `config.options.tdsVersion = '7_1'` ([issue](https://github.com/tediousjs/node-mssql/issues/36))\n- If you're executing a statement longer than 4000 chars on SQL Server 2000, always use [batch](#batch-batch-callback) instead of [query](#query-command-callback) ([issue](https://github.com/tediousjs/node-mssql/issues/68))\n\n### msnodesqlv8\n\n- msnodesqlv8 has problem with errors during transactions - [reported](https://github.com/tediousjs/node-mssql/issues/77).\n- msnodesqlv8 doesn't support [detailed SQL errors](#detailed-sql-errors).\n\n## 3.x to 4.x changes\n\n- Library & tests are rewritten to ES6.\n- `Connection` was renamed to `ConnectionPool`.\n- Drivers are no longer loaded dynamically so the library is now compatible with Webpack. To use `msnodesqlv8` driver, use `const sql = require('mssql/msnodesqlv8')` syntax.\n- Every callback/resolve now returns `result` object only. This object contains `recordsets` (array of recordsets), `recordset` (first recordset from array of recordsets), `rowsAffected` (array of numbers representig number of affected rows by each insert/update/delete statement) and `output` (key/value collection of output parameters' values).\n- Affected rows are now returned as an array. A separate number for each SQL statement.\n- Directive `multiple: true` was removed.\n- `Transaction` and `PreparedStatement` internal queues was removed.\n- ConnectionPool no longer emits `connect` and `close` events.\n- Removed verbose and debug mode.\n- Removed support for `tds` and `msnodesql` drivers.\n- Removed support for Node versions lower than 4.\n\n[npm-image]: https://img.shields.io/npm/v/mssql.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/mssql\n[downloads-image]: https://img.shields.io/npm/dm/mssql.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/mssql\n[david-image]: https://img.shields.io/david/tediousjs/node-mssql.svg?style=flat-square\n[david-url]: https://david-dm.org/tediousjs/node-mssql\n[travis-image]: https://img.shields.io/travis/tediousjs/node-mssql/master.svg?style=flat-square&label=unit\n[travis-url]: https://travis-ci.org/tediousjs/node-mssql\n[appveyor-image]: https://img.shields.io/appveyor/ci/patriksimek/node-mssql-o4dhf/master.svg?style=flat-square&label=integration\n[appveyor-url]: https://ci.appveyor.com/project/patriksimek/node-mssql-o4dhf\n\n[tedious-url]: https://www.npmjs.com/package/tedious\n[msnodesqlv8-url]: https://www.npmjs.com/package/msnodesqlv8\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@5.0.0-beta.1","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-7tGkGv2vKSd1OSzMI9Ocs3KuVu5AOb0aPwhm9WIQD8E7HSZmSHlEsmXnG0nbluX6IWqdIrwMXrvGWR9FzZFn0w==","shasum":"ead9e435aace356a7cce2ac95715d325bed57763","tarball":"https://registry.npmjs.org/mssql/-/mssql-5.0.0-beta.1.tgz","fileCount":19,"unpackedSize":198810,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcWFESCRA9TVsSAnZWagAAoaQP/ROW64kVNBFkz7FFY/An\n4bRF7mqWp1f4T77LXY2OwkfKToiwk2SB892J50YtDKjnxpycit8LZ4xOfcL0\nHGWk2UcvyY1LR+ZbD8Ynqh4RTOTV5jyOgiD1E8e7gzh3sVJdUZstxYDot9Xe\nGJY7HUwbf9SnCmsBKmEC/mQK+1Ce8BhwE1WM0yH+2dVw92G+UT57HqDY1ErN\nBaMvnvQP1yrvN09q66ctJKIAOHmA84MPHbRO7JIUWDMh3iR3Cz1BuZ/y0j6p\nAk/wLo2fRg43kThhnYBDakNRrxsDgXTH3qHG7pja0MtuLm7GnIjmrF/3W9gf\no6z1zkwWBuYWMF2FJv6k7SrU8iUpO+8mC0YsuiEJFIDUT75dqGN+zAZF0kfc\nPxZFyJK9tMQZ65p3BDengBX8mxjBQ567rgoAzfRoaYRu4lPr3Y10/s+XuT5M\n9BPbsA0bKXx6/m/GhcixaQT+eNZFcE9GrYPmlQRtadoV0ke4OWWQJONenq8q\ngfiufD6Syow5uAlVDxGBDpr1l5QQptiPJJlR1K9ostQxWGYnRKEEvU8pFZTW\n/jR/46WDnyDy98uBXWp9Qn13fYn2ziLLb812syw3q6nWFrekGOLb1GilVGpV\nRlPa1I4Hdv12EdVBEf++SsiXEp6MhiMQnIOfNMAxx1YTw6TF+9ycrM5S2aCG\nucRH\r\n=d6/u\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_5.0.0-beta.1_1549291793536_0.2067855059543724"},"_hasShrinkwrap":false},"4.3.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.3.1","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.6","tedious":"^2.7.1"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=4"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha -t 15000 test/common/unit.js","test-tedious":"mocha -t 15000 test/tedious","test-msnodesqlv8":"mocha -t 15000 test/msnodesqlv8","test-cli":"mocha -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"bb12e08a1636387a6a3d3558bff5854f3654c175","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@4.3.1","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-Us9eorAgcL1/5V6TCOAU+pr1zN0iIfO/tRKhMa5VhcaQiiMUOicp7bSigyS6I+IOTy7Yn57lVTxkyiGd+vnuNw==","shasum":"e21e8d41c34a9fe6fe26c3b01d019ae9b6e563c5","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.3.1.tgz","fileCount":19,"unpackedSize":195468,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcWIEsCRA9TVsSAnZWagAA+XwP/1S5Wkx5LxJ0d+zZAtGb\nXMdYBLYUfkeUKLb4e6e+5OuBmXZENBfsy48ER/8L5/r8vk1gEwiJW8hTQ5T0\n0gH2xK35qAeoHjiO+dRgNjgCOIaeiZil/eKnHmlBu+A/FxwLcrYLbGjXAsXJ\n7zDO+CsE/2lbKQv9mVvp8uWgZaQFctJtXIZai/xJFc7loch0TqOMGg7AT2Ko\nOh+Ih47FsZ88hOCWKrhyezy396rnujdg1W9alNtTOtNRngQ0H4qx5qAaUs/8\nMI4O6cnmtlQDS1WtkRIOnd7XQd56ekIEnPf8VelidUdcV8+ccbGaByTSOTUQ\nPLlkmnp09VroCqluRil+yBWKxSvx+BsHUsJSTaWBOYDSmstKUDlMxAFCY3Rf\nIQVmAZPfye3Itx0ZumsM0AxKEqvHq4F7NG8FONhRMDWjw07AKKe8Yp2PEQER\ng3OmN5sEF3hjXDUEKHaFkQCB89Gg2rgJNmTAOUjl2w1p3oP0zLM1Ww7wm+QT\nqZW2ns7CxOJLQzMg8e2R8NtJnvhJu3uJqvSTxro922MT2u4BYrakKQVf6WsI\n9ebRfC/tsLa0wFkHoffEcqJdnN+0zpKjb6iiUCPgb1lLITaEY+VLM3RtE8dt\n8Q2vr9nG37oin5jpJ4r2Riy+lQOwa/qF8LOVrGy0rqn/Mw9lj0mBqu7sresT\n46OX\r\n=CN1/\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_4.3.1_1549304107562_0.9703140394240881"},"_hasShrinkwrap":false},"4.3.2":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.3.2","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.6","tedious":"^2.7.1"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=4"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha -t 15000 test/common/unit.js","test-tedious":"mocha -t 15000 test/tedious","test-msnodesqlv8":"mocha -t 15000 test/msnodesqlv8","test-cli":"mocha -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"93c336de97b96fc613a2ade87fc2c9f75cd01e0e","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@4.3.2","_nodeVersion":"10.15.1","_npmVersion":"6.7.0","dist":{"integrity":"sha512-FMC/nvEjR+yMkkyPsHCiswckT7EExoKuTj9uC1yohtJuySgodzPqkJX7q+tsZsZyK8mFYo7JfX+li6/Xf+Irbg==","shasum":"2bebfe84ce30caefbf9a43e38ef6c7c9bfa53360","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.3.2.tgz","fileCount":19,"unpackedSize":195468,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcZFCJCRA9TVsSAnZWagAAspwP/AxD6JlRbqM+Ijg3i0w3\nCk2tPoew3Ve4IH+6fTHb200R58D6T3kcOua9AXbE9nPP1na41Qt6GIBWgO6Y\nUU34yOEN8Zv8VDYL72EQImlhTwznIDKRiTnMpQkcpnDHkHg6Ba3FDYdtOpdA\n/M6MGmlZvoCBsVgcRz38QG0j249pa7uxsDtJYGXhp4VVdmIt4/iTTF0/daSK\nOrvhZO4eyV7lL0wKukFi7/pOeoMgeJWgl4Wbe62JbmLW/iUlgQJICymd6J17\nWltaYGO3qn3o2WfJpx6vd4apxlZGB7OPDpa78mOjH8ow9sICl9hXRu2lUbfz\n4tJ5Ybno36/azr13wD0ynf0OgHwfNcD20RW1XqKUrFxALT8l+tN485Csc2xn\nzchwr7aka08yIzGQd2G9m/6Y4RNJJBmHUvSKSWA+toJPNItSrxEi5GEt8Bw6\nu2EM+fCK8rBscG+vAxouNvy668lll6flsxuD/kqcDdS/DW/lPpOfM8K1ruhN\nMKppyFE9t8fKISqY/qYml+ftDgo6t4XUnk5XfXZIY+yT7kk62NqtB+/oREkH\nonyg4dyb3iSsajQsijCZDb/n4l9Hv0LAxjRuZ6pg8G6vkgs9Ej3eVOuio3pY\nhEa9yHhBFVLCO09EK94TA0/JTnNue/xHdiYz5h1nrmxA/2Cz9PWFydkSIRjl\nswt6\r\n=LI2z\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_4.3.2_1550078088630_0.7114211223243807"},"_hasShrinkwrap":false},"4.3.3":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.3.3","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.6.1","tedious":"^2.7.1"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=4"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha -t 15000 test/common/unit.js","test-tedious":"mocha -t 15000 test/tedious","test-msnodesqlv8":"mocha -t 15000 test/msnodesqlv8","test-cli":"mocha -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"84d20fed0757a40da30e20b76ca5caa17461099f","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@4.3.3","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-RuCkUwlCrCCYYxkXhjLc09GcSaFtwaVUvgVVIhyEI8QQ9QspA1aiUDHxV45PkhCu8/phqvSbIvdBovc8GawaKA==","shasum":"72fae3b6ccdb5f1f6bf0b15ba615f2560c47a131","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.3.3.tgz","fileCount":19,"unpackedSize":197002,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcgOfbCRA9TVsSAnZWagAAOZ8P/ixmc5zaxdo5ZYy+BYTI\nfJBawjnlz8/9q10i8S9Tb9WiQkyRaclSeBL33L4V7yGE1FsyUvKaN3T8w+5P\nagkJuuHIrT3uGJXv4KUv1kknL15LjZytdby10i+AZa+YTkhvdlwfS0Vm3MUo\nKBQ+L23ofkUpGzVR+Rr6SGly7A81FhPDqLmNtfxq8/PXTB5segBMPqhgVBxq\nWdTNcZxH/0H2FVzenuZoL4eT08uyTQ2PWCzpxoDCEhLoR2xPie1jnRcc+bQr\nu1Rixz0ncedkPoEvUHV6g0aSeWgOD6mW6kS6sJRorkeY/bYdgRhqph1sYm2r\nfcId4rE4my3b0n03/4oRebiNSUMm5Q/Z1q49l3xpC+gzXBbvLSqLpt6AWpzH\n93R6AntoWJgUvReGvUuK4QiSpCtxLqs7Yv4BbOky9PXqUstrO4Tda0nu9C9x\nN36bSAdtJ6+aXCJUebrpxqgCs5SPWxZkz167uEGoY4THw/1790nN7J54uuZm\nkGyh4v3fVjzYjMwrGTHxsDkplnXZf0IUyCJXNlmmNRnAn5iMQOM3b/6DUN3F\ngUdCOfT5QiEpML+O6y9W8aNr6JImQqw/bomglQ0IoiheRcGlz6vWZbSfawaO\n5M83Z9qmuMefg/oYp4aVgGbzti62bJKmKnibMEDSVQClirH1mWKT7g1vmiKf\nG/+y\r\n=cugV\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_4.3.3_1551951834608_0.8608906391037663"},"_hasShrinkwrap":false},"5.0.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"5.0.0","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.6.1","tedious":"^4.2.0"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"43401b4521276f927e72741640db87e3328ed247","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@5.0.0","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-KsQyis9zUB9VCg5k+XUn5ZOpJbY1IrbJz+511BsppwD8PQxT+NxwGzGTd8bQa0i76W+5ACPgDWKSBlljzfGdXQ==","shasum":"185420384e219bd52fa538ed1ef1eda0647f82ce","tarball":"https://registry.npmjs.org/mssql/-/mssql-5.0.0.tgz","fileCount":19,"unpackedSize":202611,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcgO6DCRA9TVsSAnZWagAAg1sQAJi4eNxvFXrZXpwtNwuV\nL1u0TUQCBEdYcfk5BbbOg02N9Glf5MahzlvFgMaH6zxCSoN/yhsCefIZGcAX\nufGF/zSmkUf3KIf7yV9nFXAhesFwWF5GfRg8e6o5teRCC5qkRAXpf1U2Woyg\nGqmzubOdizPCMLAdBljx1jnW5BCn/tPeJWtOx9/KLQFeNTgvwq8aTa+VnyKY\njn+fVcIXaqrmACAGD/n0pYcF1DFC8zs7Is1+WklJr2U1cYY2TRVGTuTXxFiq\n+hlDje09YlK1cPqRYgeCI/NhjsSktHVnNDi1berD/dR90RMaYEg1BcowqLck\ng6SC/VI65X3z9NyHHLMbrbwYhEpKgKxVmhmNQBIPsK7ff+zhSrjh4c0kSsuf\nniZbriyjr7srGKZIl5DYl01SnsQrBj5wrZdb6A+sih166dKOebv7ui2O1U9d\ngpSFPOUnQq4JIZki5ohji/QxUMa5R4xuxOdCtIpM/dxDb5pL2HOhfGoFa9n/\nwrfS7lJc1Lj9HBw6aRCsWGv6/ktKDQ2chUDFB5+4FN10VllXw9lmDr3G2dlp\nKyd85k/uiNJWFmGfIcolW7cfF1WxU224cfJf+i0XgtJm4Q9/3RWpEkxX1xOL\nPOgxU/0/m9THNoptTWTZI7NesnJuRvJ9iBMQB37VSWYBSWpC/kvfFeVSYpT5\nhesa\r\n=di0i\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_5.0.0_1551953538007_0.06563834034493277"},"_hasShrinkwrap":false},"6.0.0-alpha.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"6.0.0-alpha.1","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^4","tarn":"^1.1.4","tedious":"^6"},"devDependencies":{"mocha":"^6","standard":"^12"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"a7aa163e480f8f91d4776ffbb497d7b3337abe05","readme":"# node-mssql\n\nMicrosoft SQL Server client for Node.js\n\n[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Travis CI][travis-image]][travis-url] [![Appveyor CI][appveyor-image]][appveyor-url] [![Join the chat at https://gitter.im/patriksimek/node-mssql](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/patriksimek/node-mssql?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSupported TDS drivers:\n- [Tedious][tedious-url] (pure JavaScript - Windows/macOS/Linux, default)\n- [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server][msnodesqlv8-url] (native - Windows only)\n\n## Installation\n\n    npm install mssql\n\n## Quick Example\n\n```javascript\nconst sql = require('mssql')\n\nasync () => {\n    try {\n        await sql.connect('mssql://username:password@localhost/database')\n        const result = await sql.query`select * from mytable where id = ${value}`\n        console.dir(result)\n    } catch (err) {\n        // ... error checks\n    }\n}\n```\n\nIf you're on Windows Azure, add `?encrypt=true` to your connection string. See [docs](#configuration) to learn more.\n\n## Documentation\n\n### Examples\n\n* [Async/Await](#asyncawait)\n* [Promises](#promises)\n* [ES6 Tagged template literals](#es6-tagged-template-literals)\n* [Callbacks](#callbacks)\n* [Streaming](#streaming)\n* [Connection Pools](#connection-pools)\n\n### Configuration\n\n* [General](#general-same-for-all-drivers)\n* [Formats](#formats)\n\n### Drivers\n\n* [Tedious](#tedious)\n* [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server](#microsoft--contributors-node-v8-driver-for-nodejs-for-sql-server)\n\n### Connections\n\n* [ConnectionPool](#connections-1)\n* [connect](#connect-callback)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute-procedure-callback)\n* [input](#input-name-type-value)\n* [output](#output-name-type-value)\n* [pipe](#pipe-stream)\n* [query](#query-command-callback)\n* [batch](#batch-batch-callback)\n* [bulk](#bulk-table-callback)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin-isolationlevel-callback)\n* [commit](#commit-callback)\n* [rollback](#rollback-callback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#input-name-type)\n* [output](#output-name-type)\n* [prepare](#prepare-statement-callback)\n* [execute](#execute-values-callback)\n* [unprepare](#unprepare-callback)\n\n### Other\n\n* [CLI](#cli)\n* [Geography and Geometry](#geography-and-geometry)\n* [Table-Valued Parameter](#table-valued-parameter-tvp)\n* [Affected Rows](#affected-rows)\n* [JSON support](#json-support)\n* [Errors](#errors)\n* [Informational messages](#informational-messages)\n* [Metadata](#metadata)\n* [Data Types](#data-types)\n* [SQL injection](#sql-injection)\n* [Known Issues](#known-issues)\n* [Contributing](https://github.com/tediousjs/node-mssql/wiki/Contributing)\n* [4.x to 5.x changes](#4x-to-5x-changes)\n* [3.x to 4.x changes](#3x-to-4x-changes)\n* [3.x Documentation](https://github.com/tediousjs/node-mssql/blob/1893969195045a250f0fdeeb2de7f30dcf6689ad/README.md)\n\n## Examples\n\n### Config\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...',\n}\n```\n\n\n### Async/Await\n\n```javascript\nconst sql = require('mssql')\n\n(async function () {\n    try {\n        let pool = await sql.connect(config)\n        let result1 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .query('select * from mytable where id = @input_parameter')\n            \n        console.dir(result1)\n    \n        // Stored procedure\n        \n        let result2 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .output('output_parameter', sql.VarChar(50))\n            .execute('procedure_name')\n        \n        console.dir(result2)\n    } catch (err) {\n        // ... error checks\n    }\n})()\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Promises\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(pool => {\n    // Query\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .query('select * from mytable where id = @input_parameter')\n}).then(result => {\n    console.dir(result)\n    \n    // Stored procedure\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nNative Promise is used by default. You can easily change this with `sql.Promise = require('myownpromisepackage')`.\n\n### ES6 Tagged template literals\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(() => {\n    return sql.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n### Callbacks\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    // Query\n\n    new sql.Request().query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n    // Stored Procedure\n\n    new sql.Request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Streaming\n\nIf you plan to work with large amount of rows, you should always use streaming. Once you enable this, you must listen for events to receive data.\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    const request = new sql.Request()\n    request.stream = true // You can set streaming differently for each request\n    request.query('select * from verylargetable') // or request.execute(procedure)\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nWhen streaming large sets of data you want to back-off or chunk the amount of data you're processing\n to prevent memory exhaustion issues; you can use the `Request.pause()` function to do this. Here is\n an example of managing rows in batches of 15:\n\n```javascript\nlet rowsToProcess = [];\nrequest.on('row', row => {\n  rowsToProcess.push(row);\n  if (rowsToProcess.length >= 15) {\n    request.pause();\n    processRows();\n  }\n});\nrequest.on('done', () => {\n    processRows();\n});\n\nfunction processRows() {\n  // process rows\n  rowsToProcess = [];\n  request.resume();\n}\n```\n\n## Connection Pools\n\nUsing a single connection pool for your application/service is recommended.\nInstantiating a pool with a callback, or immediately calling `.connect`, is asynchronous to ensure a connection can be\nestablished before returning. From that point, you're able to acquire connections as normal:  \n\n```javascript\nconst sql = require('mssql')\n\n// async/await style:\nconst pool1 = new sql.ConnectionPool(config).connect();\n\npool1.on('error', err => {\n    // ... error handler\n})\n\nasync function messageHandler() {\n    await pool1; // ensures that the pool has been created\n    try {\n    \tconst request = pool1.request(); // or: new sql.Request(pool1)\n    \tconst result = request.query('select 1 as number')\n    \tconsole.dir(result)\n    \treturn result;\n\t} catch (err) {\n        console.error('SQL error', err);\n\t}\n}\n\n// promise style:\nconst pool2 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n}).connect();\n\npool2.on('error', err => {\n    // ... error handler\n})\n\nfunction runStoredProcedure() {\n    return pool2.then((pool) => {\n\t\tpool.request() // or: new sql.Request(pool2)\n\t\t.input('input_parameter', sql.Int, 10)\n\t\t.output('output_parameter', sql.VarChar(50))\n\t\t.execute('procedure_name', (err, result) => {\n\t\t\t// ... error checks\n\t\t\tconsole.dir(result)\n\t\t})\n    });\n}\n```\n\nAwaiting or `.then`ing the pool creation is a safe way to ensure that the pool is always ready, without knowing where it\nis needed first. In practice, once the pool is created then there will be no delay for the next operation.\n\n**ES6 Tagged template literals**\n\n```javascript\nnew sql.ConnectionPool(config).connect().then(pool => {\n    return pool.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n## Configuration\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n### General (same for all drivers)\n\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **domain** - Once you set domain, driver will connect to SQL Server using domain login.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **connectionTimeout** - Connection timeout in ms (default: `15000`).\n- **requestTimeout** - Request timeout in ms (default: `15000`). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second. When passed via connection string, the key must be `request timeout`\n- **stream** - Stream recordsets/rows instead of returning them all at once as an argument of callback (default: `false`). You can also enable streaming for each request independently (`request.stream = true`). Always set to `true` if you plan to work with large amount of rows.\n- **parseJSON** - Parse JSON recordsets to JS objects (default: `false`). For more information please see section [JSON support](#json-support).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimum of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\nComplete list of pool options can be found [here](https://github.com/vincit/tarn.js/#usage).\n\n### Formats\n\nIn addition to configuration object there is an option to pass config as a connection string. Two formats of connection string are supported.\n\n##### Classic Connection String\n\n```\nServer=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true\nDriver=msnodesqlv8;Server=(local)\\INSTANCE;Database=database;UID=DOMAIN\\username;PWD=password;Encrypt=true\n```\n\n##### Connection String URI\n\n```\nmssql://username:password@localhost:1433/database?encrypt=true\nmssql://username:password@localhost/INSTANCE/database?encrypt=true&domain=DOMAIN&driver=msnodesqlv8\n```\n\n## Drivers\n\n### Tedious\n\nDefault driver, actively maintained and production ready. Platform independent, runs everywhere Node.js runs. Officially supported by Microsoft.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the configured tedious `Connection`. It can be used for attaching event handlers like in this example:\n```js\nrequire('mssql').connect(...config, beforeConnect: conn => {\n  conn.once('connect', err => { err ? console.error(err) : console.log('mssql connected')})\n  conn.once('end', err => { err ? console.error(err) : console.log('mssql disconnected')})\n}})\n```\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1434 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `true`).\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_1`, `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n- **options.appName** - Application name used for SQL server logging.\n- **options.abortTransactionOnError** - A boolean determining whether to rollback a transaction automatically if any error is encountered during the given transaction's execution. This sets the value for `XACT_ABORT` during the initial SQL phase of a connection.\n\nMore information about Tedious specific options: http://tediousjs.github.io/tedious/api-connection.html\n\n### Microsoft / Contributors Node V8 Driver for Node.js for SQL Server\n\n**Requires Node.js 0.12.x or newer. Windows only.** This driver is not part of the default package and must be installed separately by `npm install msnodesqlv8`. To use this driver, use this require syntax: `const sql = require('mssql/msnodesqlv8')`.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the connection configuration, that can be modified to pass extra parameters to the driver's `open()` method.\n- **connectionString** - Connection string (default: see below).\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not to use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n## Connections\n\nInternally, each `ConnectionPool` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool. Connection health check is built-in so once the dead connection is discovered, it is immediately replaced with a new one.\n\n**IMPORTANT**: Always attach an `error` listener to created connection. Whenever something goes wrong with the connection it will emit an error and if there is no listener it will crash your application with an uncaught error.\n\n```javascript\nconst pool = new sql.ConnectionPool({ /* config */ })\n```\n\n### Events\n\n- **error(err)** - Dispatched on connection error.\n\n---------------------------------------\n\n### connect ([callback])\n\nCreate a new connection pool. The initial probe connection is created to find out whether the configuration is valid.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after initial probe connection has established, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst pool = new sql.ConnectionPool({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n})\n\npool.connect(err => {\n    // ...\n})\n```\n\n__Errors__\n- ELOGIN (`ConnectionError`) - Login failed.\n- ETIMEOUT (`ConnectionError`) - Connection timeout.\n- EALREADYCONNECTED (`ConnectionError`) - Database is already connected!\n- EALREADYCONNECTING (`ConnectionError`) - Already connecting to database!\n- EINSTLOOKUP (`ConnectionError`) - Instance lookup failed.\n- ESOCKET (`ConnectionError`) - Socket error.\n\n---------------------------------------\n\n### close()\n\nClose all active connections in the pool.\n\n__Example__\n\n```javascript\npool.close()\n```\n\n## Request\n\n```javascript\nconst request = new sql.Request(/* [pool or transaction] */)\n```\n\nIf you omit pool/transaction argument, global pool is used instead.\n\n### Events\n\n- **recordset(columns)** - Dispatched when metadata for new recordset are parsed.\n- **row(row)** - Dispatched when new row is parsed.\n- **done(returnValue)** - Dispatched when request is complete.\n- **error(err)** - Dispatched on error.\n- **info(message)** - Dispatched on informational message.\n\n---------------------------------------\n\n### execute (procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.input('input_parameter', sql.Int, value)\nrequest.output('output_parameter', sql.Int)\nrequest.execute('procedure_name', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordsets.length) // count of recordsets returned by the procedure\n    console.log(result.recordsets[0].length) // count of rows contained in first recordset\n    console.log(result.recordset) // first recordset from result.recordsets\n    console.log(result.returnValue) // procedure return value\n    console.log(result.output) // key/value collection of output values\n    console.log(result.rowsAffected) // array of numbers, each number represents the number of rows affected by executed statemens\n\n    // ...\n})\n```\n\n__Errors__\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### input (name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automatically decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value)\nrequest.input('input_parameter', sql.Int, value)\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define your own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text)\n```\n\nYou can also overwrite the default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt)\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int)\nrequest.output('output_parameter', sql.VarChar(50), 'abc')\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### pipe (stream)\n\nSets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n\n__Arguments__\n\n- **stream** - Writable stream in object mode.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.pipe(stream)\nrequest.query('select * from mytable')\nstream.on('error', err => {\n    // ...\n})\nstream.on('finish', () => {\n    // ...\n})\n```\n\n---------------------------------------\n\n### query (command, [callback])\n\nExecute the SQL command. To execute commands like `create procedure` or if you plan to work with local temporary tables, use [batch](#batch-batch-callback) instead.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n\n    // ...\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number; select 2 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n    console.log(result.recordsets[0][0].number) // return 1\n    console.log(result.recordsets[1][0].number) // return 2\n})\n```\n\n**NOTE**: To get number of rows affected by the statement(s), see section [Affected Rows](#affected-rows).\n\n---------------------------------------\n\n### batch (batch, [callback])\n\nExecute the SQL command. Unlike [query](#query-command-callback), it doesn't use `sp_executesql`, so is not likely that SQL Server will reuse the execution plan it generates for the SQL. Use this only in special cases, for example when you need to execute commands like `create procedure` which can't be executed with [query](#query-command-callback) or if you're executing statements longer than 4000 chars on SQL Server 2000. Also you should use this if you're plan to work with local temporary tables ([more information here](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)).\n\nNOTE: Table-Valued Parameter (TVP) is not supported in batch.\n\n__Arguments__\n\n- **batch** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.batch('create procedure #temporary as select * from table', (err, result) => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\nYou can enable multiple recordsets in queries with the `request.multiple = true` command.\n\n---------------------------------------\n\n### bulk (table, [options,] [callback])\n\nPerform a bulk insert.\n\n__Arguments__\n\n- **table** - `sql.Table` instance.\n- **options** - Options object to be passed through to driver (currently tedious only). Optional. If argument is a function it will be treated as the callback.\n- **callback(err, rowCount)** - A callback which is called after bulk insert has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst table = new sql.Table('table_name') // or temporary table, e.g. #temptable\ntable.create = true\ntable.columns.add('a', sql.Int, {nullable: true, primary: true})\ntable.columns.add('b', sql.VarChar(50), {nullable: false})\ntable.rows.add(777, 'test')\n\nconst request = new sql.Request()\nrequest.bulk(table, (err, result) => {\n    // ... error checks\n})\n```\n\n**IMPORTANT**: Always indicate whether the column is nullable or not!\n\n**TIP**: If you set `table.create` to `true`, module will check if the table exists before it start sending data. If it doesn't, it will automatically create it. You can specify primary key columns by setting `primary: true` to column's options. Primary key constraint on multiple columns is supported.\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n__Errors__\n- ENAME (`RequestError`) - Table name must be specified for bulk insert.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### cancel()\n\nCancel currently executing request. Return `true` if cancellation packet was send successfully.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', (err, result) => {\n    console.log(err instanceof sql.RequestError)  // true\n    console.log(err.message)                      // Cancelled.\n    console.log(err.code)                         // ECANCEL\n\n    // ...\n})\n\nrequest.cancel()\n```\n\n## Transaction\n\n**IMPORTANT:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is acquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\n```\n\nIf you omit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    const request = new sql.Request(transaction)\n    request.query('insert into mytable (mycolumn) values (12345)', (err, result) => {\n        // ... error checks\n\n        transaction.commit(err => {\n            // ... error checks\n\n            console.log(\"Transaction committed.\")\n        })\n    })\n})\n```\n\nTransaction can also be created by `const transaction = pool.transaction()`. Requests can also be created by `const request = transaction.request()`.\n\n__Aborted transactions__\n\nThis example shows how you should correctly handle transaction errors when `abortTransactionOnError` (`XACT_ABORT`) is enabled. Added in 2.0.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    let rolledBack = false\n\n    transaction.on('rollback', aborted => {\n        // emited with aborted === true\n\n        rolledBack = true\n    })\n\n    new sql.Request(transaction)\n    .query('insert into mytable (bitcolumn) values (2)', (err, result) => {\n        // insert should fail because of invalid value\n\n        if (err) {\n            if (!rolledBack) {\n                transaction.rollback(err => {\n                    // ... error checks\n                })\n            }\n        } else {\n            transaction.commit(err => {\n                // ... error checks\n            })\n        }\n    })\n})\n```\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback(aborted)** - Dispatched on successful rollback with an argument determining if the transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### begin ([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYBEGUN (`TransactionError`) - Transaction has already begun.\n\n---------------------------------------\n\n### commit ([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has committed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.commit(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't commit transaction. There is a request in progress.\n\n---------------------------------------\n\n### rollback ([callback])\n\nRollback a transaction. If the queue isn't empty, all queued requests will be Cancelled and the transaction will be marked as aborted.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.rollback(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't rollback transaction. There is a request in progress.\n\n## Prepared Statement\n\n**IMPORTANT:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is acquired from the connection pool and all subsequent executions are executed exclusively on this connection. After you call `unprepare`, the connection is then released back to the connection pool.\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\n```\n\nIf you omit the connection argument, the global connection is used instead.\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        // release the connection after queries are executed\n        ps.unprepare(err => {\n            // ... error checks\n\n        })\n    })\n})\n```\n\n**IMPORTANT**: Remember that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement when you've finished your queries!\n\nYou can execute multiple queries against the same prepared statement but you *must* unprepare the statement when you have finished using it otherwise you will cause the connection pool to run out of available connections.\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n### input (name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int)\nps.input('input_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int)\nps.output('output_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### prepare (statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.prepare('select @param as value', err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYPREPARED (`PreparedStatementError`) - Statement is already prepared.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n\n---------------------------------------\n\n### execute (values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        console.log(result.recordset[0].value) // return 12345\n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\nYou can also stream executed request.\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.stream = true\n    const request = ps.execute({param: 12345})\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n        \n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\n**TIP**: To learn more about how number of affected rows works, see section [Affected Rows](#affected-rows).\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n\n---------------------------------------\n\n### unprepare ([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.unprepare(err => {\n        // ... error checks\n\n    })\n})\n```\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n\n## CLI\n\nBefore you can start using CLI, you must install `mssql` globally with `npm install mssql -g`. Once you do that you will be able to execute `mssql` command.\n\n__Setup__\n\nCreate a `.mssql.json` configuration file (anywhere). Structure of the file is the same as the standard configuration object.\n\n```json\n{\n    \"user\": \"...\",\n    \"password\": \"...\",\n    \"server\": \"localhost\",\n    \"database\": \"...\"\n}\n```\n\n__Example__\n\n```shell\necho \"select * from mytable\" | mssql /path/to/config\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}]]\n```\n\nYou can also query for multiple recordsets.\n\n```shell\necho \"select * from mytable; select * from myothertable\" | mssql\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}],[{\"id\":15,\"name\":\"Product name\"}]]\n```\n\nIf you omit config path argument, mssql will try to load it from current working directory.\n\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n\n{ srid: 0,\n  version: 1,\n  points:\n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nconst tvp = new sql.Table() // You can optionally specify table type name in the first argument.\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50))\ntvp.columns.add('b', sql.Int)\n\n// Add rows\ntvp.rows.add('hello tvp', 777) // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('tvp', tvp)\nrequest.execute('MyCustomStoredProcedure', (err, result) => {\n    // ... error checks\n\n    console.dir(result.recordsets[0][0]) // {a: 'hello tvp', b: 777}\n})\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n## Affected Rows\n\nIf you're performing `INSERT`, `UPDATE` or `DELETE` in a query, you can read number of affected rows. The `rowsAffected` variable is an array of numbers. Each number represents number of affected rows by a single statement.\n\n__Example using Promises__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100').then(result => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using callbacks__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100', (err, result) => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using streaming__\n\n```javascript\nconst request = new sql.Request()\nrequest.stream = true\nrequest.query('update myAwesomeTable set awesomness = 100')\nrequest.on('done', result => {\n    console.log(result.rowsAffected)\n})\n```\n\n## JSON support\n\nSQL Server 2016 introduced built-in JSON serialization. By default, JSON is returned as a plain text in a special column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B`.\n\nExample\n```sql\nSELECT\n    1 AS 'a.b.c',\n    2 AS 'a.b.d',\n    3 AS 'a.x',\n    4 AS 'a.y'\nFOR JSON PATH\n```\n\nResults in:\n```javascript\nrecordset = [ { 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B': '{\"a\":{\"b\":{\"c\":1,\"d\":2},\"x\":3,\"y\":4}}' } ]\n```\n\nYou can enable built-in JSON parser with `config.parseJSON = true`. Once you enable this, recordset will contain rows of parsed JS objects. Given the same example, result will look like this:\n```javascript\nrecordset = [ { a: { b: { c: 1, d: 2 }, x: 3, y: 4 } } ]\n```\n\n**IMPORTANT**: In order for this to work, there must be exactly one column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B` in the recordset.\n\nMore information about JSON support can be found in [official documentation](https://msdn.microsoft.com/en-us/library/dn921882.aspx).\n\n## Errors\n\nThere are 4 types of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, committing and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and its original stack may be cropped. You can always access original error with `err.originalError`.\n\nSQL Server may generate more than one error for one request so you can access preceding errors with `err.precedingErrors`.\n\n### Error Codes\n\nEach known error has `name`, `code` and `message` properties.\n\nName | Code | Message\n:--- | :--- | :---\n`ConnectionError` | ELOGIN | Login failed.\n`ConnectionError` | ETIMEOUT | Connection timeout.\n`ConnectionError` | EDRIVER | Unknown driver.\n`ConnectionError` | EALREADYCONNECTED | Database is already connected!\n`ConnectionError` | EALREADYCONNECTING | Already connecting to database!\n`ConnectionError` | ENOTOPEN | Connection not yet open.\n`ConnectionError` | EINSTLOOKUP | Instance lookup failed.\n`ConnectionError` | ESOCKET | Socket error.\n`ConnectionError` | ECONNCLOSED | Connection is closed.\n`TransactionError` | ENOTBEGUN | Transaction has not begun.\n`TransactionError` | EALREADYBEGUN | Transaction has already begun.\n`TransactionError` | EREQINPROG | Can't commit/rollback transaction. There is a request in progress.\n`TransactionError` | EABORT | Transaction has been aborted.\n`RequestError` | EREQUEST | Message from SQL Server. Error object contains additional details.\n`RequestError` | ECANCEL | Cancelled.\n`RequestError` | ETIMEOUT | Request timeout.\n`RequestError` | EARGS | Invalid number of arguments.\n`RequestError` | EINJECT | SQL injection warning.\n`RequestError` | ENOCONN | No connection is specified for that request.\n`PreparedStatementError` | EARGS | Invalid number of arguments.\n`PreparedStatementError` | EINJECT | SQL injection warning.\n`PreparedStatementError` | EALREADYPREPARED | Statement is already prepared.\n`PreparedStatementError` | ENOTPREPARED | Statement is not prepared.\n\n### Detailed SQL Errors\n\nSQL errors (`RequestError` with `err.code` equal to `EREQUEST`) contains additional details.\n\n- **err.number** - The error number.\n- **err.state** - The error state, used as a modifier to the number.\n- **err.class** - The class (severity) of the error. A class of less than 10 indicates an informational message. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **err.lineNumber** - The line number in the SQL batch or stored procedure that caused the error. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **err.serverName** - The server name.\n- **err.procName** - The stored procedure name.\n\n## Informational messages\n\nTo receive informational messages generated by `PRINT` or `RAISERROR` commands use:\n\n```javascript\nconst request = new sql.Request()\nrequest.on('info', info => {\n    console.dir(info)\n})\nrequest.query('print \\'Hello world.\\';', (err, result) => {\n    // ...\n})\n```\n\nStructure of informational message:\n\n- **info.message** - Message.\n- **info.number** - The message number.\n- **info.state** - The message state, used as a modifier to the number.\n- **info.class** - The class (severity) of the message. Equal or lower than 10. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **info.lineNumber** - The line number in the SQL batch or stored procedure that generated the message. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **info.serverName** - The server name.\n- **info.procName** - The stored procedure name.\n\n## Metadata\n\nRecordset metadata are accessible through the `recordset.columns` property.\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select convert(decimal(18, 4), 1) as first, \\'asdf\\' as second', (err, result) => {\n    console.dir(result.recordset.columns)\n\n    console.log(result.recordset.columns.first.type === sql.Decimal) // true\n    console.log(result.recordset.columns.second.type === sql.VarChar) // true\n})\n```\n\nColumns structure for example above:\n\n```javascript\n{\n    first: {\n        index: 0,\n        name: 'first',\n        length: 17,\n        type: [sql.Decimal],\n        scale: 4,\n        precision: 18,\n        nullable: true,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    },\n    second: {\n        index: 1,\n        name: 'second',\n        length: 4,\n        type: [sql.VarChar],\n        nullable: false,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    }\n}\n```\n\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\")               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\")           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\")      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar)                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\")              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33)              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33)          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33)       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date())        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date())     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Variant\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length. Types `sql.XML` and `sql.Variant` are not supported as input parameters.\n\n## SQL injection\n\nThis module has built-in SQL injection protection. Always use parameters or tagged template literals to pass sanitized values to your queries.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('myval', sql.VarChar, '-- commented')\nrequest.query('select @myval as myval', (err, result) => {\n    console.dir(result)\n})\n```\n\n## Known issues\n\n### Tedious\n\n- If you're facing problems with connecting SQL Server 2000, try setting the default TDS version to 7.1 with `config.options.tdsVersion = '7_1'` ([issue](https://github.com/tediousjs/node-mssql/issues/36))\n- If you're executing a statement longer than 4000 chars on SQL Server 2000, always use [batch](#batch-batch-callback) instead of [query](#query-command-callback) ([issue](https://github.com/tediousjs/node-mssql/issues/68))\n\n### msnodesqlv8\n\n- msnodesqlv8 has problem with errors during transactions - [reported](https://github.com/tediousjs/node-mssql/issues/77).\n- msnodesqlv8 doesn't support [detailed SQL errors](#detailed-sql-errors).\n\n## 4.x to 5.x changes\n\n- Moved pool library from `node-pool` to `tarn.js`\n- `ConnectionPool.pool.size` deprecated, use `ConnectionPool.size` instead\n- `ConnectionPool.pool.available` deprecated, use `ConnectionPool.available` instead\n- `ConnectionPool.pool.pending` deprecated, use `ConnectionPool.pending` instead\n- `ConnectionPool.pool.borrowed` deprecated, use `ConnectionPool.borrowed` instead\n\n## 3.x to 4.x changes\n\n- Library & tests are rewritten to ES6.\n- `Connection` was renamed to `ConnectionPool`.\n- Drivers are no longer loaded dynamically so the library is now compatible with Webpack. To use `msnodesqlv8` driver, use `const sql = require('mssql/msnodesqlv8')` syntax.\n- Every callback/resolve now returns `result` object only. This object contains `recordsets` (array of recordsets), `recordset` (first recordset from array of recordsets), `rowsAffected` (array of numbers representig number of affected rows by each insert/update/delete statement) and `output` (key/value collection of output parameters' values).\n- Affected rows are now returned as an array. A separate number for each SQL statement.\n- Directive `multiple: true` was removed.\n- `Transaction` and `PreparedStatement` internal queues was removed.\n- ConnectionPool no longer emits `connect` and `close` events.\n- Removed verbose and debug mode.\n- Removed support for `tds` and `msnodesql` drivers.\n- Removed support for Node versions lower than 4.\n\n[npm-image]: https://img.shields.io/npm/v/mssql.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/mssql\n[downloads-image]: https://img.shields.io/npm/dm/mssql.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/mssql\n[david-image]: https://img.shields.io/david/tediousjs/node-mssql.svg?style=flat-square\n[david-url]: https://david-dm.org/tediousjs/node-mssql\n[travis-image]: https://img.shields.io/travis/tediousjs/node-mssql/master.svg?style=flat-square&label=unit\n[travis-url]: https://travis-ci.org/tediousjs/node-mssql\n[appveyor-image]: https://ci.appveyor.com/api/projects/status/e5gq1a0ujwams9t7/branch/master?svg=true\n[appveyor-url]: https://ci.appveyor.com/project/tediousjs/node-mssql\n\n[tedious-url]: https://www.npmjs.com/package/tedious\n[msnodesqlv8-url]: https://www.npmjs.com/package/msnodesqlv8\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@6.0.0-alpha.1","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-aoyZq+B5PsfmZKdiiABD5uleGFs3d3utm64yMyLNo0bHyHRBkgu7Mv3Q78Il1YJXnPp6sAg0SHgi26CHGMmo6A==","shasum":"71bb56fca1816e235238ceffd64bcfb6a5a1e234","tarball":"https://registry.npmjs.org/mssql/-/mssql-6.0.0-alpha.1.tgz","fileCount":19,"unpackedSize":203055,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcgVGgCRA9TVsSAnZWagAATCoP/jDxLDWBdtdmFvQOhiRl\n03X8Z1OFiWe8Ab6s857KjH+JtqTKrByRAXpNwNbDcJxlgs/94wIV7FhuPS41\nQ5P5ivDGyaBsPug1ImKYjAPCBDROg7cbjaa9wIDQorcO7upjdspSx2QpluCz\nSfqIoOil0oxQXBNWamr0aE0XklcWUi1ehs5kEzdbBkPC+oHTxvLzgwou6nez\n8kROu2lEgfNqGg7Di1My8NjFSmkTb+yaZIYuNAA1Vw9+aBKcBmtLfEOBg9zm\n+28yaAzeOJ+5cuVFzhB7BLToGkoNsvehRbfKJf478Su7cUksLs0tKq1KxC8R\nkcNTuM7mSC0nSGI8gw5icmmbW5NSctMRIauLRwT9OmVVd4kq9c421b5CQY94\nP/wxMH5sOPyKZMgyRRRzJ2GRetlbCFbTyt3Jfafcr95W1xmxMMqFsNj5ldyy\nJ54YegauhAItJZNdapU+p2t51O3C1//IbqHUBbzEod/ZjItfJftKtSWp7D7T\nf9PRMzOUrTB71yEGno/xkauqDQr2a1FaLbT8H9FnEdhluSA6iSj/Tf9mpB7l\naLPlBlhw8EYJQHb1vxGHzY5dSCFO7ezR8A/Pk8xZTAWr9pn/pZ55e/b/R+9n\n7mV1+W8awNC0U+hb0CWODuUUVbXG5v0hbkDD+Hv2+TnUPuQAZiI9oKCW2aAf\n0Nkx\r\n=x4Cz\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_6.0.0-alpha.1_1551978911623_0.5635354782073914"},"_hasShrinkwrap":false},"6.0.0-alpha.2":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"6.0.0-alpha.2","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^4","tarn":"^1.1.4","tedious":"^6"},"devDependencies":{"mocha":"^6","standard":"^12"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"1232cd8ed78881ad90c10ecca0574fc7716b49d2","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@6.0.0-alpha.2","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-xrScNRceP/p5nxwXpRLPnx4vqCkdyqYAyodGxgcui4ebocXpLOUiSHuERZLnEwvsOHXpAnXjCVaUUespLXhJvQ==","shasum":"ba5b325cbff566bba58ea4c0e9ceb5c90e091b5a","tarball":"https://registry.npmjs.org/mssql/-/mssql-6.0.0-alpha.2.tgz","fileCount":19,"unpackedSize":203609,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcglAvCRA9TVsSAnZWagAAqSAP/16LGTZnfnqW4lPBXBh3\nR1e/PhNQAaDc1BYRiyVusfu7B2DIxAqRXVCsZWlxyb0w2wdnyPHWa/T5xQ+F\nJrSm9IOyHwxZywuvaPI3RYGRO9pjrwHWD5CQ91m/Qi9sgYaddm9jZXWJGVRQ\nFR5Lp5owyxFnW+B6wWW+F+u9YY8rHaKfXgW4YDzSFSNXfIfS6D+KuODL6QdM\nd2/HhcgfTJR4O7cW3WnkIkfONz31v99/Dl8FC2wx3KTdOvVnVVbr6b/7mJmW\n8AzkJbBB3xQCH/oyj+PcqasE76P4FPB1xeUAjvK+PNry2FcGoNf+TJWk00w1\nwMWtuwP3Ev5sUH6YajXpqFbBvvg/0Hp9o5O8fTsIodaNR1wRuaxu421ocyCK\n7yN5OTt8iH3IhIxjgT4z8dtU+umYeN5knDtBZhZu90CW4bdVo+BVpwmuOvLv\nN3Ij3AqtaJomubj/YYzjpLlP556gm6JgdLueQIylhjUnF4U3ZKE34raXr4fF\necECCFpKzScb41WvGhfDJjOkjqDp3u9UdwtCmoEIdQodJWary3KVMmIXXA26\n9t+LcUEpt2mktvUUoUBdbXOyZvrfe1hPaAE/+cC0gSgS0UOnT0yY0IYYnKt5\nrGQm0WkVQevlpd7S18yB1GTTBu/beIRKvVuTFzuJaqWGP5oFgpdl4Ze+TiWa\nREe5\r\n=Po6p\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_6.0.0-alpha.2_1552044078600_0.031890098076430284"},"_hasShrinkwrap":false},"4.3.4":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.3.4","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.6.1","tedious":"^2.7.1"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=4"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha -t 15000 test/common/unit.js","test-tedious":"mocha -t 15000 test/tedious","test-msnodesqlv8":"mocha -t 15000 test/msnodesqlv8","test-cli":"mocha -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"5acacb4edc2c23bb4b53ebc51e1d0404f650db08","readme":"# node-mssql\n\nMicrosoft SQL Server client for Node.js\n\n[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Travis CI][travis-image]][travis-url] [![Appveyor CI][appveyor-image]][appveyor-url] [![Join the chat at https://gitter.im/patriksimek/node-mssql](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/patriksimek/node-mssql?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSupported TDS drivers:\n- [Tedious][tedious-url] (pure JavaScript - Windows/macOS/Linux, default)\n- [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server][msnodesqlv8-url] (native - Windows only)\n\n## Installation\n\n    npm install mssql\n\nUse `@next` tag to install the most recent version with latest fixes and features.\n\n    npm install mssql@next\n\n## Quick Example\n\n```javascript\nconst sql = require('mssql')\n\nasync () => {\n    try {\n        await sql.connect('mssql://username:password@localhost/database')\n        const result = await sql.query`select * from mytable where id = ${value}`\n        console.dir(result)\n    } catch (err) {\n        // ... error checks\n    }\n}\n```\n\nIf you're on Windows Azure, add `?encrypt=true` to your connection string. See [docs](#configuration) to learn more.\n\n## Documentation\n\n### Examples\n\n* [Async/Await](#asyncawait)\n* [Promises](#promises)\n* [ES6 Tagged template literals](#es6-tagged-template-literals)\n* [Callbacks](#callbacks)\n* [Streaming](#streaming)\n* [Connection Pools](#connection-pools)\n\n### Configuration\n\n* [General](#general-same-for-all-drivers)\n* [Formats](#formats)\n\n### Drivers\n\n* [Tedious](#tedious)\n* [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server](#microsoft--contributors-node-v8-driver-for-nodejs-for-sql-server)\n\n### Connections\n\n* [ConnectionPool](#connections-1)\n* [connect](#connect-callback)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute-procedure-callback)\n* [input](#input-name-type-value)\n* [output](#output-name-type-value)\n* [pipe](#pipe-stream)\n* [query](#query-command-callback)\n* [batch](#batch-batch-callback)\n* [bulk](#bulk-table-callback)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin-isolationlevel-callback)\n* [commit](#commit-callback)\n* [rollback](#rollback-callback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#input-name-type)\n* [output](#output-name-type)\n* [prepare](#prepare-statement-callback)\n* [execute](#execute-values-callback)\n* [unprepare](#unprepare-callback)\n\n### Other\n\n* [CLI](#cli)\n* [Geography and Geometry](#geography-and-geometry)\n* [Table-Valued Parameter](#table-valued-parameter-tvp)\n* [Affected Rows](#affected-rows)\n* [JSON support](#json-support)\n* [Errors](#errors)\n* [Informational messages](#informational-messages)\n* [Metadata](#metadata)\n* [Data Types](#data-types)\n* [SQL injection](#sql-injection)\n* [Known Issues](#known-issues)\n* [Contributing](https://github.com/tediousjs/node-mssql/wiki/Contributing)\n* [3.x to 4.x changes](#3x-to-4x-changes)\n* [3.x Documentation](https://github.com/tediousjs/node-mssql/blob/1893969195045a250f0fdeeb2de7f30dcf6689ad/README.md)\n\n## Examples\n\n### Config\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...',\n\n    options: {\n        encrypt: true // Use this if you're on Windows Azure\n    }\n}\n```\n\n\n### Async/Await\n\n```javascript\nconst sql = require('mssql')\n\n(async function () {\n    try {\n        let pool = await sql.connect(config)\n        let result1 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .query('select * from mytable where id = @input_parameter')\n            \n        console.dir(result1)\n    \n        // Stored procedure\n        \n        let result2 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .output('output_parameter', sql.VarChar(50))\n            .execute('procedure_name')\n        \n        console.dir(result2)\n    } catch (err) {\n        // ... error checks\n    }\n})()\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Promises\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(pool => {\n    // Query\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .query('select * from mytable where id = @input_parameter')\n}).then(result => {\n    console.dir(result)\n    \n    // Stored procedure\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nNative Promise is used by default. You can easily change this with `sql.Promise = require('myownpromisepackage')`.\n\n### ES6 Tagged template literals\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(() => {\n    return sql.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n### Callbacks\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    // Query\n\n    new sql.Request().query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n    // Stored Procedure\n\n    new sql.Request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Streaming\n\nIf you plan to work with large amount of rows, you should always use streaming. Once you enable this, you must listen for events to receive data.\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    const request = new sql.Request()\n    request.stream = true // You can set streaming differently for each request\n    request.query('select * from verylargetable') // or request.execute(procedure)\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n## Connection Pools\n\nUsing a single connection pool for your application/service is recommended.\nInstantiating a pool with a callback, or immediately calling `.connect`, is asynchronous to ensure a connection can be\nestablished before returning. From that point, you're able to acquire connections as normal:  \n\n```javascript\nconst sql = require('mssql')\n\n// async/await style:\nconst pool1 = new sql.ConnectionPool(config).connect();\n\npool1.on('error', err => {\n    // ... error handler\n})\n\nasync function messageHandler() {\n    await pool1; // ensures that the pool has been created\n    try {\n    \tconst request = pool1.request(); // or: new sql.Request(pool1)\n    \tconst result = request.query('select 1 as number')\n    \tconsole.dir(result)\n    \treturn result;\n\t} catch (err) {\n        console.error('SQL error', err);\n\t}\n}\n\n// promise style:\nconst pool2 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n});\n\npool2.on('error', err => {\n    // ... error handler\n})\n\nfunction runStoredProcedure() {\n    return pool2.then((pool) => {\n\t\tpool.request() // or: new sql.Request(pool2)\n\t\t.input('input_parameter', sql.Int, 10)\n\t\t.output('output_parameter', sql.VarChar(50))\n\t\t.execute('procedure_name', (err, result) => {\n\t\t\t// ... error checks\n\t\t\tconsole.dir(result)\n\t\t})\n    });\n}\n```\n\nAwaiting or `.then`ing the pool creation is a safe way to ensure that the pool is always ready, without knowing where it\nis needed first. In practice, once the pool is created then there will be no delay for the next operation.\n\n**ES6 Tagged template literals**\n\n```javascript\nnew sql.ConnectionPool(config).connect().then(pool => {\n    return pool.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n## Configuration\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n### General (same for all drivers)\n\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **domain** - Once you set domain, driver will connect to SQL Server using domain login.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **connectionTimeout** - Connection timeout in ms (default: `15000`).\n- **requestTimeout** - Request timeout in ms (default: `15000`). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second. When passed via connection string, the key must be `request timeout`\n- **stream** - Stream recordsets/rows instead of returning them all at once as an argument of callback (default: `false`). You can also enable streaming for each request independently (`request.stream = true`). Always set to `true` if you plan to work with large amount of rows.\n- **parseJSON** - Parse JSON recordsets to JS objects (default: `false`). For more information please see section [JSON support](#json-support).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimum of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\nComplete list of pool options can be found [here](https://github.com/coopernurse/node-pool).\n\n### Formats\n\nIn addition to configuration object there is an option to pass config as a connection string. Two formats of connection string are supported.\n\n##### Classic Connection String\n\n```\nServer=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true\nDriver=msnodesqlv8;Server=(local)\\INSTANCE;Database=database;UID=DOMAIN\\username;PWD=password;Encrypt=true\n```\n\n##### Connection String URI\n\n```\nmssql://username:password@localhost:1433/database?encrypt=true\nmssql://username:password@localhost/INSTANCE/database?encrypt=true&domain=DOMAIN&driver=msnodesqlv8\n```\n\n## Drivers\n\n### Tedious\n\nDefault driver, actively maintained and production ready. Platform independent, runs everywhere Node.js runs. Officially supported by Microsoft.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the configured tedious `Connection`. It can be used for attaching event handlers like in this example:\n```js\nrequire('mssql').connect(...config, beforeConnect: conn => {\n  conn.once('connect', err => { err ? console.error(err) : console.log('mssql connected')})\n  conn.once('end', err => { err ? console.error(err) : console.log('mssql disconnected')})\n}})\n```\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1434 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `false`).\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_1`, `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n- **options.appName** - Application name used for SQL server logging.\n- **options.abortTransactionOnError** - A boolean determining whether to rollback a transaction automatically if any error is encountered during the given transaction's execution. This sets the value for `XACT_ABORT` during the initial SQL phase of a connection.\n\nMore information about Tedious specific options: http://tediousjs.github.io/tedious/api-connection.html\n\n### Microsoft / Contributors Node V8 Driver for Node.js for SQL Server\n\n**Requires Node.js 0.12.x or newer. Windows only.** This driver is not part of the default package and must be installed separately by `npm install msnodesqlv8`. To use this driver, use this require syntax: `const sql = require('mssql/msnodesqlv8')`.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the connection configuration, that can be modified to pass extra parameters to the driver's `open()` method.\n- **connectionString** - Connection string (default: see below).\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not to use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n## Connections\n\nInternally, each `ConnectionPool` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool. Connection health check is built-in so once the dead connection is discovered, it is immediately replaced with a new one.\n\n**IMPORTANT**: Always attach an `error` listener to created connection. Whenever something goes wrong with the connection it will emit an error and if there is no listener it will crash your application with an uncaught error.\n\n```javascript\nconst pool = new sql.ConnectionPool({ /* config */ })\n```\n\n### Events\n\n- **error(err)** - Dispatched on connection error.\n\n---------------------------------------\n\n### connect ([callback])\n\nCreate a new connection pool. The initial probe connection is created to find out whether the configuration is valid.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after initial probe connection has established, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst pool = new sql.ConnectionPool({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n})\n\npool.connect(err => {\n    // ...\n})\n```\n\n__Errors__\n- ELOGIN (`ConnectionError`) - Login failed.\n- ETIMEOUT (`ConnectionError`) - Connection timeout.\n- EALREADYCONNECTED (`ConnectionError`) - Database is already connected!\n- EALREADYCONNECTING (`ConnectionError`) - Already connecting to database!\n- EINSTLOOKUP (`ConnectionError`) - Instance lookup failed.\n- ESOCKET (`ConnectionError`) - Socket error.\n\n---------------------------------------\n\n### close()\n\nClose all active connections in the pool.\n\n__Example__\n\n```javascript\npool.close()\n```\n\n## Request\n\n```javascript\nconst request = new sql.Request(/* [pool or transaction] */)\n```\n\nIf you omit pool/transaction argument, global pool is used instead.\n\n### Events\n\n- **recordset(columns)** - Dispatched when metadata for new recordset are parsed.\n- **row(row)** - Dispatched when new row is parsed.\n- **done(returnValue)** - Dispatched when request is complete.\n- **error(err)** - Dispatched on error.\n- **info(message)** - Dispatched on informational message.\n\n---------------------------------------\n\n### execute (procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.input('input_parameter', sql.Int, value)\nrequest.output('output_parameter', sql.Int)\nrequest.execute('procedure_name', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordsets.length) // count of recordsets returned by the procedure\n    console.log(result.recordsets[0].length) // count of rows contained in first recordset\n    console.log(result.recordset) // first recordset from result.recordsets\n    console.log(result.returnValue) // procedure return value\n    console.log(result.output) // key/value collection of output values\n    console.log(result.rowsAffected) // array of numbers, each number represents the number of rows affected by executed statemens\n\n    // ...\n})\n```\n\n__Errors__\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### input (name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automatically decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value)\nrequest.input('input_parameter', sql.Int, value)\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define your own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text)\n```\n\nYou can also overwrite the default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt)\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int)\nrequest.output('output_parameter', sql.VarChar(50), 'abc')\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### pipe (stream)\n\nSets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n\n__Arguments__\n\n- **stream** - Writable stream in object mode.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.pipe(stream)\nrequest.query('select * from mytable')\nstream.on('error', err => {\n    // ...\n})\nstream.on('finish', () => {\n    // ...\n})\n```\n\n---------------------------------------\n\n### query (command, [callback])\n\nExecute the SQL command. To execute commands like `create procedure` or if you plan to work with local temporary tables, use [batch](#batch-batch-callback) instead.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n\n    // ...\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number; select 2 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n    console.log(result.recordsets[0][0].number) // return 1\n    console.log(result.recordsets[1][0].number) // return 2\n})\n```\n\n**NOTE**: To get number of rows affected by the statement(s), see section [Affected Rows](#affected-rows).\n\n---------------------------------------\n\n### batch (batch, [callback])\n\nExecute the SQL command. Unlike [query](#query-command-callback), it doesn't use `sp_executesql`, so is not likely that SQL Server will reuse the execution plan it generates for the SQL. Use this only in special cases, for example when you need to execute commands like `create procedure` which can't be executed with [query](#query-command-callback) or if you're executing statements longer than 4000 chars on SQL Server 2000. Also you should use this if you're plan to work with local temporary tables ([more information here](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)).\n\nNOTE: Table-Valued Parameter (TVP) is not supported in batch.\n\n__Arguments__\n\n- **batch** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.batch('create procedure #temporary as select * from table', (err, result) => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\nYou can enable multiple recordsets in queries with the `request.multiple = true` command.\n\n---------------------------------------\n\n### bulk (table, [callback])\n\nPerform a bulk insert.\n\n__Arguments__\n\n- **table** - `sql.Table` instance.\n- **callback(err, rowCount)** - A callback which is called after bulk insert has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst table = new sql.Table('table_name') // or temporary table, e.g. #temptable\ntable.create = true\ntable.columns.add('a', sql.Int, {nullable: true, primary: true})\ntable.columns.add('b', sql.VarChar(50), {nullable: false})\ntable.rows.add(777, 'test')\n\nconst request = new sql.Request()\nrequest.bulk(table, (err, result) => {\n    // ... error checks\n})\n```\n\n**IMPORTANT**: Always indicate whether the column is nullable or not!\n\n**TIP**: If you set `table.create` to `true`, module will check if the table exists before it start sending data. If it doesn't, it will automatically create it. You can specify primary key columns by setting `primary: true` to column's options. Primary key constraint on multiple columns is supported.\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n__Errors__\n- ENAME (`RequestError`) - Table name must be specified for bulk insert.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### cancel()\n\nCancel currently executing request. Return `true` if cancellation packet was send successfully.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', (err, result) => {\n    console.log(err instanceof sql.RequestError)  // true\n    console.log(err.message)                      // Cancelled.\n    console.log(err.code)                         // ECANCEL\n\n    // ...\n})\n\nrequest.cancel()\n```\n\n## Transaction\n\n**IMPORTANT:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is acquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\n```\n\nIf you omit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    const request = new sql.Request(transaction)\n    request.query('insert into mytable (mycolumn) values (12345)', (err, result) => {\n        // ... error checks\n\n        transaction.commit(err => {\n            // ... error checks\n\n            console.log(\"Transaction committed.\")\n        })\n    })\n})\n```\n\nTransaction can also be created by `const transaction = pool.transaction()`. Requests can also be created by `const request = transaction.request()`.\n\n__Aborted transactions__\n\nThis example shows how you should correctly handle transaction errors when `abortTransactionOnError` (`XACT_ABORT`) is enabled. Added in 2.0.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    let rolledBack = false\n\n    transaction.on('rollback', aborted => {\n        // emited with aborted === true\n\n        rolledBack = true\n    })\n\n    new sql.Request(transaction)\n    .query('insert into mytable (bitcolumn) values (2)', (err, result) => {\n        // insert should fail because of invalid value\n\n        if (err) {\n            if (!rolledBack) {\n                transaction.rollback(err => {\n                    // ... error checks\n                })\n            }\n        } else {\n            transaction.commit(err => {\n                // ... error checks\n            })\n        }\n    })\n})\n```\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback(aborted)** - Dispatched on successful rollback with an argument determining if the transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### begin ([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYBEGUN (`TransactionError`) - Transaction has already begun.\n\n---------------------------------------\n\n### commit ([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has committed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.commit(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't commit transaction. There is a request in progress.\n\n---------------------------------------\n\n### rollback ([callback])\n\nRollback a transaction. If the queue isn't empty, all queued requests will be Cancelled and the transaction will be marked as aborted.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.rollback(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't rollback transaction. There is a request in progress.\n\n## Prepared Statement\n\n**IMPORTANT:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is acquired from the connection pool and all subsequent executions are executed exclusively on this connection. After you call `unprepare`, the connection is then released back to the connection pool.\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\n```\n\nIf you omit the connection argument, the global connection is used instead.\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        ps.unprepare(err => {\n            // ... error checks\n\n        })\n    })\n})\n```\n\n**IMPORTANT**: Remember that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement!\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n### input (name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int)\nps.input('input_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int)\nps.output('output_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### prepare (statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.prepare('select @param as value', err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYPREPARED (`PreparedStatementError`) - Statement is already prepared.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n\n---------------------------------------\n\n### execute (values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        console.log(result.recordset[0].value) // return 12345\n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\nYou can also stream executed request.\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.stream = true\n    const request = ps.execute({param: 12345})\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n        \n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\n**TIP**: To learn more about how number of affected rows works, see section [Affected Rows](#affected-rows).\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n\n---------------------------------------\n\n### unprepare ([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.unprepare(err => {\n        // ... error checks\n\n    })\n})\n```\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n\n## CLI\n\nBefore you can start using CLI, you must install `mssql` globally with `npm install mssql -g`. Once you do that you will be able to execute `mssql` command.\n\n__Setup__\n\nCreate a `.mssql.json` configuration file (anywhere). Structure of the file is the same as the standard configuration object.\n\n```json\n{\n    \"user\": \"...\",\n    \"password\": \"...\",\n    \"server\": \"localhost\",\n    \"database\": \"...\"\n}\n```\n\n__Example__\n\n```shell\necho \"select * from mytable\" | mssql /path/to/config\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}]]\n```\n\nYou can also query for multiple recordsets.\n\n```shell\necho \"select * from mytable; select * from myothertable\" | mssql\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}],[{\"id\":15,\"name\":\"Product name\"}]]\n```\n\nIf you omit config path argument, mssql will try to load it from current working directory.\n\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n\n{ srid: 0,\n  version: 1,\n  points:\n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nconst tvp = new sql.Table() // You can optionally specify table type name in the first argument.\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50))\ntvp.columns.add('b', sql.Int)\n\n// Add rows\ntvp.rows.add('hello tvp', 777) // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('tvp', tvp)\nrequest.execute('MyCustomStoredProcedure', (err, result) => {\n    // ... error checks\n\n    console.dir(result.recordsets[0][0]) // {a: 'hello tvp', b: 777}\n})\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n## Affected Rows\n\nIf you're performing `INSERT`, `UPDATE` or `DELETE` in a query, you can read number of affected rows. The `rowsAffected` variable is an array of numbers. Each number represents number of affected rows by a single statement.\n\n__Example using Promises__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100').then(result => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using callbacks__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100', (err, result) => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using streaming__\n\n```javascript\nconst request = new sql.Request()\nrequest.stream = true\nrequest.query('update myAwesomeTable set awesomness = 100')\nrequest.on('done', result => {\n    console.log(result.rowsAffected)\n})\n```\n\n## JSON support\n\nSQL Server 2016 introduced built-in JSON serialization. By default, JSON is returned as a plain text in a special column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B`.\n\nExample\n```sql\nSELECT\n    1 AS 'a.b.c',\n    2 AS 'a.b.d',\n    3 AS 'a.x',\n    4 AS 'a.y'\nFOR JSON PATH\n```\n\nResults in:\n```javascript\nrecordset = [ { 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B': '{\"a\":{\"b\":{\"c\":1,\"d\":2},\"x\":3,\"y\":4}}' } ]\n```\n\nYou can enable built-in JSON parser with `config.parseJSON = true`. Once you enable this, recordset will contain rows of parsed JS objects. Given the same example, result will look like this:\n```javascript\nrecordset = [ { a: { b: { c: 1, d: 2 }, x: 3, y: 4 } } ]\n```\n\n**IMPORTANT**: In order for this to work, there must be exactly one column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B` in the recordset.\n\nMore information about JSON support can be found in [official documentation](https://msdn.microsoft.com/en-us/library/dn921882.aspx).\n\n## Errors\n\nThere are 4 types of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, committing and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and its original stack may be cropped. You can always access original error with `err.originalError`.\n\nSQL Server may generate more than one error for one request so you can access preceding errors with `err.precedingErrors`.\n\n### Error Codes\n\nEach known error has `name`, `code` and `message` properties.\n\nName | Code | Message\n:--- | :--- | :---\n`ConnectionError` | ELOGIN | Login failed.\n`ConnectionError` | ETIMEOUT | Connection timeout.\n`ConnectionError` | EDRIVER | Unknown driver.\n`ConnectionError` | EALREADYCONNECTED | Database is already connected!\n`ConnectionError` | EALREADYCONNECTING | Already connecting to database!\n`ConnectionError` | ENOTOPEN | Connection not yet open.\n`ConnectionError` | EINSTLOOKUP | Instance lookup failed.\n`ConnectionError` | ESOCKET | Socket error.\n`ConnectionError` | ECONNCLOSED | Connection is closed.\n`TransactionError` | ENOTBEGUN | Transaction has not begun.\n`TransactionError` | EALREADYBEGUN | Transaction has already begun.\n`TransactionError` | EREQINPROG | Can't commit/rollback transaction. There is a request in progress.\n`TransactionError` | EABORT | Transaction has been aborted.\n`RequestError` | EREQUEST | Message from SQL Server. Error object contains additional details.\n`RequestError` | ECANCEL | Cancelled.\n`RequestError` | ETIMEOUT | Request timeout.\n`RequestError` | EARGS | Invalid number of arguments.\n`RequestError` | EINJECT | SQL injection warning.\n`RequestError` | ENOCONN | No connection is specified for that request.\n`PreparedStatementError` | EARGS | Invalid number of arguments.\n`PreparedStatementError` | EINJECT | SQL injection warning.\n`PreparedStatementError` | EALREADYPREPARED | Statement is already prepared.\n`PreparedStatementError` | ENOTPREPARED | Statement is not prepared.\n\n### Detailed SQL Errors\n\nSQL errors (`RequestError` with `err.code` equal to `EREQUEST`) contains additional details.\n\n- **err.number** - The error number.\n- **err.state** - The error state, used as a modifier to the number.\n- **err.class** - The class (severity) of the error. A class of less than 10 indicates an informational message. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **err.lineNumber** - The line number in the SQL batch or stored procedure that caused the error. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **err.serverName** - The server name.\n- **err.procName** - The stored procedure name.\n\n## Informational messages\n\nTo receive informational messages generated by `PRINT` or `RAISERROR` commands use:\n\n```javascript\nconst request = new sql.Request()\nrequest.on('info', info => {\n    console.dir(info)\n})\nrequest.query('print \\'Hello world.\\';', (err, result) => {\n    // ...\n})\n```\n\nStructure of informational message:\n\n- **info.message** - Message.\n- **info.number** - The message number.\n- **info.state** - The message state, used as a modifier to the number.\n- **info.class** - The class (severity) of the message. Equal or lower than 10. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **info.lineNumber** - The line number in the SQL batch or stored procedure that generated the message. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **info.serverName** - The server name.\n- **info.procName** - The stored procedure name.\n\n## Metadata\n\nRecordset metadata are accessible through the `recordset.columns` property.\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select convert(decimal(18, 4), 1) as first, \\'asdf\\' as second', (err, result) => {\n    console.dir(result.recordset.columns)\n\n    console.log(result.recordset.columns.first.type === sql.Decimal) // true\n    console.log(result.recordset.columns.second.type === sql.VarChar) // true\n})\n```\n\nColumns structure for example above:\n\n```javascript\n{\n    first: {\n        index: 0,\n        name: 'first',\n        length: 17,\n        type: [sql.Decimal],\n        scale: 4,\n        precision: 18,\n        nullable: true,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    },\n    second: {\n        index: 1,\n        name: 'second',\n        length: 4,\n        type: [sql.VarChar],\n        nullable: false,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    }\n}\n```\n\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\")               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\")           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\")      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar)                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\")              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33)              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33)          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33)       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date())        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date())     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Variant\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length. Types `sql.XML` and `sql.Variant` are not supported as input parameters.\n\n## SQL injection\n\nThis module has built-in SQL injection protection. Always use parameters or tagged template literals to pass sanitized values to your queries.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('myval', sql.VarChar, '-- commented')\nrequest.query('select @myval as myval', (err, result) => {\n    console.dir(result)\n})\n```\n\n## Known issues\n\n### Tedious\n\n- If you're facing problems with connecting SQL Server 2000, try setting the default TDS version to 7.1 with `config.options.tdsVersion = '7_1'` ([issue](https://github.com/tediousjs/node-mssql/issues/36))\n- If you're executing a statement longer than 4000 chars on SQL Server 2000, always use [batch](#batch-batch-callback) instead of [query](#query-command-callback) ([issue](https://github.com/tediousjs/node-mssql/issues/68))\n\n### msnodesqlv8\n\n- msnodesqlv8 has problem with errors during transactions - [reported](https://github.com/tediousjs/node-mssql/issues/77).\n- msnodesqlv8 doesn't support [detailed SQL errors](#detailed-sql-errors).\n\n## 3.x to 4.x changes\n\n- Library & tests are rewritten to ES6.\n- `Connection` was renamed to `ConnectionPool`.\n- Drivers are no longer loaded dynamically so the library is now compatible with Webpack. To use `msnodesqlv8` driver, use `const sql = require('mssql/msnodesqlv8')` syntax.\n- Every callback/resolve now returns `result` object only. This object contains `recordsets` (array of recordsets), `recordset` (first recordset from array of recordsets), `rowsAffected` (array of numbers representig number of affected rows by each insert/update/delete statement) and `output` (key/value collection of output parameters' values).\n- Affected rows are now returned as an array. A separate number for each SQL statement.\n- Directive `multiple: true` was removed.\n- `Transaction` and `PreparedStatement` internal queues was removed.\n- ConnectionPool no longer emits `connect` and `close` events.\n- Removed verbose and debug mode.\n- Removed support for `tds` and `msnodesql` drivers.\n- Removed support for Node versions lower than 4.\n\n[npm-image]: https://img.shields.io/npm/v/mssql.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/mssql\n[downloads-image]: https://img.shields.io/npm/dm/mssql.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/mssql\n[david-image]: https://img.shields.io/david/tediousjs/node-mssql.svg?style=flat-square\n[david-url]: https://david-dm.org/tediousjs/node-mssql\n[travis-image]: https://img.shields.io/travis/tediousjs/node-mssql/master.svg?style=flat-square&label=unit\n[travis-url]: https://travis-ci.org/tediousjs/node-mssql\n[appveyor-image]: https://img.shields.io/appveyor/ci/patriksimek/node-mssql-o4dhf/master.svg?style=flat-square&label=integration\n[appveyor-url]: https://ci.appveyor.com/project/patriksimek/node-mssql-o4dhf\n\n[tedious-url]: https://www.npmjs.com/package/tedious\n[msnodesqlv8-url]: https://www.npmjs.com/package/msnodesqlv8\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@4.3.4","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-b0dapUZql8WHCxHBAvWTf1k33UGOdMXyseW6SAGhneK6Z0qpsnVHU4I3zK7sipZeIzwROOrfH8bkMgK4ArsddA==","shasum":"fbeb8929afb953ca88b65653825488c60e7256bc","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.3.4.tgz","fileCount":19,"unpackedSize":197113,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcgwahCRA9TVsSAnZWagAAluYP/AwLwtrUHzf4Ptu6HaGu\nKG+yZ9894KbiQAJslmamiidjBBuL3efUENEPSZ7TVzWdr5T1Gy9DM2iWBbIV\nFlOyuNx482Qkpg1aFNZie9dv93ipSDkYJLGIkMLsm/P2eZrnRoAUBliw/4NW\nEjDgbbfUfRkVIXymqumZqQW9GnfCBW4BmMC6HYUyRbWaCiqpK4/FcaXEOt/g\nmkEqLKWCRtlQ5Id0BB/GqfvomlV3c/D+2gGqWXS7wp3fYEIw1Nb9Lf9JbWvE\n2YBSa10GZybVVjsx2JC403KI3JJtViaRS6hp17/99V5JBfkvgu1WwvWHA7MB\nL0FhenZsNjFFev/ZxaAKSg4qxf9CH6coDjqv1SI36FJrAewvp1R4XoIO7o8i\n9xR+hnulg264MZ6X/ZTlMZ34rlpq1Pq5b1llTWYtcm0DjUXdLpwKMEaZhl9x\nx4xB8Ah6dNxsZQZqGQpKKir//V2rbyLSdFpjO7+Ytj5D1bDW3uuDdw8szHUQ\n+La5v7cOz4NaA/LqoGrBrnfclLFA1Ww4nyJgrwhQG39ZMiGATpthYMCsm4Fl\nMdy4KZXtfzMrhVbs6gVimOk2+0CtHTB9PN36jR6DMdWpzR1S9vb22rTgP98o\n5+7qs//Bh2Vt2PvWGUVGGb553qu0UNkMNK+rF2EztDQvi/UzEpxfwuvvrLiT\ntJgU\r\n=8gWT\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_4.3.4_1552090783485_0.7101041352136375"},"_hasShrinkwrap":false},"5.0.1":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"5.0.1","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.6.1","tedious":"^4.2.0"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"ec3494d1346dfcb7c97b3cea4472fc1f3e80d805","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@5.0.1","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-aI60prpiAR8Sw3WgaXJJ0JSQL+x+iAusASXyHqxxQQvH3NVeQlzjQNSWq1w0VzTydrp4z/YCDL5SlFPBWnIRMA==","shasum":"dfc63be687b9f0826fed162781a3fab4d0520a12","tarball":"https://registry.npmjs.org/mssql/-/mssql-5.0.1.tgz","fileCount":19,"unpackedSize":202875,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcgwflCRA9TVsSAnZWagAADlcP/R/GsV2aTDE9SJcKxpBE\n9amskUK0eMcMzFj5goNlH0J0YqY8NdHpzfUfzmEBBqWAtdx9JAi9Y/b7RrUX\nLLtgAH28MBklQpU1kGOX09IWQS3+4oJle6cD5JnCfsI522hh9rCukjPEIXn2\ndfsgVSOYoyFuULlwXomvlKoMwkLtvQeHDzdscKejJf+sSCdgmocxCmIIadVk\nytN22uty+/K36fatsRV1fOi/S1M3TdVAcDYp1jmMXrxE+UxzqNQB1NcyqOZK\nRJFhtPLu4iIliz+QJ2VOwglF/YXWbi0b5W/lY31wZvmZeKl5UwCLgE6Hjwyn\n/lc6Hd3ctTiU2L97g+JGwN2pxsiFQXx0EgEWTjvTt4Rhewy4jCWeVQ83K4i1\nLrJZQEl3HGifX/pP3JUcGCdJfRdUtUQbNQ/f11UyktqesrpWTayV0krS4+QK\ng+1JVepSqqeEyrIzTaP5ich3gesIDXzkxrPY5WTUFT3FlllYAINpR1Lo10Y0\nqVMOq4Pucvheh/c/6x84VG//ynmzZjR93CCKlRtaVH8bfhb6TrgsQ8lvf7Rg\ncP5vndeGnlbpapDdE6BHgEbjz5zwLf/YhqhMLVrhrEoSQI52PTcOpcoBqJdX\n6MiPqKc4RPyiTpIH1ejEUJoI7xb23y+AGFqccKJ3OzJy1Ydpgu59jAexD8qs\nQCQB\r\n=5InN\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_5.0.1_1552091108904_0.5358735186719585"},"_hasShrinkwrap":false},"6.0.0-alpha.3":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"6.0.0-alpha.3","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^4","tarn":"^1.1.4","tedious":"^6"},"devDependencies":{"mocha":"^6","standard":"^12"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"fd7999fb805f262be212c1952008d02ea18ec09e","readme":"# node-mssql\n\nMicrosoft SQL Server client for Node.js\n\n[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Travis CI][travis-image]][travis-url] [![Appveyor CI][appveyor-image]][appveyor-url] [![Join the chat at https://gitter.im/patriksimek/node-mssql](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/patriksimek/node-mssql?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSupported TDS drivers:\n- [Tedious][tedious-url] (pure JavaScript - Windows/macOS/Linux, default)\n- [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server][msnodesqlv8-url] (native - Windows only)\n\n## Installation\n\n    npm install mssql\n\n## Quick Example\n\n```javascript\nconst sql = require('mssql')\n\nasync () => {\n    try {\n        await sql.connect('mssql://username:password@localhost/database')\n        const result = await sql.query`select * from mytable where id = ${value}`\n        console.dir(result)\n    } catch (err) {\n        // ... error checks\n    }\n}\n```\n\nIf you're on Windows Azure, add `?encrypt=true` to your connection string. See [docs](#configuration) to learn more.\n\n## Documentation\n\n### Examples\n\n* [Async/Await](#asyncawait)\n* [Promises](#promises)\n* [ES6 Tagged template literals](#es6-tagged-template-literals)\n* [Callbacks](#callbacks)\n* [Streaming](#streaming)\n* [Connection Pools](#connection-pools)\n\n### Configuration\n\n* [General](#general-same-for-all-drivers)\n* [Formats](#formats)\n\n### Drivers\n\n* [Tedious](#tedious)\n* [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server](#microsoft--contributors-node-v8-driver-for-nodejs-for-sql-server)\n\n### Connections\n\n* [ConnectionPool](#connections-1)\n* [connect](#connect-callback)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute-procedure-callback)\n* [input](#input-name-type-value)\n* [output](#output-name-type-value)\n* [pipe](#pipe-stream)\n* [query](#query-command-callback)\n* [batch](#batch-batch-callback)\n* [bulk](#bulk-table-callback)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin-isolationlevel-callback)\n* [commit](#commit-callback)\n* [rollback](#rollback-callback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#input-name-type)\n* [output](#output-name-type)\n* [prepare](#prepare-statement-callback)\n* [execute](#execute-values-callback)\n* [unprepare](#unprepare-callback)\n\n### Other\n\n* [CLI](#cli)\n* [Geography and Geometry](#geography-and-geometry)\n* [Table-Valued Parameter](#table-valued-parameter-tvp)\n* [Affected Rows](#affected-rows)\n* [JSON support](#json-support)\n* [Errors](#errors)\n* [Informational messages](#informational-messages)\n* [Metadata](#metadata)\n* [Data Types](#data-types)\n* [SQL injection](#sql-injection)\n* [Known Issues](#known-issues)\n* [Contributing](https://github.com/tediousjs/node-mssql/wiki/Contributing)\n* [4.x to 5.x changes](#4x-to-5x-changes)\n* [3.x to 4.x changes](#3x-to-4x-changes)\n* [3.x Documentation](https://github.com/tediousjs/node-mssql/blob/1893969195045a250f0fdeeb2de7f30dcf6689ad/README.md)\n\n## Examples\n\n### Config\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...',\n}\n```\n\n\n### Async/Await\n\n```javascript\nconst sql = require('mssql')\n\n(async function () {\n    try {\n        let pool = await sql.connect(config)\n        let result1 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .query('select * from mytable where id = @input_parameter')\n            \n        console.dir(result1)\n    \n        // Stored procedure\n        \n        let result2 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .output('output_parameter', sql.VarChar(50))\n            .execute('procedure_name')\n        \n        console.dir(result2)\n    } catch (err) {\n        // ... error checks\n    }\n})()\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Promises\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(pool => {\n    // Query\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .query('select * from mytable where id = @input_parameter')\n}).then(result => {\n    console.dir(result)\n    \n    // Stored procedure\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nNative Promise is used by default. You can easily change this with `sql.Promise = require('myownpromisepackage')`.\n\n### ES6 Tagged template literals\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(() => {\n    return sql.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n### Callbacks\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    // Query\n\n    new sql.Request().query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n    // Stored Procedure\n\n    new sql.Request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Streaming\n\nIf you plan to work with large amount of rows, you should always use streaming. Once you enable this, you must listen for events to receive data.\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    const request = new sql.Request()\n    request.stream = true // You can set streaming differently for each request\n    request.query('select * from verylargetable') // or request.execute(procedure)\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nWhen streaming large sets of data you want to back-off or chunk the amount of data you're processing\n to prevent memory exhaustion issues; you can use the `Request.pause()` function to do this. Here is\n an example of managing rows in batches of 15:\n\n```javascript\nlet rowsToProcess = [];\nrequest.on('row', row => {\n  rowsToProcess.push(row);\n  if (rowsToProcess.length >= 15) {\n    request.pause();\n    processRows();\n  }\n});\nrequest.on('done', () => {\n    processRows();\n});\n\nfunction processRows() {\n  // process rows\n  rowsToProcess = [];\n  request.resume();\n}\n```\n\n## Connection Pools\n\nUsing a single connection pool for your application/service is recommended.\nInstantiating a pool with a callback, or immediately calling `.connect`, is asynchronous to ensure a connection can be\nestablished before returning. From that point, you're able to acquire connections as normal:  \n\n```javascript\nconst sql = require('mssql')\n\n// async/await style:\nconst pool1 = new sql.ConnectionPool(config).connect();\n\npool1.on('error', err => {\n    // ... error handler\n})\n\nasync function messageHandler() {\n    await pool1; // ensures that the pool has been created\n    try {\n    \tconst request = pool1.request(); // or: new sql.Request(pool1)\n    \tconst result = request.query('select 1 as number')\n    \tconsole.dir(result)\n    \treturn result;\n\t} catch (err) {\n        console.error('SQL error', err);\n\t}\n}\n\n// promise style:\nconst pool2 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n}).connect();\n\npool2.on('error', err => {\n    // ... error handler\n})\n\nfunction runStoredProcedure() {\n    return pool2.then((pool) => {\n\t\tpool.request() // or: new sql.Request(pool2)\n\t\t.input('input_parameter', sql.Int, 10)\n\t\t.output('output_parameter', sql.VarChar(50))\n\t\t.execute('procedure_name', (err, result) => {\n\t\t\t// ... error checks\n\t\t\tconsole.dir(result)\n\t\t})\n    });\n}\n```\n\nAwaiting or `.then`ing the pool creation is a safe way to ensure that the pool is always ready, without knowing where it\nis needed first. In practice, once the pool is created then there will be no delay for the next operation.\n\n**ES6 Tagged template literals**\n\n```javascript\nnew sql.ConnectionPool(config).connect().then(pool => {\n    return pool.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n## Configuration\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n### General (same for all drivers)\n\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **domain** - Once you set domain, driver will connect to SQL Server using domain login.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **connectionTimeout** - Connection timeout in ms (default: `15000`).\n- **requestTimeout** - Request timeout in ms (default: `15000`). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second. When passed via connection string, the key must be `request timeout`\n- **stream** - Stream recordsets/rows instead of returning them all at once as an argument of callback (default: `false`). You can also enable streaming for each request independently (`request.stream = true`). Always set to `true` if you plan to work with large amount of rows.\n- **parseJSON** - Parse JSON recordsets to JS objects (default: `false`). For more information please see section [JSON support](#json-support).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimum of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\nComplete list of pool options can be found [here](https://github.com/vincit/tarn.js/#usage).\n\n### Formats\n\nIn addition to configuration object there is an option to pass config as a connection string. Two formats of connection string are supported.\n\n##### Classic Connection String\n\n```\nServer=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true\nDriver=msnodesqlv8;Server=(local)\\INSTANCE;Database=database;UID=DOMAIN\\username;PWD=password;Encrypt=true\n```\n\n##### Connection String URI\n\n```\nmssql://username:password@localhost:1433/database?encrypt=true\nmssql://username:password@localhost/INSTANCE/database?encrypt=true&domain=DOMAIN&driver=msnodesqlv8\n```\n\n## Drivers\n\n### Tedious\n\nDefault driver, actively maintained and production ready. Platform independent, runs everywhere Node.js runs. Officially supported by Microsoft.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the configured tedious `Connection`. It can be used for attaching event handlers like in this example:\n```js\nrequire('mssql').connect(...config, beforeConnect: conn => {\n  conn.once('connect', err => { err ? console.error(err) : console.log('mssql connected')})\n  conn.once('end', err => { err ? console.error(err) : console.log('mssql disconnected')})\n}})\n```\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1434 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `true`).\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_1`, `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n- **options.appName** - Application name used for SQL server logging.\n- **options.abortTransactionOnError** - A boolean determining whether to rollback a transaction automatically if any error is encountered during the given transaction's execution. This sets the value for `XACT_ABORT` during the initial SQL phase of a connection.\n\nMore information about Tedious specific options: http://tediousjs.github.io/tedious/api-connection.html\n\n### Microsoft / Contributors Node V8 Driver for Node.js for SQL Server\n\n**Requires Node.js 0.12.x or newer. Windows only.** This driver is not part of the default package and must be installed separately by `npm install msnodesqlv8`. To use this driver, use this require syntax: `const sql = require('mssql/msnodesqlv8')`.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the connection configuration, that can be modified to pass extra parameters to the driver's `open()` method.\n- **connectionString** - Connection string (default: see below).\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not to use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n## Connections\n\nInternally, each `ConnectionPool` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool. Connection health check is built-in so once the dead connection is discovered, it is immediately replaced with a new one.\n\n**IMPORTANT**: Always attach an `error` listener to created connection. Whenever something goes wrong with the connection it will emit an error and if there is no listener it will crash your application with an uncaught error.\n\n```javascript\nconst pool = new sql.ConnectionPool({ /* config */ })\n```\n\n### Events\n\n- **error(err)** - Dispatched on connection error.\n\n---------------------------------------\n\n### connect ([callback])\n\nCreate a new connection pool. The initial probe connection is created to find out whether the configuration is valid.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after initial probe connection has established, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst pool = new sql.ConnectionPool({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n})\n\npool.connect(err => {\n    // ...\n})\n```\n\n__Errors__\n- ELOGIN (`ConnectionError`) - Login failed.\n- ETIMEOUT (`ConnectionError`) - Connection timeout.\n- EALREADYCONNECTED (`ConnectionError`) - Database is already connected!\n- EALREADYCONNECTING (`ConnectionError`) - Already connecting to database!\n- EINSTLOOKUP (`ConnectionError`) - Instance lookup failed.\n- ESOCKET (`ConnectionError`) - Socket error.\n\n---------------------------------------\n\n### close()\n\nClose all active connections in the pool.\n\n__Example__\n\n```javascript\npool.close()\n```\n\n## Request\n\n```javascript\nconst request = new sql.Request(/* [pool or transaction] */)\n```\n\nIf you omit pool/transaction argument, global pool is used instead.\n\n### Events\n\n- **recordset(columns)** - Dispatched when metadata for new recordset are parsed.\n- **row(row)** - Dispatched when new row is parsed.\n- **done(returnValue)** - Dispatched when request is complete.\n- **error(err)** - Dispatched on error.\n- **info(message)** - Dispatched on informational message.\n\n---------------------------------------\n\n### execute (procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.input('input_parameter', sql.Int, value)\nrequest.output('output_parameter', sql.Int)\nrequest.execute('procedure_name', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordsets.length) // count of recordsets returned by the procedure\n    console.log(result.recordsets[0].length) // count of rows contained in first recordset\n    console.log(result.recordset) // first recordset from result.recordsets\n    console.log(result.returnValue) // procedure return value\n    console.log(result.output) // key/value collection of output values\n    console.log(result.rowsAffected) // array of numbers, each number represents the number of rows affected by executed statemens\n\n    // ...\n})\n```\n\n__Errors__\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### input (name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automatically decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value)\nrequest.input('input_parameter', sql.Int, value)\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define your own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text)\n```\n\nYou can also overwrite the default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt)\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\nNB: Do not use parameters `@p{n}` as these are used by the internal drivers and cause a conflict.\n\n### output (name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int)\nrequest.output('output_parameter', sql.VarChar(50), 'abc')\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### pipe (stream)\n\nSets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n\n__Arguments__\n\n- **stream** - Writable stream in object mode.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.pipe(stream)\nrequest.query('select * from mytable')\nstream.on('error', err => {\n    // ...\n})\nstream.on('finish', () => {\n    // ...\n})\n```\n\n---------------------------------------\n\n### query (command, [callback])\n\nExecute the SQL command. To execute commands like `create procedure` or if you plan to work with local temporary tables, use [batch](#batch-batch-callback) instead.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n\n    // ...\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number; select 2 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n    console.log(result.recordsets[0][0].number) // return 1\n    console.log(result.recordsets[1][0].number) // return 2\n})\n```\n\n**NOTE**: To get number of rows affected by the statement(s), see section [Affected Rows](#affected-rows).\n\n---------------------------------------\n\n### batch (batch, [callback])\n\nExecute the SQL command. Unlike [query](#query-command-callback), it doesn't use `sp_executesql`, so is not likely that SQL Server will reuse the execution plan it generates for the SQL. Use this only in special cases, for example when you need to execute commands like `create procedure` which can't be executed with [query](#query-command-callback) or if you're executing statements longer than 4000 chars on SQL Server 2000. Also you should use this if you're plan to work with local temporary tables ([more information here](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)).\n\nNOTE: Table-Valued Parameter (TVP) is not supported in batch.\n\n__Arguments__\n\n- **batch** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.batch('create procedure #temporary as select * from table', (err, result) => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\nYou can enable multiple recordsets in queries with the `request.multiple = true` command.\n\n---------------------------------------\n\n### bulk (table, [options,] [callback])\n\nPerform a bulk insert.\n\n__Arguments__\n\n- **table** - `sql.Table` instance.\n- **options** - Options object to be passed through to driver (currently tedious only). Optional. If argument is a function it will be treated as the callback.\n- **callback(err, rowCount)** - A callback which is called after bulk insert has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst table = new sql.Table('table_name') // or temporary table, e.g. #temptable\ntable.create = true\ntable.columns.add('a', sql.Int, {nullable: true, primary: true})\ntable.columns.add('b', sql.VarChar(50), {nullable: false})\ntable.rows.add(777, 'test')\n\nconst request = new sql.Request()\nrequest.bulk(table, (err, result) => {\n    // ... error checks\n})\n```\n\n**IMPORTANT**: Always indicate whether the column is nullable or not!\n\n**TIP**: If you set `table.create` to `true`, module will check if the table exists before it start sending data. If it doesn't, it will automatically create it. You can specify primary key columns by setting `primary: true` to column's options. Primary key constraint on multiple columns is supported.\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n__Errors__\n- ENAME (`RequestError`) - Table name must be specified for bulk insert.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### cancel()\n\nCancel currently executing request. Return `true` if cancellation packet was send successfully.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', (err, result) => {\n    console.log(err instanceof sql.RequestError)  // true\n    console.log(err.message)                      // Cancelled.\n    console.log(err.code)                         // ECANCEL\n\n    // ...\n})\n\nrequest.cancel()\n```\n\n## Transaction\n\n**IMPORTANT:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is acquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\n```\n\nIf you omit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    const request = new sql.Request(transaction)\n    request.query('insert into mytable (mycolumn) values (12345)', (err, result) => {\n        // ... error checks\n\n        transaction.commit(err => {\n            // ... error checks\n\n            console.log(\"Transaction committed.\")\n        })\n    })\n})\n```\n\nTransaction can also be created by `const transaction = pool.transaction()`. Requests can also be created by `const request = transaction.request()`.\n\n__Aborted transactions__\n\nThis example shows how you should correctly handle transaction errors when `abortTransactionOnError` (`XACT_ABORT`) is enabled. Added in 2.0.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    let rolledBack = false\n\n    transaction.on('rollback', aborted => {\n        // emited with aborted === true\n\n        rolledBack = true\n    })\n\n    new sql.Request(transaction)\n    .query('insert into mytable (bitcolumn) values (2)', (err, result) => {\n        // insert should fail because of invalid value\n\n        if (err) {\n            if (!rolledBack) {\n                transaction.rollback(err => {\n                    // ... error checks\n                })\n            }\n        } else {\n            transaction.commit(err => {\n                // ... error checks\n            })\n        }\n    })\n})\n```\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback(aborted)** - Dispatched on successful rollback with an argument determining if the transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### begin ([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYBEGUN (`TransactionError`) - Transaction has already begun.\n\n---------------------------------------\n\n### commit ([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has committed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.commit(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't commit transaction. There is a request in progress.\n\n---------------------------------------\n\n### rollback ([callback])\n\nRollback a transaction. If the queue isn't empty, all queued requests will be Cancelled and the transaction will be marked as aborted.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.rollback(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't rollback transaction. There is a request in progress.\n\n## Prepared Statement\n\n**IMPORTANT:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is acquired from the connection pool and all subsequent executions are executed exclusively on this connection. After you call `unprepare`, the connection is then released back to the connection pool.\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\n```\n\nIf you omit the connection argument, the global connection is used instead.\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        // release the connection after queries are executed\n        ps.unprepare(err => {\n            // ... error checks\n\n        })\n    })\n})\n```\n\n**IMPORTANT**: Remember that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement when you've finished your queries!\n\nYou can execute multiple queries against the same prepared statement but you *must* unprepare the statement when you have finished using it otherwise you will cause the connection pool to run out of available connections.\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n### input (name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int)\nps.input('input_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int)\nps.output('output_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### prepare (statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.prepare('select @param as value', err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYPREPARED (`PreparedStatementError`) - Statement is already prepared.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n\n---------------------------------------\n\n### execute (values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        console.log(result.recordset[0].value) // return 12345\n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\nYou can also stream executed request.\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.stream = true\n    const request = ps.execute({param: 12345})\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n        \n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\n**TIP**: To learn more about how number of affected rows works, see section [Affected Rows](#affected-rows).\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n\n---------------------------------------\n\n### unprepare ([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.unprepare(err => {\n        // ... error checks\n\n    })\n})\n```\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n\n## CLI\n\nBefore you can start using CLI, you must install `mssql` globally with `npm install mssql -g`. Once you do that you will be able to execute `mssql` command.\n\n__Setup__\n\nCreate a `.mssql.json` configuration file (anywhere). Structure of the file is the same as the standard configuration object.\n\n```json\n{\n    \"user\": \"...\",\n    \"password\": \"...\",\n    \"server\": \"localhost\",\n    \"database\": \"...\"\n}\n```\n\n__Example__\n\n```shell\necho \"select * from mytable\" | mssql /path/to/config\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}]]\n```\n\nYou can also query for multiple recordsets.\n\n```shell\necho \"select * from mytable; select * from myothertable\" | mssql\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}],[{\"id\":15,\"name\":\"Product name\"}]]\n```\n\nIf you omit config path argument, mssql will try to load it from current working directory.\n\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n\n{ srid: 0,\n  version: 1,\n  points:\n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nconst tvp = new sql.Table() // You can optionally specify table type name in the first argument.\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50))\ntvp.columns.add('b', sql.Int)\n\n// Add rows\ntvp.rows.add('hello tvp', 777) // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('tvp', tvp)\nrequest.execute('MyCustomStoredProcedure', (err, result) => {\n    // ... error checks\n\n    console.dir(result.recordsets[0][0]) // {a: 'hello tvp', b: 777}\n})\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n## Affected Rows\n\nIf you're performing `INSERT`, `UPDATE` or `DELETE` in a query, you can read number of affected rows. The `rowsAffected` variable is an array of numbers. Each number represents number of affected rows by a single statement.\n\n__Example using Promises__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100').then(result => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using callbacks__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100', (err, result) => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using streaming__\n\n```javascript\nconst request = new sql.Request()\nrequest.stream = true\nrequest.query('update myAwesomeTable set awesomness = 100')\nrequest.on('done', result => {\n    console.log(result.rowsAffected)\n})\n```\n\n## JSON support\n\nSQL Server 2016 introduced built-in JSON serialization. By default, JSON is returned as a plain text in a special column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B`.\n\nExample\n```sql\nSELECT\n    1 AS 'a.b.c',\n    2 AS 'a.b.d',\n    3 AS 'a.x',\n    4 AS 'a.y'\nFOR JSON PATH\n```\n\nResults in:\n```javascript\nrecordset = [ { 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B': '{\"a\":{\"b\":{\"c\":1,\"d\":2},\"x\":3,\"y\":4}}' } ]\n```\n\nYou can enable built-in JSON parser with `config.parseJSON = true`. Once you enable this, recordset will contain rows of parsed JS objects. Given the same example, result will look like this:\n```javascript\nrecordset = [ { a: { b: { c: 1, d: 2 }, x: 3, y: 4 } } ]\n```\n\n**IMPORTANT**: In order for this to work, there must be exactly one column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B` in the recordset.\n\nMore information about JSON support can be found in [official documentation](https://msdn.microsoft.com/en-us/library/dn921882.aspx).\n\n## Errors\n\nThere are 4 types of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, committing and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and its original stack may be cropped. You can always access original error with `err.originalError`.\n\nSQL Server may generate more than one error for one request so you can access preceding errors with `err.precedingErrors`.\n\n### Error Codes\n\nEach known error has `name`, `code` and `message` properties.\n\nName | Code | Message\n:--- | :--- | :---\n`ConnectionError` | ELOGIN | Login failed.\n`ConnectionError` | ETIMEOUT | Connection timeout.\n`ConnectionError` | EDRIVER | Unknown driver.\n`ConnectionError` | EALREADYCONNECTED | Database is already connected!\n`ConnectionError` | EALREADYCONNECTING | Already connecting to database!\n`ConnectionError` | ENOTOPEN | Connection not yet open.\n`ConnectionError` | EINSTLOOKUP | Instance lookup failed.\n`ConnectionError` | ESOCKET | Socket error.\n`ConnectionError` | ECONNCLOSED | Connection is closed.\n`TransactionError` | ENOTBEGUN | Transaction has not begun.\n`TransactionError` | EALREADYBEGUN | Transaction has already begun.\n`TransactionError` | EREQINPROG | Can't commit/rollback transaction. There is a request in progress.\n`TransactionError` | EABORT | Transaction has been aborted.\n`RequestError` | EREQUEST | Message from SQL Server. Error object contains additional details.\n`RequestError` | ECANCEL | Cancelled.\n`RequestError` | ETIMEOUT | Request timeout.\n`RequestError` | EARGS | Invalid number of arguments.\n`RequestError` | EINJECT | SQL injection warning.\n`RequestError` | ENOCONN | No connection is specified for that request.\n`PreparedStatementError` | EARGS | Invalid number of arguments.\n`PreparedStatementError` | EINJECT | SQL injection warning.\n`PreparedStatementError` | EALREADYPREPARED | Statement is already prepared.\n`PreparedStatementError` | ENOTPREPARED | Statement is not prepared.\n\n### Detailed SQL Errors\n\nSQL errors (`RequestError` with `err.code` equal to `EREQUEST`) contains additional details.\n\n- **err.number** - The error number.\n- **err.state** - The error state, used as a modifier to the number.\n- **err.class** - The class (severity) of the error. A class of less than 10 indicates an informational message. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **err.lineNumber** - The line number in the SQL batch or stored procedure that caused the error. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **err.serverName** - The server name.\n- **err.procName** - The stored procedure name.\n\n## Informational messages\n\nTo receive informational messages generated by `PRINT` or `RAISERROR` commands use:\n\n```javascript\nconst request = new sql.Request()\nrequest.on('info', info => {\n    console.dir(info)\n})\nrequest.query('print \\'Hello world.\\';', (err, result) => {\n    // ...\n})\n```\n\nStructure of informational message:\n\n- **info.message** - Message.\n- **info.number** - The message number.\n- **info.state** - The message state, used as a modifier to the number.\n- **info.class** - The class (severity) of the message. Equal or lower than 10. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **info.lineNumber** - The line number in the SQL batch or stored procedure that generated the message. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **info.serverName** - The server name.\n- **info.procName** - The stored procedure name.\n\n## Metadata\n\nRecordset metadata are accessible through the `recordset.columns` property.\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select convert(decimal(18, 4), 1) as first, \\'asdf\\' as second', (err, result) => {\n    console.dir(result.recordset.columns)\n\n    console.log(result.recordset.columns.first.type === sql.Decimal) // true\n    console.log(result.recordset.columns.second.type === sql.VarChar) // true\n})\n```\n\nColumns structure for example above:\n\n```javascript\n{\n    first: {\n        index: 0,\n        name: 'first',\n        length: 17,\n        type: [sql.Decimal],\n        scale: 4,\n        precision: 18,\n        nullable: true,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    },\n    second: {\n        index: 1,\n        name: 'second',\n        length: 4,\n        type: [sql.VarChar],\n        nullable: false,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    }\n}\n```\n\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\")               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\")           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\")      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar)                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\")              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33)              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33)          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33)       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date())        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date())     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Variant\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length. Types `sql.XML` and `sql.Variant` are not supported as input parameters.\n\n## SQL injection\n\nThis module has built-in SQL injection protection. Always use parameters or tagged template literals to pass sanitized values to your queries.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('myval', sql.VarChar, '-- commented')\nrequest.query('select @myval as myval', (err, result) => {\n    console.dir(result)\n})\n```\n\n## Known issues\n\n### Tedious\n\n- If you're facing problems with connecting SQL Server 2000, try setting the default TDS version to 7.1 with `config.options.tdsVersion = '7_1'` ([issue](https://github.com/tediousjs/node-mssql/issues/36))\n- If you're executing a statement longer than 4000 chars on SQL Server 2000, always use [batch](#batch-batch-callback) instead of [query](#query-command-callback) ([issue](https://github.com/tediousjs/node-mssql/issues/68))\n\n### msnodesqlv8\n\n- msnodesqlv8 has problem with errors during transactions - [reported](https://github.com/tediousjs/node-mssql/issues/77).\n- msnodesqlv8 doesn't support [detailed SQL errors](#detailed-sql-errors).\n\n## 4.x to 5.x changes\n\n- Moved pool library from `node-pool` to `tarn.js`\n- `ConnectionPool.pool.size` deprecated, use `ConnectionPool.size` instead\n- `ConnectionPool.pool.available` deprecated, use `ConnectionPool.available` instead\n- `ConnectionPool.pool.pending` deprecated, use `ConnectionPool.pending` instead\n- `ConnectionPool.pool.borrowed` deprecated, use `ConnectionPool.borrowed` instead\n\n## 3.x to 4.x changes\n\n- Library & tests are rewritten to ES6.\n- `Connection` was renamed to `ConnectionPool`.\n- Drivers are no longer loaded dynamically so the library is now compatible with Webpack. To use `msnodesqlv8` driver, use `const sql = require('mssql/msnodesqlv8')` syntax.\n- Every callback/resolve now returns `result` object only. This object contains `recordsets` (array of recordsets), `recordset` (first recordset from array of recordsets), `rowsAffected` (array of numbers representig number of affected rows by each insert/update/delete statement) and `output` (key/value collection of output parameters' values).\n- Affected rows are now returned as an array. A separate number for each SQL statement.\n- Directive `multiple: true` was removed.\n- `Transaction` and `PreparedStatement` internal queues was removed.\n- ConnectionPool no longer emits `connect` and `close` events.\n- Removed verbose and debug mode.\n- Removed support for `tds` and `msnodesql` drivers.\n- Removed support for Node versions lower than 4.\n\n[npm-image]: https://img.shields.io/npm/v/mssql.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/mssql\n[downloads-image]: https://img.shields.io/npm/dm/mssql.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/mssql\n[david-image]: https://img.shields.io/david/tediousjs/node-mssql.svg?style=flat-square\n[david-url]: https://david-dm.org/tediousjs/node-mssql\n[travis-image]: https://img.shields.io/travis/tediousjs/node-mssql/master.svg?style=flat-square&label=unit\n[travis-url]: https://travis-ci.org/tediousjs/node-mssql\n[appveyor-image]: https://ci.appveyor.com/api/projects/status/e5gq1a0ujwams9t7/branch/master?svg=true\n[appveyor-url]: https://ci.appveyor.com/project/tediousjs/node-mssql\n\n[tedious-url]: https://www.npmjs.com/package/tedious\n[msnodesqlv8-url]: https://www.npmjs.com/package/msnodesqlv8\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@6.0.0-alpha.3","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-PE4i2J5nk9ITx2W5UyKTNYTe8/SW3ZMZ6XHwjML3fNDKIfZtotWy5b3Fw/U8N2i7VaN08+bmta71yTiAJt+ExQ==","shasum":"cabc5815497cfb1c7c74e1c65d2cffc621ccfbf2","tarball":"https://registry.npmjs.org/mssql/-/mssql-6.0.0-alpha.3.tgz","fileCount":19,"unpackedSize":204051,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcgwijCRA9TVsSAnZWagAABYwP/RN9LeX6Y742C9n+0sWI\nCvIw9nCd9QSUwZ/tlCezBbFVsBumX6ekznqxHO3ueJoyxXolXNXz72aSyOIW\nllFApRh6OP1yJbVvW+CT3nRplYJaLRaFGhRGl4CiA4EQ16JW3eJCHKse89pW\naGiSu8OTx2TZXxv/Kfp9fYgupfiwYq9G+smlTfP+dwep4hHGFJXT8XmNdADd\ni6l7ixIoWR3iOiflLHizvZ5fLJ0or+bsTDAXdzjU/hAg+LZ6v4/Neud3Ixlt\nRgyiHL/XUshB89q7Vb87ScTzYwzGBasZnI5OonN8E7ToeRyGuwdB6ZwGJe0i\nD5F7ZzpOQPPerVo/2n3ngLtPj8f96eg+hsR7V6X2BbcsDTD9wTdkyjvBxZ4T\nj4VLLqOYe9E6FAqx9gtVA0Jw5D0scMuytBAV+fUX4RguJeMW+3Pdtj0f3PY7\nDrQMB/9922Uby3RaCeGtMlYed89LFYpmDK4sXe14EKXHcG7j6DiX5wAUq0fB\nckgxuv+K1lXd0JV6BqHzqr9AvALuujkNx63rAC+QluV4oEffdhpCrtCf6U3t\ncnQKxU9L7ImCJRMSAYn2SeegOZOljTE9hV5V0RcmggfgLDZqjEv7yi/QIBCU\nYcM+orN3B8ti47ZbP85lrBDSN0EnKaZBnYd/3mdWVdNP4YzBsqaeH46pnin3\nu0Ah\r\n=l28o\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_6.0.0-alpha.3_1552091298192_0.9988728891954717"},"_hasShrinkwrap":false},"4.3.5":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.3.5","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.6.1","tedious":"^2.7.1"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=4"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha -t 15000 test/common/unit.js","test-tedious":"mocha -t 15000 test/tedious","test-msnodesqlv8":"mocha -t 15000 test/msnodesqlv8","test-cli":"mocha -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"b25722458b7840c1b44d9dbcb8610aa6c42596ed","readme":"# node-mssql\n\nMicrosoft SQL Server client for Node.js\n\n[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Travis CI][travis-image]][travis-url] [![Appveyor CI][appveyor-image]][appveyor-url] [![Join the chat at https://gitter.im/patriksimek/node-mssql](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/patriksimek/node-mssql?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSupported TDS drivers:\n- [Tedious][tedious-url] (pure JavaScript - Windows/macOS/Linux, default)\n- [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server][msnodesqlv8-url] (native - Windows only)\n\n## Installation\n\n    npm install mssql\n\nUse `@next` tag to install the most recent version with latest fixes and features.\n\n    npm install mssql@next\n\n## Quick Example\n\n```javascript\nconst sql = require('mssql')\n\nasync () => {\n    try {\n        await sql.connect('mssql://username:password@localhost/database')\n        const result = await sql.query`select * from mytable where id = ${value}`\n        console.dir(result)\n    } catch (err) {\n        // ... error checks\n    }\n}\n```\n\nIf you're on Windows Azure, add `?encrypt=true` to your connection string. See [docs](#configuration) to learn more.\n\n## Documentation\n\n### Examples\n\n* [Async/Await](#asyncawait)\n* [Promises](#promises)\n* [ES6 Tagged template literals](#es6-tagged-template-literals)\n* [Callbacks](#callbacks)\n* [Streaming](#streaming)\n* [Connection Pools](#connection-pools)\n\n### Configuration\n\n* [General](#general-same-for-all-drivers)\n* [Formats](#formats)\n\n### Drivers\n\n* [Tedious](#tedious)\n* [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server](#microsoft--contributors-node-v8-driver-for-nodejs-for-sql-server)\n\n### Connections\n\n* [ConnectionPool](#connections-1)\n* [connect](#connect-callback)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute-procedure-callback)\n* [input](#input-name-type-value)\n* [output](#output-name-type-value)\n* [pipe](#pipe-stream)\n* [query](#query-command-callback)\n* [batch](#batch-batch-callback)\n* [bulk](#bulk-table-callback)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin-isolationlevel-callback)\n* [commit](#commit-callback)\n* [rollback](#rollback-callback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#input-name-type)\n* [output](#output-name-type)\n* [prepare](#prepare-statement-callback)\n* [execute](#execute-values-callback)\n* [unprepare](#unprepare-callback)\n\n### Other\n\n* [CLI](#cli)\n* [Geography and Geometry](#geography-and-geometry)\n* [Table-Valued Parameter](#table-valued-parameter-tvp)\n* [Affected Rows](#affected-rows)\n* [JSON support](#json-support)\n* [Errors](#errors)\n* [Informational messages](#informational-messages)\n* [Metadata](#metadata)\n* [Data Types](#data-types)\n* [SQL injection](#sql-injection)\n* [Known Issues](#known-issues)\n* [Contributing](https://github.com/tediousjs/node-mssql/wiki/Contributing)\n* [3.x to 4.x changes](#3x-to-4x-changes)\n* [3.x Documentation](https://github.com/tediousjs/node-mssql/blob/1893969195045a250f0fdeeb2de7f30dcf6689ad/README.md)\n\n## Examples\n\n### Config\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...',\n\n    options: {\n        encrypt: true // Use this if you're on Windows Azure\n    }\n}\n```\n\n\n### Async/Await\n\n```javascript\nconst sql = require('mssql')\n\n(async function () {\n    try {\n        let pool = await sql.connect(config)\n        let result1 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .query('select * from mytable where id = @input_parameter')\n            \n        console.dir(result1)\n    \n        // Stored procedure\n        \n        let result2 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .output('output_parameter', sql.VarChar(50))\n            .execute('procedure_name')\n        \n        console.dir(result2)\n    } catch (err) {\n        // ... error checks\n    }\n})()\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Promises\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(pool => {\n    // Query\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .query('select * from mytable where id = @input_parameter')\n}).then(result => {\n    console.dir(result)\n    \n    // Stored procedure\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nNative Promise is used by default. You can easily change this with `sql.Promise = require('myownpromisepackage')`.\n\n### ES6 Tagged template literals\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(() => {\n    return sql.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n### Callbacks\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    // Query\n\n    new sql.Request().query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n    // Stored Procedure\n\n    new sql.Request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Streaming\n\nIf you plan to work with large amount of rows, you should always use streaming. Once you enable this, you must listen for events to receive data.\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    const request = new sql.Request()\n    request.stream = true // You can set streaming differently for each request\n    request.query('select * from verylargetable') // or request.execute(procedure)\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n## Connection Pools\n\nUsing a single connection pool for your application/service is recommended.\nInstantiating a pool with a callback, or immediately calling `.connect`, is asynchronous to ensure a connection can be\nestablished before returning. From that point, you're able to acquire connections as normal:  \n\n```javascript\nconst sql = require('mssql')\n\n// async/await style:\nconst pool1 = new sql.ConnectionPool(config).connect();\n\npool1.on('error', err => {\n    // ... error handler\n})\n\nasync function messageHandler() {\n    await pool1; // ensures that the pool has been created\n    try {\n    \tconst request = pool1.request(); // or: new sql.Request(pool1)\n    \tconst result = request.query('select 1 as number')\n    \tconsole.dir(result)\n    \treturn result;\n\t} catch (err) {\n        console.error('SQL error', err);\n\t}\n}\n\n// promise style:\nconst pool2 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n});\n\npool2.on('error', err => {\n    // ... error handler\n})\n\nfunction runStoredProcedure() {\n    return pool2.then((pool) => {\n\t\tpool.request() // or: new sql.Request(pool2)\n\t\t.input('input_parameter', sql.Int, 10)\n\t\t.output('output_parameter', sql.VarChar(50))\n\t\t.execute('procedure_name', (err, result) => {\n\t\t\t// ... error checks\n\t\t\tconsole.dir(result)\n\t\t})\n    });\n}\n```\n\nAwaiting or `.then`ing the pool creation is a safe way to ensure that the pool is always ready, without knowing where it\nis needed first. In practice, once the pool is created then there will be no delay for the next operation.\n\n**ES6 Tagged template literals**\n\n```javascript\nnew sql.ConnectionPool(config).connect().then(pool => {\n    return pool.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n## Configuration\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n### General (same for all drivers)\n\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **domain** - Once you set domain, driver will connect to SQL Server using domain login.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **connectionTimeout** - Connection timeout in ms (default: `15000`).\n- **requestTimeout** - Request timeout in ms (default: `15000`). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second. When passed via connection string, the key must be `request timeout`\n- **stream** - Stream recordsets/rows instead of returning them all at once as an argument of callback (default: `false`). You can also enable streaming for each request independently (`request.stream = true`). Always set to `true` if you plan to work with large amount of rows.\n- **parseJSON** - Parse JSON recordsets to JS objects (default: `false`). For more information please see section [JSON support](#json-support).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimum of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\nComplete list of pool options can be found [here](https://github.com/coopernurse/node-pool).\n\n### Formats\n\nIn addition to configuration object there is an option to pass config as a connection string. Two formats of connection string are supported.\n\n##### Classic Connection String\n\n```\nServer=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true\nDriver=msnodesqlv8;Server=(local)\\INSTANCE;Database=database;UID=DOMAIN\\username;PWD=password;Encrypt=true\n```\n\n##### Connection String URI\n\n```\nmssql://username:password@localhost:1433/database?encrypt=true\nmssql://username:password@localhost/INSTANCE/database?encrypt=true&domain=DOMAIN&driver=msnodesqlv8\n```\n\n## Drivers\n\n### Tedious\n\nDefault driver, actively maintained and production ready. Platform independent, runs everywhere Node.js runs. Officially supported by Microsoft.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the configured tedious `Connection`. It can be used for attaching event handlers like in this example:\n```js\nrequire('mssql').connect(...config, beforeConnect: conn => {\n  conn.once('connect', err => { err ? console.error(err) : console.log('mssql connected')})\n  conn.once('end', err => { err ? console.error(err) : console.log('mssql disconnected')})\n}})\n```\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1434 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `false`).\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_1`, `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n- **options.appName** - Application name used for SQL server logging.\n- **options.abortTransactionOnError** - A boolean determining whether to rollback a transaction automatically if any error is encountered during the given transaction's execution. This sets the value for `XACT_ABORT` during the initial SQL phase of a connection.\n\nMore information about Tedious specific options: http://tediousjs.github.io/tedious/api-connection.html\n\n### Microsoft / Contributors Node V8 Driver for Node.js for SQL Server\n\n**Requires Node.js 0.12.x or newer. Windows only.** This driver is not part of the default package and must be installed separately by `npm install msnodesqlv8`. To use this driver, use this require syntax: `const sql = require('mssql/msnodesqlv8')`.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the connection configuration, that can be modified to pass extra parameters to the driver's `open()` method.\n- **connectionString** - Connection string (default: see below).\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not to use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n## Connections\n\nInternally, each `ConnectionPool` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool. Connection health check is built-in so once the dead connection is discovered, it is immediately replaced with a new one.\n\n**IMPORTANT**: Always attach an `error` listener to created connection. Whenever something goes wrong with the connection it will emit an error and if there is no listener it will crash your application with an uncaught error.\n\n```javascript\nconst pool = new sql.ConnectionPool({ /* config */ })\n```\n\n### Events\n\n- **error(err)** - Dispatched on connection error.\n\n---------------------------------------\n\n### connect ([callback])\n\nCreate a new connection pool. The initial probe connection is created to find out whether the configuration is valid.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after initial probe connection has established, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst pool = new sql.ConnectionPool({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n})\n\npool.connect(err => {\n    // ...\n})\n```\n\n__Errors__\n- ELOGIN (`ConnectionError`) - Login failed.\n- ETIMEOUT (`ConnectionError`) - Connection timeout.\n- EALREADYCONNECTED (`ConnectionError`) - Database is already connected!\n- EALREADYCONNECTING (`ConnectionError`) - Already connecting to database!\n- EINSTLOOKUP (`ConnectionError`) - Instance lookup failed.\n- ESOCKET (`ConnectionError`) - Socket error.\n\n---------------------------------------\n\n### close()\n\nClose all active connections in the pool.\n\n__Example__\n\n```javascript\npool.close()\n```\n\n## Request\n\n```javascript\nconst request = new sql.Request(/* [pool or transaction] */)\n```\n\nIf you omit pool/transaction argument, global pool is used instead.\n\n### Events\n\n- **recordset(columns)** - Dispatched when metadata for new recordset are parsed.\n- **row(row)** - Dispatched when new row is parsed.\n- **done(returnValue)** - Dispatched when request is complete.\n- **error(err)** - Dispatched on error.\n- **info(message)** - Dispatched on informational message.\n\n---------------------------------------\n\n### execute (procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.input('input_parameter', sql.Int, value)\nrequest.output('output_parameter', sql.Int)\nrequest.execute('procedure_name', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordsets.length) // count of recordsets returned by the procedure\n    console.log(result.recordsets[0].length) // count of rows contained in first recordset\n    console.log(result.recordset) // first recordset from result.recordsets\n    console.log(result.returnValue) // procedure return value\n    console.log(result.output) // key/value collection of output values\n    console.log(result.rowsAffected) // array of numbers, each number represents the number of rows affected by executed statemens\n\n    // ...\n})\n```\n\n__Errors__\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### input (name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automatically decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value)\nrequest.input('input_parameter', sql.Int, value)\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define your own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text)\n```\n\nYou can also overwrite the default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt)\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int)\nrequest.output('output_parameter', sql.VarChar(50), 'abc')\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### pipe (stream)\n\nSets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n\n__Arguments__\n\n- **stream** - Writable stream in object mode.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.pipe(stream)\nrequest.query('select * from mytable')\nstream.on('error', err => {\n    // ...\n})\nstream.on('finish', () => {\n    // ...\n})\n```\n\n---------------------------------------\n\n### query (command, [callback])\n\nExecute the SQL command. To execute commands like `create procedure` or if you plan to work with local temporary tables, use [batch](#batch-batch-callback) instead.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n\n    // ...\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number; select 2 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n    console.log(result.recordsets[0][0].number) // return 1\n    console.log(result.recordsets[1][0].number) // return 2\n})\n```\n\n**NOTE**: To get number of rows affected by the statement(s), see section [Affected Rows](#affected-rows).\n\n---------------------------------------\n\n### batch (batch, [callback])\n\nExecute the SQL command. Unlike [query](#query-command-callback), it doesn't use `sp_executesql`, so is not likely that SQL Server will reuse the execution plan it generates for the SQL. Use this only in special cases, for example when you need to execute commands like `create procedure` which can't be executed with [query](#query-command-callback) or if you're executing statements longer than 4000 chars on SQL Server 2000. Also you should use this if you're plan to work with local temporary tables ([more information here](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)).\n\nNOTE: Table-Valued Parameter (TVP) is not supported in batch.\n\n__Arguments__\n\n- **batch** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.batch('create procedure #temporary as select * from table', (err, result) => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\nYou can enable multiple recordsets in queries with the `request.multiple = true` command.\n\n---------------------------------------\n\n### bulk (table, [callback])\n\nPerform a bulk insert.\n\n__Arguments__\n\n- **table** - `sql.Table` instance.\n- **callback(err, rowCount)** - A callback which is called after bulk insert has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst table = new sql.Table('table_name') // or temporary table, e.g. #temptable\ntable.create = true\ntable.columns.add('a', sql.Int, {nullable: true, primary: true})\ntable.columns.add('b', sql.VarChar(50), {nullable: false})\ntable.rows.add(777, 'test')\n\nconst request = new sql.Request()\nrequest.bulk(table, (err, result) => {\n    // ... error checks\n})\n```\n\n**IMPORTANT**: Always indicate whether the column is nullable or not!\n\n**TIP**: If you set `table.create` to `true`, module will check if the table exists before it start sending data. If it doesn't, it will automatically create it. You can specify primary key columns by setting `primary: true` to column's options. Primary key constraint on multiple columns is supported.\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n__Errors__\n- ENAME (`RequestError`) - Table name must be specified for bulk insert.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### cancel()\n\nCancel currently executing request. Return `true` if cancellation packet was send successfully.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', (err, result) => {\n    console.log(err instanceof sql.RequestError)  // true\n    console.log(err.message)                      // Cancelled.\n    console.log(err.code)                         // ECANCEL\n\n    // ...\n})\n\nrequest.cancel()\n```\n\n## Transaction\n\n**IMPORTANT:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is acquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\n```\n\nIf you omit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    const request = new sql.Request(transaction)\n    request.query('insert into mytable (mycolumn) values (12345)', (err, result) => {\n        // ... error checks\n\n        transaction.commit(err => {\n            // ... error checks\n\n            console.log(\"Transaction committed.\")\n        })\n    })\n})\n```\n\nTransaction can also be created by `const transaction = pool.transaction()`. Requests can also be created by `const request = transaction.request()`.\n\n__Aborted transactions__\n\nThis example shows how you should correctly handle transaction errors when `abortTransactionOnError` (`XACT_ABORT`) is enabled. Added in 2.0.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    let rolledBack = false\n\n    transaction.on('rollback', aborted => {\n        // emited with aborted === true\n\n        rolledBack = true\n    })\n\n    new sql.Request(transaction)\n    .query('insert into mytable (bitcolumn) values (2)', (err, result) => {\n        // insert should fail because of invalid value\n\n        if (err) {\n            if (!rolledBack) {\n                transaction.rollback(err => {\n                    // ... error checks\n                })\n            }\n        } else {\n            transaction.commit(err => {\n                // ... error checks\n            })\n        }\n    })\n})\n```\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback(aborted)** - Dispatched on successful rollback with an argument determining if the transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### begin ([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYBEGUN (`TransactionError`) - Transaction has already begun.\n\n---------------------------------------\n\n### commit ([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has committed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.commit(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't commit transaction. There is a request in progress.\n\n---------------------------------------\n\n### rollback ([callback])\n\nRollback a transaction. If the queue isn't empty, all queued requests will be Cancelled and the transaction will be marked as aborted.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.rollback(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't rollback transaction. There is a request in progress.\n\n## Prepared Statement\n\n**IMPORTANT:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is acquired from the connection pool and all subsequent executions are executed exclusively on this connection. After you call `unprepare`, the connection is then released back to the connection pool.\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\n```\n\nIf you omit the connection argument, the global connection is used instead.\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        ps.unprepare(err => {\n            // ... error checks\n\n        })\n    })\n})\n```\n\n**IMPORTANT**: Remember that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement!\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n### input (name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int)\nps.input('input_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int)\nps.output('output_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### prepare (statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.prepare('select @param as value', err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYPREPARED (`PreparedStatementError`) - Statement is already prepared.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n\n---------------------------------------\n\n### execute (values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        console.log(result.recordset[0].value) // return 12345\n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\nYou can also stream executed request.\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.stream = true\n    const request = ps.execute({param: 12345})\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n        \n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\n**TIP**: To learn more about how number of affected rows works, see section [Affected Rows](#affected-rows).\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n\n---------------------------------------\n\n### unprepare ([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.unprepare(err => {\n        // ... error checks\n\n    })\n})\n```\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n\n## CLI\n\nBefore you can start using CLI, you must install `mssql` globally with `npm install mssql -g`. Once you do that you will be able to execute `mssql` command.\n\n__Setup__\n\nCreate a `.mssql.json` configuration file (anywhere). Structure of the file is the same as the standard configuration object.\n\n```json\n{\n    \"user\": \"...\",\n    \"password\": \"...\",\n    \"server\": \"localhost\",\n    \"database\": \"...\"\n}\n```\n\n__Example__\n\n```shell\necho \"select * from mytable\" | mssql /path/to/config\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}]]\n```\n\nYou can also query for multiple recordsets.\n\n```shell\necho \"select * from mytable; select * from myothertable\" | mssql\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}],[{\"id\":15,\"name\":\"Product name\"}]]\n```\n\nIf you omit config path argument, mssql will try to load it from current working directory.\n\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n\n{ srid: 0,\n  version: 1,\n  points:\n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nconst tvp = new sql.Table() // You can optionally specify table type name in the first argument.\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50))\ntvp.columns.add('b', sql.Int)\n\n// Add rows\ntvp.rows.add('hello tvp', 777) // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('tvp', tvp)\nrequest.execute('MyCustomStoredProcedure', (err, result) => {\n    // ... error checks\n\n    console.dir(result.recordsets[0][0]) // {a: 'hello tvp', b: 777}\n})\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n## Affected Rows\n\nIf you're performing `INSERT`, `UPDATE` or `DELETE` in a query, you can read number of affected rows. The `rowsAffected` variable is an array of numbers. Each number represents number of affected rows by a single statement.\n\n__Example using Promises__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100').then(result => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using callbacks__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100', (err, result) => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using streaming__\n\n```javascript\nconst request = new sql.Request()\nrequest.stream = true\nrequest.query('update myAwesomeTable set awesomness = 100')\nrequest.on('done', result => {\n    console.log(result.rowsAffected)\n})\n```\n\n## JSON support\n\nSQL Server 2016 introduced built-in JSON serialization. By default, JSON is returned as a plain text in a special column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B`.\n\nExample\n```sql\nSELECT\n    1 AS 'a.b.c',\n    2 AS 'a.b.d',\n    3 AS 'a.x',\n    4 AS 'a.y'\nFOR JSON PATH\n```\n\nResults in:\n```javascript\nrecordset = [ { 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B': '{\"a\":{\"b\":{\"c\":1,\"d\":2},\"x\":3,\"y\":4}}' } ]\n```\n\nYou can enable built-in JSON parser with `config.parseJSON = true`. Once you enable this, recordset will contain rows of parsed JS objects. Given the same example, result will look like this:\n```javascript\nrecordset = [ { a: { b: { c: 1, d: 2 }, x: 3, y: 4 } } ]\n```\n\n**IMPORTANT**: In order for this to work, there must be exactly one column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B` in the recordset.\n\nMore information about JSON support can be found in [official documentation](https://msdn.microsoft.com/en-us/library/dn921882.aspx).\n\n## Errors\n\nThere are 4 types of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, committing and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and its original stack may be cropped. You can always access original error with `err.originalError`.\n\nSQL Server may generate more than one error for one request so you can access preceding errors with `err.precedingErrors`.\n\n### Error Codes\n\nEach known error has `name`, `code` and `message` properties.\n\nName | Code | Message\n:--- | :--- | :---\n`ConnectionError` | ELOGIN | Login failed.\n`ConnectionError` | ETIMEOUT | Connection timeout.\n`ConnectionError` | EDRIVER | Unknown driver.\n`ConnectionError` | EALREADYCONNECTED | Database is already connected!\n`ConnectionError` | EALREADYCONNECTING | Already connecting to database!\n`ConnectionError` | ENOTOPEN | Connection not yet open.\n`ConnectionError` | EINSTLOOKUP | Instance lookup failed.\n`ConnectionError` | ESOCKET | Socket error.\n`ConnectionError` | ECONNCLOSED | Connection is closed.\n`TransactionError` | ENOTBEGUN | Transaction has not begun.\n`TransactionError` | EALREADYBEGUN | Transaction has already begun.\n`TransactionError` | EREQINPROG | Can't commit/rollback transaction. There is a request in progress.\n`TransactionError` | EABORT | Transaction has been aborted.\n`RequestError` | EREQUEST | Message from SQL Server. Error object contains additional details.\n`RequestError` | ECANCEL | Cancelled.\n`RequestError` | ETIMEOUT | Request timeout.\n`RequestError` | EARGS | Invalid number of arguments.\n`RequestError` | EINJECT | SQL injection warning.\n`RequestError` | ENOCONN | No connection is specified for that request.\n`PreparedStatementError` | EARGS | Invalid number of arguments.\n`PreparedStatementError` | EINJECT | SQL injection warning.\n`PreparedStatementError` | EALREADYPREPARED | Statement is already prepared.\n`PreparedStatementError` | ENOTPREPARED | Statement is not prepared.\n\n### Detailed SQL Errors\n\nSQL errors (`RequestError` with `err.code` equal to `EREQUEST`) contains additional details.\n\n- **err.number** - The error number.\n- **err.state** - The error state, used as a modifier to the number.\n- **err.class** - The class (severity) of the error. A class of less than 10 indicates an informational message. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **err.lineNumber** - The line number in the SQL batch or stored procedure that caused the error. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **err.serverName** - The server name.\n- **err.procName** - The stored procedure name.\n\n## Informational messages\n\nTo receive informational messages generated by `PRINT` or `RAISERROR` commands use:\n\n```javascript\nconst request = new sql.Request()\nrequest.on('info', info => {\n    console.dir(info)\n})\nrequest.query('print \\'Hello world.\\';', (err, result) => {\n    // ...\n})\n```\n\nStructure of informational message:\n\n- **info.message** - Message.\n- **info.number** - The message number.\n- **info.state** - The message state, used as a modifier to the number.\n- **info.class** - The class (severity) of the message. Equal or lower than 10. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **info.lineNumber** - The line number in the SQL batch or stored procedure that generated the message. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **info.serverName** - The server name.\n- **info.procName** - The stored procedure name.\n\n## Metadata\n\nRecordset metadata are accessible through the `recordset.columns` property.\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select convert(decimal(18, 4), 1) as first, \\'asdf\\' as second', (err, result) => {\n    console.dir(result.recordset.columns)\n\n    console.log(result.recordset.columns.first.type === sql.Decimal) // true\n    console.log(result.recordset.columns.second.type === sql.VarChar) // true\n})\n```\n\nColumns structure for example above:\n\n```javascript\n{\n    first: {\n        index: 0,\n        name: 'first',\n        length: 17,\n        type: [sql.Decimal],\n        scale: 4,\n        precision: 18,\n        nullable: true,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    },\n    second: {\n        index: 1,\n        name: 'second',\n        length: 4,\n        type: [sql.VarChar],\n        nullable: false,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    }\n}\n```\n\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\")               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\")           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\")      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar)                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\")              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33)              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33)          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33)       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date())        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date())     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Variant\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length. Types `sql.XML` and `sql.Variant` are not supported as input parameters.\n\n## SQL injection\n\nThis module has built-in SQL injection protection. Always use parameters or tagged template literals to pass sanitized values to your queries.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('myval', sql.VarChar, '-- commented')\nrequest.query('select @myval as myval', (err, result) => {\n    console.dir(result)\n})\n```\n\n## Known issues\n\n### Tedious\n\n- If you're facing problems with connecting SQL Server 2000, try setting the default TDS version to 7.1 with `config.options.tdsVersion = '7_1'` ([issue](https://github.com/tediousjs/node-mssql/issues/36))\n- If you're executing a statement longer than 4000 chars on SQL Server 2000, always use [batch](#batch-batch-callback) instead of [query](#query-command-callback) ([issue](https://github.com/tediousjs/node-mssql/issues/68))\n\n### msnodesqlv8\n\n- msnodesqlv8 has problem with errors during transactions - [reported](https://github.com/tediousjs/node-mssql/issues/77).\n- msnodesqlv8 doesn't support [detailed SQL errors](#detailed-sql-errors).\n\n## 3.x to 4.x changes\n\n- Library & tests are rewritten to ES6.\n- `Connection` was renamed to `ConnectionPool`.\n- Drivers are no longer loaded dynamically so the library is now compatible with Webpack. To use `msnodesqlv8` driver, use `const sql = require('mssql/msnodesqlv8')` syntax.\n- Every callback/resolve now returns `result` object only. This object contains `recordsets` (array of recordsets), `recordset` (first recordset from array of recordsets), `rowsAffected` (array of numbers representig number of affected rows by each insert/update/delete statement) and `output` (key/value collection of output parameters' values).\n- Affected rows are now returned as an array. A separate number for each SQL statement.\n- Directive `multiple: true` was removed.\n- `Transaction` and `PreparedStatement` internal queues was removed.\n- ConnectionPool no longer emits `connect` and `close` events.\n- Removed verbose and debug mode.\n- Removed support for `tds` and `msnodesql` drivers.\n- Removed support for Node versions lower than 4.\n\n[npm-image]: https://img.shields.io/npm/v/mssql.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/mssql\n[downloads-image]: https://img.shields.io/npm/dm/mssql.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/mssql\n[david-image]: https://img.shields.io/david/tediousjs/node-mssql.svg?style=flat-square\n[david-url]: https://david-dm.org/tediousjs/node-mssql\n[travis-image]: https://img.shields.io/travis/tediousjs/node-mssql/master.svg?style=flat-square&label=unit\n[travis-url]: https://travis-ci.org/tediousjs/node-mssql\n[appveyor-image]: https://img.shields.io/appveyor/ci/patriksimek/node-mssql-o4dhf/master.svg?style=flat-square&label=integration\n[appveyor-url]: https://ci.appveyor.com/project/patriksimek/node-mssql-o4dhf\n\n[tedious-url]: https://www.npmjs.com/package/tedious\n[msnodesqlv8-url]: https://www.npmjs.com/package/msnodesqlv8\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@4.3.5","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-eF+hwT/VUDiqDDWHDNPfM853+ha4wg7k2+vWxKLbkuN/A8WbPt+/y4pOqsUIH/T03u9hDU1sw8SZ4FS0l9sXig==","shasum":"b044b308fb37685feca542edc0822b25bd890e4a","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.3.5.tgz","fileCount":19,"unpackedSize":197239,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcg733CRA9TVsSAnZWagAACzIP/R+ctu5RXRSutyRYuBzb\ndGkMk6Ruhjy66UIx+bP/j+qXo7Fy4H5u2ooLmAVurTdWW48FNrjhuWaWAvsZ\nqGfz3AvwgCue+mkxho++TAAG9d21rKf6jxKtf55ZzGWyD3sbTBFpO9VMYF6V\nx+3oAhtgOifR0eBWoGx4ddVWCgjb3ODTFRHk/u9TBqMPh7z7u2ZVSVR5Oy7s\n6hdXulaB0Naz4/6KQPwAO91ChS1QXdXTNIiJA5CKGW6DV3tPlFPlyfOOfxN/\n9WnJ9ii5y64HUD374Rwgg5QsFSUNyuXgP4VIQXCXBExRu4Sb+OMIY3h3XvcK\nnQHVGk82Y30C893bwuqSpB0UHnnmYWB9V9oR7cqKsEduKcLUbEpxEWQ9PJsV\njzvOQO3YsGNMq42dXk9Y64mdP1xD/RxTrwSggRRMnSZQE9KGJ0kyZy/tObMv\n4XW7TzQPOen1K5Qc4/2eYQjL0NnpnIvAWnCTtCkMLx+MUxuoGuqobLo5BSEW\n1DKzkS2VVEmtwwT9Y9aK1X0p4ZwxS0nQVnOCeI5pwHtM1ja431YOW4PfosHP\n70oYCFoSoysiRNSXFlecXf+2M30ktInkl9ZhiESVbegh7Qhydi9DZrPnvtbJ\nK/3zX64CB+1KtD80PFrnIaUKKd/RL3aV2+t69I/IhTKYlH+IP7aA/fPgxp0j\n9+bD\r\n=HyRh\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_4.3.5_1552137718084_0.5629673938584052"},"_hasShrinkwrap":false},"5.0.2":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"5.0.2","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.6.1","tedious":"^4.2.0"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"2dcde73d8832328de740efe3c425c4d1fb4869e4","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@5.0.2","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-qSgDJLwTqCODNREozuuoDkQHzX3ZU9D7eMuAYVimfiIz64eB2wIRDR1FbBrIdgMIhUVQeDzVR6YN0z3cMSI9xw==","shasum":"d3a5b2ad02a7d21eda2f30d387272d8825fbbee2","tarball":"https://registry.npmjs.org/mssql/-/mssql-5.0.2.tgz","fileCount":19,"unpackedSize":202989,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcg75wCRA9TVsSAnZWagAAqkMP/1HZ3R6AvimDGGHTUZOM\nox2j/llUh3i0J+xtpIjUuTetVRP4d6TeOQGukBAotZPmxM6OqJdv7j1CWZ8Y\nL1ULN1RYyI5v2jPrmhEYrcX6S8Ll3fCdESORGiFmDOxQA8sT89f3LKX47Zom\nP1apTLa5L4rsUWCy/gInf6y+2pBh5CD7JzvZRKg9DktSbbinpSaL+7TTcpFr\ngxTrB8SkBZc/NiMR+4Q0pk/Vu/39uo69BvP9jOHteqCsyXVAfxeE9K4en7t7\nxshvDNZ/QqfC/NWZAwWh/b3KBVK5S0r7iL58xS4lzV163s3C6lEgzk0Q3lkW\nUng3DIbJorOrPy/rGeyy1M+BB4QC070z4HamnABNSZHz26sTgEY/KEqgr1sZ\ntYmHmpOSXCN/+dU0wgmir20DWu16uQ5VXJs3FfqQsADRzdkeVgqq9YBRHKSW\nJNj9LF8pHNGxtMVypSdDv+SiRUK3LgUf33hEge1tR7Lm6y5OpPH4kPOvlGw/\ntui7cByGBWYRyHSnsMvWhI8plRM4l4odBRCAzZFNXnsk/nvOBy80on6aCOJi\n7RUrAj5YL4ao9c+7iaLrc2XGE0OLhAfiPcHDPkXtsgIkms3hhuPHu5xOpVSf\nKCFToG5agLILk2AFIp24nfVaKfqtuU0gDNUkPZkUxCNFhC/NENnGAJiH3s0I\n3rU2\r\n=9Pqj\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_5.0.2_1552137839066_0.6529907185231587"},"_hasShrinkwrap":false},"6.0.0-alpha.4":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"6.0.0-alpha.4","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^4","tarn":"^1.1.4","tedious":"^6"},"devDependencies":{"mocha":"^6","standard":"^12"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"091674bff49e2e2d101f0fd9f389353ffcfa016d","readme":"# node-mssql\n\nMicrosoft SQL Server client for Node.js\n\n[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Travis CI][travis-image]][travis-url] [![Appveyor CI][appveyor-image]][appveyor-url] [![Join the chat at https://gitter.im/patriksimek/node-mssql](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/patriksimek/node-mssql?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSupported TDS drivers:\n- [Tedious][tedious-url] (pure JavaScript - Windows/macOS/Linux, default)\n- [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server][msnodesqlv8-url] (native - Windows only)\n\n## Installation\n\n    npm install mssql\n\n## Quick Example\n\n```javascript\nconst sql = require('mssql')\n\nasync () => {\n    try {\n        await sql.connect('mssql://username:password@localhost/database')\n        const result = await sql.query`select * from mytable where id = ${value}`\n        console.dir(result)\n    } catch (err) {\n        // ... error checks\n    }\n}\n```\n\nIf you're on Windows Azure, add `?encrypt=true` to your connection string. See [docs](#configuration) to learn more.\n\n## Documentation\n\n### Examples\n\n* [Async/Await](#asyncawait)\n* [Promises](#promises)\n* [ES6 Tagged template literals](#es6-tagged-template-literals)\n* [Callbacks](#callbacks)\n* [Streaming](#streaming)\n* [Connection Pools](#connection-pools)\n\n### Configuration\n\n* [General](#general-same-for-all-drivers)\n* [Formats](#formats)\n\n### Drivers\n\n* [Tedious](#tedious)\n* [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server](#microsoft--contributors-node-v8-driver-for-nodejs-for-sql-server)\n\n### Connections\n\n* [ConnectionPool](#connections-1)\n* [connect](#connect-callback)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute-procedure-callback)\n* [input](#input-name-type-value)\n* [output](#output-name-type-value)\n* [pipe](#pipe-stream)\n* [query](#query-command-callback)\n* [batch](#batch-batch-callback)\n* [bulk](#bulk-table-callback)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin-isolationlevel-callback)\n* [commit](#commit-callback)\n* [rollback](#rollback-callback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#input-name-type)\n* [output](#output-name-type)\n* [prepare](#prepare-statement-callback)\n* [execute](#execute-values-callback)\n* [unprepare](#unprepare-callback)\n\n### Other\n\n* [CLI](#cli)\n* [Geography and Geometry](#geography-and-geometry)\n* [Table-Valued Parameter](#table-valued-parameter-tvp)\n* [Affected Rows](#affected-rows)\n* [JSON support](#json-support)\n* [Errors](#errors)\n* [Informational messages](#informational-messages)\n* [Metadata](#metadata)\n* [Data Types](#data-types)\n* [SQL injection](#sql-injection)\n* [Known Issues](#known-issues)\n* [Contributing](https://github.com/tediousjs/node-mssql/wiki/Contributing)\n* [4.x to 5.x changes](#4x-to-5x-changes)\n* [3.x to 4.x changes](#3x-to-4x-changes)\n* [3.x Documentation](https://github.com/tediousjs/node-mssql/blob/1893969195045a250f0fdeeb2de7f30dcf6689ad/README.md)\n\n## Examples\n\n### Config\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...',\n}\n```\n\n\n### Async/Await\n\n```javascript\nconst sql = require('mssql')\n\n(async function () {\n    try {\n        let pool = await sql.connect(config)\n        let result1 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .query('select * from mytable where id = @input_parameter')\n            \n        console.dir(result1)\n    \n        // Stored procedure\n        \n        let result2 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .output('output_parameter', sql.VarChar(50))\n            .execute('procedure_name')\n        \n        console.dir(result2)\n    } catch (err) {\n        // ... error checks\n    }\n})()\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Promises\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(pool => {\n    // Query\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .query('select * from mytable where id = @input_parameter')\n}).then(result => {\n    console.dir(result)\n    \n    // Stored procedure\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nNative Promise is used by default. You can easily change this with `sql.Promise = require('myownpromisepackage')`.\n\n### ES6 Tagged template literals\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(() => {\n    return sql.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n### Callbacks\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    // Query\n\n    new sql.Request().query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n    // Stored Procedure\n\n    new sql.Request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Streaming\n\nIf you plan to work with large amount of rows, you should always use streaming. Once you enable this, you must listen for events to receive data.\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    const request = new sql.Request()\n    request.stream = true // You can set streaming differently for each request\n    request.query('select * from verylargetable') // or request.execute(procedure)\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nWhen streaming large sets of data you want to back-off or chunk the amount of data you're processing\n to prevent memory exhaustion issues; you can use the `Request.pause()` function to do this. Here is\n an example of managing rows in batches of 15:\n\n```javascript\nlet rowsToProcess = [];\nrequest.on('row', row => {\n  rowsToProcess.push(row);\n  if (rowsToProcess.length >= 15) {\n    request.pause();\n    processRows();\n  }\n});\nrequest.on('done', () => {\n    processRows();\n});\n\nfunction processRows() {\n  // process rows\n  rowsToProcess = [];\n  request.resume();\n}\n```\n\n## Connection Pools\n\nUsing a single connection pool for your application/service is recommended.\nInstantiating a pool with a callback, or immediately calling `.connect`, is asynchronous to ensure a connection can be\nestablished before returning. From that point, you're able to acquire connections as normal:  \n\n```javascript\nconst sql = require('mssql')\n\n// async/await style:\nconst pool1 = new sql.ConnectionPool(config).connect();\n\npool1.on('error', err => {\n    // ... error handler\n})\n\nasync function messageHandler() {\n    await pool1; // ensures that the pool has been created\n    try {\n    \tconst request = pool1.request(); // or: new sql.Request(pool1)\n    \tconst result = request.query('select 1 as number')\n    \tconsole.dir(result)\n    \treturn result;\n\t} catch (err) {\n        console.error('SQL error', err);\n\t}\n}\n\n// promise style:\nconst pool2 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n}).connect();\n\npool2.on('error', err => {\n    // ... error handler\n})\n\nfunction runStoredProcedure() {\n    return pool2.then((pool) => {\n\t\tpool.request() // or: new sql.Request(pool2)\n\t\t.input('input_parameter', sql.Int, 10)\n\t\t.output('output_parameter', sql.VarChar(50))\n\t\t.execute('procedure_name', (err, result) => {\n\t\t\t// ... error checks\n\t\t\tconsole.dir(result)\n\t\t})\n    });\n}\n```\n\nAwaiting or `.then`ing the pool creation is a safe way to ensure that the pool is always ready, without knowing where it\nis needed first. In practice, once the pool is created then there will be no delay for the next operation.\n\n**ES6 Tagged template literals**\n\n```javascript\nnew sql.ConnectionPool(config).connect().then(pool => {\n    return pool.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n## Configuration\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n### General (same for all drivers)\n\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **domain** - Once you set domain, driver will connect to SQL Server using domain login.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **connectionTimeout** - Connection timeout in ms (default: `15000`).\n- **requestTimeout** - Request timeout in ms (default: `15000`). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second. When passed via connection string, the key must be `request timeout`\n- **stream** - Stream recordsets/rows instead of returning them all at once as an argument of callback (default: `false`). You can also enable streaming for each request independently (`request.stream = true`). Always set to `true` if you plan to work with large amount of rows.\n- **parseJSON** - Parse JSON recordsets to JS objects (default: `false`). For more information please see section [JSON support](#json-support).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimum of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\nComplete list of pool options can be found [here](https://github.com/vincit/tarn.js/#usage).\n\n### Formats\n\nIn addition to configuration object there is an option to pass config as a connection string. Two formats of connection string are supported.\n\n##### Classic Connection String\n\n```\nServer=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true\nDriver=msnodesqlv8;Server=(local)\\INSTANCE;Database=database;UID=DOMAIN\\username;PWD=password;Encrypt=true\n```\n\n##### Connection String URI\n\n```\nmssql://username:password@localhost:1433/database?encrypt=true\nmssql://username:password@localhost/INSTANCE/database?encrypt=true&domain=DOMAIN&driver=msnodesqlv8\n```\n\n## Drivers\n\n### Tedious\n\nDefault driver, actively maintained and production ready. Platform independent, runs everywhere Node.js runs. Officially supported by Microsoft.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the configured tedious `Connection`. It can be used for attaching event handlers like in this example:\n```js\nrequire('mssql').connect(...config, beforeConnect: conn => {\n  conn.once('connect', err => { err ? console.error(err) : console.log('mssql connected')})\n  conn.once('end', err => { err ? console.error(err) : console.log('mssql disconnected')})\n}})\n```\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1434 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `true`).\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_1`, `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n- **options.appName** - Application name used for SQL server logging.\n- **options.abortTransactionOnError** - A boolean determining whether to rollback a transaction automatically if any error is encountered during the given transaction's execution. This sets the value for `XACT_ABORT` during the initial SQL phase of a connection.\n\nMore information about Tedious specific options: http://tediousjs.github.io/tedious/api-connection.html\n\n### Microsoft / Contributors Node V8 Driver for Node.js for SQL Server\n\n**Requires Node.js 0.12.x or newer. Windows only.** This driver is not part of the default package and must be installed separately by `npm install msnodesqlv8`. To use this driver, use this require syntax: `const sql = require('mssql/msnodesqlv8')`.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the connection configuration, that can be modified to pass extra parameters to the driver's `open()` method.\n- **connectionString** - Connection string (default: see below).\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not to use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n## Connections\n\nInternally, each `ConnectionPool` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool. Connection health check is built-in so once the dead connection is discovered, it is immediately replaced with a new one.\n\n**IMPORTANT**: Always attach an `error` listener to created connection. Whenever something goes wrong with the connection it will emit an error and if there is no listener it will crash your application with an uncaught error.\n\n```javascript\nconst pool = new sql.ConnectionPool({ /* config */ })\n```\n\n### Events\n\n- **error(err)** - Dispatched on connection error.\n\n---------------------------------------\n\n### connect ([callback])\n\nCreate a new connection pool. The initial probe connection is created to find out whether the configuration is valid.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after initial probe connection has established, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst pool = new sql.ConnectionPool({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n})\n\npool.connect(err => {\n    // ...\n})\n```\n\n__Errors__\n- ELOGIN (`ConnectionError`) - Login failed.\n- ETIMEOUT (`ConnectionError`) - Connection timeout.\n- EALREADYCONNECTED (`ConnectionError`) - Database is already connected!\n- EALREADYCONNECTING (`ConnectionError`) - Already connecting to database!\n- EINSTLOOKUP (`ConnectionError`) - Instance lookup failed.\n- ESOCKET (`ConnectionError`) - Socket error.\n\n---------------------------------------\n\n### close()\n\nClose all active connections in the pool.\n\n__Example__\n\n```javascript\npool.close()\n```\n\n## Request\n\n```javascript\nconst request = new sql.Request(/* [pool or transaction] */)\n```\n\nIf you omit pool/transaction argument, global pool is used instead.\n\n### Events\n\n- **recordset(columns)** - Dispatched when metadata for new recordset are parsed.\n- **row(row)** - Dispatched when new row is parsed.\n- **done(returnValue)** - Dispatched when request is complete.\n- **error(err)** - Dispatched on error.\n- **info(message)** - Dispatched on informational message.\n\n---------------------------------------\n\n### execute (procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.input('input_parameter', sql.Int, value)\nrequest.output('output_parameter', sql.Int)\nrequest.execute('procedure_name', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordsets.length) // count of recordsets returned by the procedure\n    console.log(result.recordsets[0].length) // count of rows contained in first recordset\n    console.log(result.recordset) // first recordset from result.recordsets\n    console.log(result.returnValue) // procedure return value\n    console.log(result.output) // key/value collection of output values\n    console.log(result.rowsAffected) // array of numbers, each number represents the number of rows affected by executed statemens\n\n    // ...\n})\n```\n\n__Errors__\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### input (name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automatically decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value)\nrequest.input('input_parameter', sql.Int, value)\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define your own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text)\n```\n\nYou can also overwrite the default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt)\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\nNB: Do not use parameters `@p{n}` as these are used by the internal drivers and cause a conflict.\n\n### output (name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int)\nrequest.output('output_parameter', sql.VarChar(50), 'abc')\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### pipe (stream)\n\nSets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n\n__Arguments__\n\n- **stream** - Writable stream in object mode.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.pipe(stream)\nrequest.query('select * from mytable')\nstream.on('error', err => {\n    // ...\n})\nstream.on('finish', () => {\n    // ...\n})\n```\n\n---------------------------------------\n\n### query (command, [callback])\n\nExecute the SQL command. To execute commands like `create procedure` or if you plan to work with local temporary tables, use [batch](#batch-batch-callback) instead.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n\n    // ...\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number; select 2 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n    console.log(result.recordsets[0][0].number) // return 1\n    console.log(result.recordsets[1][0].number) // return 2\n})\n```\n\n**NOTE**: To get number of rows affected by the statement(s), see section [Affected Rows](#affected-rows).\n\n---------------------------------------\n\n### batch (batch, [callback])\n\nExecute the SQL command. Unlike [query](#query-command-callback), it doesn't use `sp_executesql`, so is not likely that SQL Server will reuse the execution plan it generates for the SQL. Use this only in special cases, for example when you need to execute commands like `create procedure` which can't be executed with [query](#query-command-callback) or if you're executing statements longer than 4000 chars on SQL Server 2000. Also you should use this if you're plan to work with local temporary tables ([more information here](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)).\n\nNOTE: Table-Valued Parameter (TVP) is not supported in batch.\n\n__Arguments__\n\n- **batch** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.batch('create procedure #temporary as select * from table', (err, result) => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\nYou can enable multiple recordsets in queries with the `request.multiple = true` command.\n\n---------------------------------------\n\n### bulk (table, [options,] [callback])\n\nPerform a bulk insert.\n\n__Arguments__\n\n- **table** - `sql.Table` instance.\n- **options** - Options object to be passed through to driver (currently tedious only). Optional. If argument is a function it will be treated as the callback.\n- **callback(err, rowCount)** - A callback which is called after bulk insert has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst table = new sql.Table('table_name') // or temporary table, e.g. #temptable\ntable.create = true\ntable.columns.add('a', sql.Int, {nullable: true, primary: true})\ntable.columns.add('b', sql.VarChar(50), {nullable: false})\ntable.rows.add(777, 'test')\n\nconst request = new sql.Request()\nrequest.bulk(table, (err, result) => {\n    // ... error checks\n})\n```\n\n**IMPORTANT**: Always indicate whether the column is nullable or not!\n\n**TIP**: If you set `table.create` to `true`, module will check if the table exists before it start sending data. If it doesn't, it will automatically create it. You can specify primary key columns by setting `primary: true` to column's options. Primary key constraint on multiple columns is supported.\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n__Errors__\n- ENAME (`RequestError`) - Table name must be specified for bulk insert.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### cancel()\n\nCancel currently executing request. Return `true` if cancellation packet was send successfully.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', (err, result) => {\n    console.log(err instanceof sql.RequestError)  // true\n    console.log(err.message)                      // Cancelled.\n    console.log(err.code)                         // ECANCEL\n\n    // ...\n})\n\nrequest.cancel()\n```\n\n## Transaction\n\n**IMPORTANT:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is acquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\n```\n\nIf you omit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    const request = new sql.Request(transaction)\n    request.query('insert into mytable (mycolumn) values (12345)', (err, result) => {\n        // ... error checks\n\n        transaction.commit(err => {\n            // ... error checks\n\n            console.log(\"Transaction committed.\")\n        })\n    })\n})\n```\n\nTransaction can also be created by `const transaction = pool.transaction()`. Requests can also be created by `const request = transaction.request()`.\n\n__Aborted transactions__\n\nThis example shows how you should correctly handle transaction errors when `abortTransactionOnError` (`XACT_ABORT`) is enabled. Added in 2.0.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    let rolledBack = false\n\n    transaction.on('rollback', aborted => {\n        // emited with aborted === true\n\n        rolledBack = true\n    })\n\n    new sql.Request(transaction)\n    .query('insert into mytable (bitcolumn) values (2)', (err, result) => {\n        // insert should fail because of invalid value\n\n        if (err) {\n            if (!rolledBack) {\n                transaction.rollback(err => {\n                    // ... error checks\n                })\n            }\n        } else {\n            transaction.commit(err => {\n                // ... error checks\n            })\n        }\n    })\n})\n```\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback(aborted)** - Dispatched on successful rollback with an argument determining if the transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### begin ([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYBEGUN (`TransactionError`) - Transaction has already begun.\n\n---------------------------------------\n\n### commit ([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has committed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.commit(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't commit transaction. There is a request in progress.\n\n---------------------------------------\n\n### rollback ([callback])\n\nRollback a transaction. If the queue isn't empty, all queued requests will be Cancelled and the transaction will be marked as aborted.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.rollback(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't rollback transaction. There is a request in progress.\n\n## Prepared Statement\n\n**IMPORTANT:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is acquired from the connection pool and all subsequent executions are executed exclusively on this connection. After you call `unprepare`, the connection is then released back to the connection pool.\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\n```\n\nIf you omit the connection argument, the global connection is used instead.\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        // release the connection after queries are executed\n        ps.unprepare(err => {\n            // ... error checks\n\n        })\n    })\n})\n```\n\n**IMPORTANT**: Remember that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement when you've finished your queries!\n\nYou can execute multiple queries against the same prepared statement but you *must* unprepare the statement when you have finished using it otherwise you will cause the connection pool to run out of available connections.\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n### input (name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int)\nps.input('input_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int)\nps.output('output_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### prepare (statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.prepare('select @param as value', err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYPREPARED (`PreparedStatementError`) - Statement is already prepared.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n\n---------------------------------------\n\n### execute (values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        console.log(result.recordset[0].value) // return 12345\n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\nYou can also stream executed request.\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.stream = true\n    const request = ps.execute({param: 12345})\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n        \n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\n**TIP**: To learn more about how number of affected rows works, see section [Affected Rows](#affected-rows).\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n\n---------------------------------------\n\n### unprepare ([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.unprepare(err => {\n        // ... error checks\n\n    })\n})\n```\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n\n## CLI\n\nBefore you can start using CLI, you must install `mssql` globally with `npm install mssql -g`. Once you do that you will be able to execute `mssql` command.\n\n__Setup__\n\nCreate a `.mssql.json` configuration file (anywhere). Structure of the file is the same as the standard configuration object.\n\n```json\n{\n    \"user\": \"...\",\n    \"password\": \"...\",\n    \"server\": \"localhost\",\n    \"database\": \"...\"\n}\n```\n\n__Example__\n\n```shell\necho \"select * from mytable\" | mssql /path/to/config\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}]]\n```\n\nYou can also query for multiple recordsets.\n\n```shell\necho \"select * from mytable; select * from myothertable\" | mssql\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}],[{\"id\":15,\"name\":\"Product name\"}]]\n```\n\nIf you omit config path argument, mssql will try to load it from current working directory.\n\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n\n{ srid: 0,\n  version: 1,\n  points:\n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nconst tvp = new sql.Table() // You can optionally specify table type name in the first argument.\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50))\ntvp.columns.add('b', sql.Int)\n\n// Add rows\ntvp.rows.add('hello tvp', 777) // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('tvp', tvp)\nrequest.execute('MyCustomStoredProcedure', (err, result) => {\n    // ... error checks\n\n    console.dir(result.recordsets[0][0]) // {a: 'hello tvp', b: 777}\n})\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n## Affected Rows\n\nIf you're performing `INSERT`, `UPDATE` or `DELETE` in a query, you can read number of affected rows. The `rowsAffected` variable is an array of numbers. Each number represents number of affected rows by a single statement.\n\n__Example using Promises__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100').then(result => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using callbacks__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100', (err, result) => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using streaming__\n\n```javascript\nconst request = new sql.Request()\nrequest.stream = true\nrequest.query('update myAwesomeTable set awesomness = 100')\nrequest.on('done', result => {\n    console.log(result.rowsAffected)\n})\n```\n\n## JSON support\n\nSQL Server 2016 introduced built-in JSON serialization. By default, JSON is returned as a plain text in a special column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B`.\n\nExample\n```sql\nSELECT\n    1 AS 'a.b.c',\n    2 AS 'a.b.d',\n    3 AS 'a.x',\n    4 AS 'a.y'\nFOR JSON PATH\n```\n\nResults in:\n```javascript\nrecordset = [ { 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B': '{\"a\":{\"b\":{\"c\":1,\"d\":2},\"x\":3,\"y\":4}}' } ]\n```\n\nYou can enable built-in JSON parser with `config.parseJSON = true`. Once you enable this, recordset will contain rows of parsed JS objects. Given the same example, result will look like this:\n```javascript\nrecordset = [ { a: { b: { c: 1, d: 2 }, x: 3, y: 4 } } ]\n```\n\n**IMPORTANT**: In order for this to work, there must be exactly one column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B` in the recordset.\n\nMore information about JSON support can be found in [official documentation](https://msdn.microsoft.com/en-us/library/dn921882.aspx).\n\n## Errors\n\nThere are 4 types of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, committing and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and its original stack may be cropped. You can always access original error with `err.originalError`.\n\nSQL Server may generate more than one error for one request so you can access preceding errors with `err.precedingErrors`.\n\n### Error Codes\n\nEach known error has `name`, `code` and `message` properties.\n\nName | Code | Message\n:--- | :--- | :---\n`ConnectionError` | ELOGIN | Login failed.\n`ConnectionError` | ETIMEOUT | Connection timeout.\n`ConnectionError` | EDRIVER | Unknown driver.\n`ConnectionError` | EALREADYCONNECTED | Database is already connected!\n`ConnectionError` | EALREADYCONNECTING | Already connecting to database!\n`ConnectionError` | ENOTOPEN | Connection not yet open.\n`ConnectionError` | EINSTLOOKUP | Instance lookup failed.\n`ConnectionError` | ESOCKET | Socket error.\n`ConnectionError` | ECONNCLOSED | Connection is closed.\n`TransactionError` | ENOTBEGUN | Transaction has not begun.\n`TransactionError` | EALREADYBEGUN | Transaction has already begun.\n`TransactionError` | EREQINPROG | Can't commit/rollback transaction. There is a request in progress.\n`TransactionError` | EABORT | Transaction has been aborted.\n`RequestError` | EREQUEST | Message from SQL Server. Error object contains additional details.\n`RequestError` | ECANCEL | Cancelled.\n`RequestError` | ETIMEOUT | Request timeout.\n`RequestError` | EARGS | Invalid number of arguments.\n`RequestError` | EINJECT | SQL injection warning.\n`RequestError` | ENOCONN | No connection is specified for that request.\n`PreparedStatementError` | EARGS | Invalid number of arguments.\n`PreparedStatementError` | EINJECT | SQL injection warning.\n`PreparedStatementError` | EALREADYPREPARED | Statement is already prepared.\n`PreparedStatementError` | ENOTPREPARED | Statement is not prepared.\n\n### Detailed SQL Errors\n\nSQL errors (`RequestError` with `err.code` equal to `EREQUEST`) contains additional details.\n\n- **err.number** - The error number.\n- **err.state** - The error state, used as a modifier to the number.\n- **err.class** - The class (severity) of the error. A class of less than 10 indicates an informational message. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **err.lineNumber** - The line number in the SQL batch or stored procedure that caused the error. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **err.serverName** - The server name.\n- **err.procName** - The stored procedure name.\n\n## Informational messages\n\nTo receive informational messages generated by `PRINT` or `RAISERROR` commands use:\n\n```javascript\nconst request = new sql.Request()\nrequest.on('info', info => {\n    console.dir(info)\n})\nrequest.query('print \\'Hello world.\\';', (err, result) => {\n    // ...\n})\n```\n\nStructure of informational message:\n\n- **info.message** - Message.\n- **info.number** - The message number.\n- **info.state** - The message state, used as a modifier to the number.\n- **info.class** - The class (severity) of the message. Equal or lower than 10. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **info.lineNumber** - The line number in the SQL batch or stored procedure that generated the message. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **info.serverName** - The server name.\n- **info.procName** - The stored procedure name.\n\n## Metadata\n\nRecordset metadata are accessible through the `recordset.columns` property.\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select convert(decimal(18, 4), 1) as first, \\'asdf\\' as second', (err, result) => {\n    console.dir(result.recordset.columns)\n\n    console.log(result.recordset.columns.first.type === sql.Decimal) // true\n    console.log(result.recordset.columns.second.type === sql.VarChar) // true\n})\n```\n\nColumns structure for example above:\n\n```javascript\n{\n    first: {\n        index: 0,\n        name: 'first',\n        length: 17,\n        type: [sql.Decimal],\n        scale: 4,\n        precision: 18,\n        nullable: true,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    },\n    second: {\n        index: 1,\n        name: 'second',\n        length: 4,\n        type: [sql.VarChar],\n        nullable: false,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    }\n}\n```\n\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\")               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\")           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\")      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar)                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\")              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33)              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33)          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33)       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date())        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date())     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Variant\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length. Types `sql.XML` and `sql.Variant` are not supported as input parameters.\n\n## SQL injection\n\nThis module has built-in SQL injection protection. Always use parameters or tagged template literals to pass sanitized values to your queries.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('myval', sql.VarChar, '-- commented')\nrequest.query('select @myval as myval', (err, result) => {\n    console.dir(result)\n})\n```\n\n## Known issues\n\n### Tedious\n\n- If you're facing problems with connecting SQL Server 2000, try setting the default TDS version to 7.1 with `config.options.tdsVersion = '7_1'` ([issue](https://github.com/tediousjs/node-mssql/issues/36))\n- If you're executing a statement longer than 4000 chars on SQL Server 2000, always use [batch](#batch-batch-callback) instead of [query](#query-command-callback) ([issue](https://github.com/tediousjs/node-mssql/issues/68))\n\n### msnodesqlv8\n\n- msnodesqlv8 has problem with errors during transactions - [reported](https://github.com/tediousjs/node-mssql/issues/77).\n- msnodesqlv8 doesn't support [detailed SQL errors](#detailed-sql-errors).\n\n## 4.x to 5.x changes\n\n- Moved pool library from `node-pool` to `tarn.js`\n- `ConnectionPool.pool.size` deprecated, use `ConnectionPool.size` instead\n- `ConnectionPool.pool.available` deprecated, use `ConnectionPool.available` instead\n- `ConnectionPool.pool.pending` deprecated, use `ConnectionPool.pending` instead\n- `ConnectionPool.pool.borrowed` deprecated, use `ConnectionPool.borrowed` instead\n\n## 3.x to 4.x changes\n\n- Library & tests are rewritten to ES6.\n- `Connection` was renamed to `ConnectionPool`.\n- Drivers are no longer loaded dynamically so the library is now compatible with Webpack. To use `msnodesqlv8` driver, use `const sql = require('mssql/msnodesqlv8')` syntax.\n- Every callback/resolve now returns `result` object only. This object contains `recordsets` (array of recordsets), `recordset` (first recordset from array of recordsets), `rowsAffected` (array of numbers representig number of affected rows by each insert/update/delete statement) and `output` (key/value collection of output parameters' values).\n- Affected rows are now returned as an array. A separate number for each SQL statement.\n- Directive `multiple: true` was removed.\n- `Transaction` and `PreparedStatement` internal queues was removed.\n- ConnectionPool no longer emits `connect` and `close` events.\n- Removed verbose and debug mode.\n- Removed support for `tds` and `msnodesql` drivers.\n- Removed support for Node versions lower than 4.\n\n[npm-image]: https://img.shields.io/npm/v/mssql.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/mssql\n[downloads-image]: https://img.shields.io/npm/dm/mssql.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/mssql\n[david-image]: https://img.shields.io/david/tediousjs/node-mssql.svg?style=flat-square\n[david-url]: https://david-dm.org/tediousjs/node-mssql\n[travis-image]: https://img.shields.io/travis/tediousjs/node-mssql/master.svg?style=flat-square&label=unit\n[travis-url]: https://travis-ci.org/tediousjs/node-mssql\n[appveyor-image]: https://ci.appveyor.com/api/projects/status/e5gq1a0ujwams9t7/branch/master?svg=true\n[appveyor-url]: https://ci.appveyor.com/project/tediousjs/node-mssql\n\n[tedious-url]: https://www.npmjs.com/package/tedious\n[msnodesqlv8-url]: https://www.npmjs.com/package/msnodesqlv8\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@6.0.0-alpha.4","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-qYjHze+A+R5ooUv8U57apt3hN9VLL9A25uZ4t7qIXcEcwkHMqP6b85ds2ecj5iAP/zkwYuNPwbLCgi0Cb4/2Pw==","shasum":"909eb401367ac99fde842239e7a2ce904feee82b","tarball":"https://registry.npmjs.org/mssql/-/mssql-6.0.0-alpha.4.tgz","fileCount":19,"unpackedSize":204232,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcg78ACRA9TVsSAnZWagAAlrsP/RYOM07iYOmsF3FWdEn6\n4Dn2UoAh+Ze9NkgB195AJE8iv0ybcjhDmZf5K++DjIsWm3uGnnlcEmMLXchw\n5eDiGx9GkQLqQueMNFSD11Sj56/J704pK41LSKsO/hWnm/sFeMEUhRoimRf1\nXZmj+eqddpWQscezAbaJ51xJEDWr2cZp7BwBqllOgyv2k7SRiaqM0q/MHOhi\n5TsKvBMStE4Pxm7iCfrv2+Ggq66+bJ3d2fxj8LLlTl0FCNsC0ENtMCz99U5p\nS4Z/jGiJ8dJ1zvGD9N4TA5LKEm3gykV/F/TfEbbjp4xrH258umPaoD92/Pm5\niNbb/K1El2Yxl61fmlgYRgssc6G+al5zWXn2oX9GZFiARo8La5eM1LPU3Yyi\nTtw1JHBktrs2mhaQnpLcT9h3phe9aubSWU2/T9El1GL1Bz4indwVsUW6JnUM\njkFcl+SU6aTXPpXRTeC0TYvJ9veovM/66mZFIOrV632Fs9L1LRG3Y+gjOaHe\nzojjSSJiwgP3Or9KbLfMKcHHen+3pT1XWgdjmZQiSdTcYY3+S94fXPOcqGmu\nVLm9QDGPPJ1EvBcZrQVAZ5vGlpoFwkrKRfK2wEZBLc+cIusENRebNpXuXn44\n2Hs+YtqRIXjt27djDTFKH/o6fmuSzCOkDCdOZnjo8p2lJGznGhsiBs+ZXY+X\nBFNd\r\n=eIF+\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_6.0.0-alpha.4_1552137983732_0.21739932771256432"},"_hasShrinkwrap":false},"5.0.3":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"5.0.3","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.6.1","tedious":"^4.2.0"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"d5f844ba115678146dd1e5785ad33cabaa5670e4","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@5.0.3","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-glA7ojGBP8RYJa+XSoFNpquNYSQki4BQ9DMfXecy2cGa3nf2a3szamaualBANK1acXjXEXhheCX446vYN+LGYg==","shasum":"c13c47743ac7a8c1319e1904e8d6263b01b480fb","tarball":"https://registry.npmjs.org/mssql/-/mssql-5.0.3.tgz","fileCount":20,"unpackedSize":204857,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJciP0hCRA9TVsSAnZWagAAxP0P/RtPks/Po1Sl6lbgCCRB\nJFIY8dj63RBwFTLO2VVoJZ9+90gQiI9KuQPTnUvUD//Tvo4GnlCaKcdYUz3M\nT7xyRCCMkMilTmZCx/WBwhZmRhXgR1hLUvlNUY1KRwdkq5+Gi54w384A2Tgd\n14A+Q158b+AaVgmOHOJ+sGFkSqe+BPRKeDDUIp0uJhxfARosCIcYG+Tlyxwv\n+c/tfFUypeQ/VgZmiKLXzSae8s5RV8F8ueBAq/AybvQlit6STJ/V6qdrGNbP\nAQeVsmpwfJZRbz+QvoM3tD1APn24Abd9Hos9101ft3ycBu28C2ZmeksHFOpo\nn5zZO1U66LgpysbUNj6bHV/LsWnWp3+c+Uw1X4AD9PWwMQXq5uD0RklhHp9j\nFcbE38JU4mXEA2yPr0mAdDy2TCCGkqBECPFPo5ivRjuOObMvyr/7l9rDeIZ7\nL71pcHN6ZoaBedc3jF8nNDVlilsFUbNiL68QqZA0j6YlF+rIqCAsDxC2BVue\nxx76rQ5kOcO2nOAF2VcYsRo0DO1s4u+ZxFhc0r0rmwAr/DvWYVl1LZuMRTo8\ncwTlzcgTnzOMpgF43YM5CpN9jdcKiwLgDKu8U7vj544e5QotrXKFBpmUjBnx\nOYzgSWNqawJwsG1YLfGY8hKqVGKwUb9r/sAOerJI2VunvuN7+F1lqGUFpANO\nTA5A\r\n=qboc\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_5.0.3_1552481568006_0.041196979734906325"},"_hasShrinkwrap":false},"6.0.0-alpha.5":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"6.0.0-alpha.5","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^4","tarn":"^1.1.4","tedious":"^6"},"devDependencies":{"mocha":"^6","standard":"^12"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"b056a1a2c11ef192553125268d2c3f785e643771","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@6.0.0-alpha.5","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-RObrr8crVsjnMjJs0PPanzmJnzClNGb3tEsGonNJ87m9XVUduVTuf9rWRDGut1iqTgYxf/kHnZ9ixxU986vq6w==","shasum":"4f73fd9e31f7af31aec7d0ef890ec1d6eaa01cb0","tarball":"https://registry.npmjs.org/mssql/-/mssql-6.0.0-alpha.5.tgz","fileCount":20,"unpackedSize":209533,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJciP2rCRA9TVsSAnZWagAAS8cP+wbTuYNedA/GhAa5AMbT\nbhSMrmZ3XVOooTLTuIbt3Vu0HKwt/C+uBdawaorjtUsEUKwMLuUP1Zbe5Nrc\nBMkGQznpCpFRvcN3MsCJslca8Ft5baVqT+i0adF5B4u7zteBALUNrZFCTK0u\n8Kyw4mIVcX1zXrCR5EklUI3HoMWywXeS73WowRzMnHNpb7YWQgGMcFpgsid4\nMIYpUlnslnXiU6iP02NrBowbeVo6PMDTp3zCqGgtSi+CkvJxqiOvwpavARsb\nXURuQSWqQOMhilPj6p+FPpcemy5FemvA49czy1t8zIvLLom/OSiQsw1ekXJY\njpwipQu9lE4DDh43akK1o7siNP521pDVlx6BfktGu/Avov2oipaBjIPrYAD5\n9JW+ra3FVeJtxsZpVQIiuKY6UNpIRxhwluBUmmij1gwHWvJv30HDEBydS9wv\nTql8Be4jjGQdlQ57HRCpCR7Ar71n39YIkmIhPT7Nv6fGhMdynsiObqsiR3g+\nZzruLT0CARkRFih4WjODlHUhu4Hm2ecHNZA+mh69vgxt44ku9+QPnqth0h4C\nLnSlH2yRmpwZ9BlWGoA09iHjBP5zsrwQEbDotSjwdLZp+jeyg025RW2hiRE3\ntTFwuaNVVVNFQREV7yZS+XyMTYZzNxY2/pWhAT7ZSWkdtRYgN3ya7R88dooS\noAHR\r\n=zwtE\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_6.0.0-alpha.5_1552481706911_0.9710146830103137"},"_hasShrinkwrap":false},"6.0.0-alpha.6":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"6.0.0-alpha.6","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^4","tarn":"^1.1.4","tedious":"^6"},"devDependencies":{"mocha":"^6","standard":"^12"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"9d7756c99e4cffe5f9510e2957d3cc3c12d86a8b","readme":"# node-mssql\n\nMicrosoft SQL Server client for Node.js\n\n[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Travis CI][travis-image]][travis-url] [![Appveyor CI][appveyor-image]][appveyor-url] [![Join the chat at https://gitter.im/patriksimek/node-mssql](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/patriksimek/node-mssql?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSupported TDS drivers:\n- [Tedious][tedious-url] (pure JavaScript - Windows/macOS/Linux, default)\n- [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server][msnodesqlv8-url] (native - Windows only)\n\n## Installation\n\n    npm install mssql\n\n## Quick Example\n\n```javascript\nconst sql = require('mssql')\n\nasync () => {\n    try {\n        // make sure that any items are correctly URL encoded in the connection string\n        await sql.connect('mssql://username:password@localhost/database')\n        const result = await sql.query`select * from mytable where id = ${value}`\n        console.dir(result)\n    } catch (err) {\n        // ... error checks\n    }\n}\n```\n\nIf you're on Windows Azure, add `?encrypt=true` to your connection string. See [docs](#configuration) to learn more.\n\nParts of the connection URI should be correctly URL encoded so that the URI can be parsed correctly.\n\n## Documentation\n\n### Examples\n\n* [Async/Await](#asyncawait)\n* [Promises](#promises)\n* [ES6 Tagged template literals](#es6-tagged-template-literals)\n* [Callbacks](#callbacks)\n* [Streaming](#streaming)\n* [Connection Pools](#connection-pools)\n\n### Configuration\n\n* [General](#general-same-for-all-drivers)\n* [Formats](#formats)\n\n### Drivers\n\n* [Tedious](#tedious)\n* [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server](#microsoft--contributors-node-v8-driver-for-nodejs-for-sql-server)\n\n### Connections\n\n* [ConnectionPool](#connections-1)\n* [connect](#connect-callback)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute-procedure-callback)\n* [input](#input-name-type-value)\n* [output](#output-name-type-value)\n* [pipe](#pipe-stream)\n* [query](#query-command-callback)\n* [batch](#batch-batch-callback)\n* [bulk](#bulk-table-options-callback)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin-isolationlevel-callback)\n* [commit](#commit-callback)\n* [rollback](#rollback-callback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#input-name-type)\n* [output](#output-name-type)\n* [prepare](#prepare-statement-callback)\n* [execute](#execute-values-callback)\n* [unprepare](#unprepare-callback)\n\n### Other\n\n* [CLI](#cli)\n* [Geography and Geometry](#geography-and-geometry)\n* [Table-Valued Parameter](#table-valued-parameter-tvp)\n* [Affected Rows](#affected-rows)\n* [JSON support](#json-support)\n* [Errors](#errors)\n* [Informational messages](#informational-messages)\n* [Metadata](#metadata)\n* [Data Types](#data-types)\n* [SQL injection](#sql-injection)\n* [Known Issues](#known-issues)\n* [Contributing](https://github.com/tediousjs/node-mssql/wiki/Contributing)\n* [4.x to 5.x changes](#4x-to-5x-changes)\n* [3.x to 4.x changes](#3x-to-4x-changes)\n* [3.x Documentation](https://github.com/tediousjs/node-mssql/blob/1893969195045a250f0fdeeb2de7f30dcf6689ad/README.md)\n\n## Examples\n\n### Config\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...',\n}\n```\n\n\n### Async/Await\n\n```javascript\nconst sql = require('mssql')\n\n(async function () {\n    try {\n        let pool = await sql.connect(config)\n        let result1 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .query('select * from mytable where id = @input_parameter')\n            \n        console.dir(result1)\n    \n        // Stored procedure\n        \n        let result2 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .output('output_parameter', sql.VarChar(50))\n            .execute('procedure_name')\n        \n        console.dir(result2)\n    } catch (err) {\n        // ... error checks\n    }\n})()\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Promises\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(pool => {\n    // Query\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .query('select * from mytable where id = @input_parameter')\n}).then(result => {\n    console.dir(result)\n    \n    // Stored procedure\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nNative Promise is used by default. You can easily change this with `sql.Promise = require('myownpromisepackage')`.\n\n### ES6 Tagged template literals\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(() => {\n    return sql.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n### Callbacks\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    // Query\n\n    new sql.Request().query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n    // Stored Procedure\n\n    new sql.Request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Streaming\n\nIf you plan to work with large amount of rows, you should always use streaming. Once you enable this, you must listen for events to receive data.\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    const request = new sql.Request()\n    request.stream = true // You can set streaming differently for each request\n    request.query('select * from verylargetable') // or request.execute(procedure)\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nWhen streaming large sets of data you want to back-off or chunk the amount of data you're processing\n to prevent memory exhaustion issues; you can use the `Request.pause()` function to do this. Here is\n an example of managing rows in batches of 15:\n\n```javascript\nlet rowsToProcess = [];\nrequest.on('row', row => {\n  rowsToProcess.push(row);\n  if (rowsToProcess.length >= 15) {\n    request.pause();\n    processRows();\n  }\n});\nrequest.on('done', () => {\n    processRows();\n});\n\nfunction processRows() {\n  // process rows\n  rowsToProcess = [];\n  request.resume();\n}\n```\n\n## Connection Pools\n\nUsing a single connection pool for your application/service is recommended.\nInstantiating a pool with a callback, or immediately calling `.connect`, is asynchronous to ensure a connection can be\nestablished before returning. From that point, you're able to acquire connections as normal:  \n\n```javascript\nconst sql = require('mssql')\n\n// async/await style:\nconst pool1 = new sql.ConnectionPool(config).connect();\n\npool1.on('error', err => {\n    // ... error handler\n})\n\nasync function messageHandler() {\n    await pool1; // ensures that the pool has been created\n    try {\n    \tconst request = pool1.request(); // or: new sql.Request(pool1)\n    \tconst result = request.query('select 1 as number')\n    \tconsole.dir(result)\n    \treturn result;\n\t} catch (err) {\n        console.error('SQL error', err);\n\t}\n}\n\n// promise style:\nconst pool2 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n}).connect();\n\npool2.on('error', err => {\n    // ... error handler\n})\n\nfunction runStoredProcedure() {\n    return pool2.then((pool) => {\n\t\tpool.request() // or: new sql.Request(pool2)\n\t\t.input('input_parameter', sql.Int, 10)\n\t\t.output('output_parameter', sql.VarChar(50))\n\t\t.execute('procedure_name', (err, result) => {\n\t\t\t// ... error checks\n\t\t\tconsole.dir(result)\n\t\t})\n    });\n}\n```\n\nAwaiting or `.then`ing the pool creation is a safe way to ensure that the pool is always ready, without knowing where it\nis needed first. In practice, once the pool is created then there will be no delay for the next operation.\n\n**ES6 Tagged template literals**\n\n```javascript\nnew sql.ConnectionPool(config).connect().then(pool => {\n    return pool.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n## Configuration\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n### General (same for all drivers)\n\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **domain** - Once you set domain, driver will connect to SQL Server using domain login.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **connectionTimeout** - Connection timeout in ms (default: `15000`).\n- **requestTimeout** - Request timeout in ms (default: `15000`). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second. When passed via connection string, the key must be `request timeout`\n- **stream** - Stream recordsets/rows instead of returning them all at once as an argument of callback (default: `false`). You can also enable streaming for each request independently (`request.stream = true`). Always set to `true` if you plan to work with large amount of rows.\n- **parseJSON** - Parse JSON recordsets to JS objects (default: `false`). For more information please see section [JSON support](#json-support).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimum of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\nComplete list of pool options can be found [here](https://github.com/vincit/tarn.js/#usage).\n\n### Formats\n\nIn addition to configuration object there is an option to pass config as a connection string. Two formats of connection string are supported.\n\n##### Classic Connection String\n\n```\nServer=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true\nDriver=msnodesqlv8;Server=(local)\\INSTANCE;Database=database;UID=DOMAIN\\username;PWD=password;Encrypt=true\n```\n\n##### Connection String URI\n\n```\nmssql://username:password@localhost:1433/database?encrypt=true\nmssql://username:password@localhost/INSTANCE/database?encrypt=true&domain=DOMAIN&driver=msnodesqlv8\n```\n\n## Drivers\n\n### Tedious\n\nDefault driver, actively maintained and production ready. Platform independent, runs everywhere Node.js runs. Officially supported by Microsoft.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the configured tedious `Connection`. It can be used for attaching event handlers like in this example:\n```js\nrequire('mssql').connect(...config, beforeConnect: conn => {\n  conn.once('connect', err => { err ? console.error(err) : console.log('mssql connected')})\n  conn.once('end', err => { err ? console.error(err) : console.log('mssql disconnected')})\n}})\n```\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1434 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `true`).\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_1`, `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n- **options.appName** - Application name used for SQL server logging.\n- **options.abortTransactionOnError** - A boolean determining whether to rollback a transaction automatically if any error is encountered during the given transaction's execution. This sets the value for `XACT_ABORT` during the initial SQL phase of a connection.\n\nMore information about Tedious specific options: http://tediousjs.github.io/tedious/api-connection.html\n\n### Microsoft / Contributors Node V8 Driver for Node.js for SQL Server\n\n**Requires Node.js 0.12.x or newer. Windows only.** This driver is not part of the default package and must be installed separately by `npm install msnodesqlv8`. To use this driver, use this require syntax: `const sql = require('mssql/msnodesqlv8')`.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the connection configuration, that can be modified to pass extra parameters to the driver's `open()` method.\n- **connectionString** - Connection string (default: see below).\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not to use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n## Connections\n\nInternally, each `ConnectionPool` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool. Connection health check is built-in so once the dead connection is discovered, it is immediately replaced with a new one.\n\n**IMPORTANT**: Always attach an `error` listener to created connection. Whenever something goes wrong with the connection it will emit an error and if there is no listener it will crash your application with an uncaught error.\n\n```javascript\nconst pool = new sql.ConnectionPool({ /* config */ })\n```\n\n### Events\n\n- **error(err)** - Dispatched on connection error.\n\n---------------------------------------\n\n### connect ([callback])\n\nCreate a new connection pool. The initial probe connection is created to find out whether the configuration is valid.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after initial probe connection has established, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst pool = new sql.ConnectionPool({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n})\n\npool.connect(err => {\n    // ...\n})\n```\n\n__Errors__\n- ELOGIN (`ConnectionError`) - Login failed.\n- ETIMEOUT (`ConnectionError`) - Connection timeout.\n- EALREADYCONNECTED (`ConnectionError`) - Database is already connected!\n- EALREADYCONNECTING (`ConnectionError`) - Already connecting to database!\n- EINSTLOOKUP (`ConnectionError`) - Instance lookup failed.\n- ESOCKET (`ConnectionError`) - Socket error.\n\n---------------------------------------\n\n### close()\n\nClose all active connections in the pool.\n\n__Example__\n\n```javascript\npool.close()\n```\n\n## Request\n\n```javascript\nconst request = new sql.Request(/* [pool or transaction] */)\n```\n\nIf you omit pool/transaction argument, global pool is used instead.\n\n### Events\n\n- **recordset(columns)** - Dispatched when metadata for new recordset are parsed.\n- **row(row)** - Dispatched when new row is parsed.\n- **done(returnValue)** - Dispatched when request is complete.\n- **error(err)** - Dispatched on error.\n- **info(message)** - Dispatched on informational message.\n\n---------------------------------------\n\n### execute (procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.input('input_parameter', sql.Int, value)\nrequest.output('output_parameter', sql.Int)\nrequest.execute('procedure_name', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordsets.length) // count of recordsets returned by the procedure\n    console.log(result.recordsets[0].length) // count of rows contained in first recordset\n    console.log(result.recordset) // first recordset from result.recordsets\n    console.log(result.returnValue) // procedure return value\n    console.log(result.output) // key/value collection of output values\n    console.log(result.rowsAffected) // array of numbers, each number represents the number of rows affected by executed statemens\n\n    // ...\n})\n```\n\n__Errors__\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### input (name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automatically decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value)\nrequest.input('input_parameter', sql.Int, value)\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define your own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text)\n```\n\nYou can also overwrite the default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt)\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\nNB: Do not use parameters `@p{n}` as these are used by the internal drivers and cause a conflict.\n\n### output (name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int)\nrequest.output('output_parameter', sql.VarChar(50), 'abc')\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### pipe (stream)\n\nSets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n\n__Arguments__\n\n- **stream** - Writable stream in object mode.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.pipe(stream)\nrequest.query('select * from mytable')\nstream.on('error', err => {\n    // ...\n})\nstream.on('finish', () => {\n    // ...\n})\n```\n\n---------------------------------------\n\n### query (command, [callback])\n\nExecute the SQL command. To execute commands like `create procedure` or if you plan to work with local temporary tables, use [batch](#batch-batch-callback) instead.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n\n    // ...\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number; select 2 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n    console.log(result.recordsets[0][0].number) // return 1\n    console.log(result.recordsets[1][0].number) // return 2\n})\n```\n\n**NOTE**: To get number of rows affected by the statement(s), see section [Affected Rows](#affected-rows).\n\n---------------------------------------\n\n### batch (batch, [callback])\n\nExecute the SQL command. Unlike [query](#query-command-callback), it doesn't use `sp_executesql`, so is not likely that SQL Server will reuse the execution plan it generates for the SQL. Use this only in special cases, for example when you need to execute commands like `create procedure` which can't be executed with [query](#query-command-callback) or if you're executing statements longer than 4000 chars on SQL Server 2000. Also you should use this if you're plan to work with local temporary tables ([more information here](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)).\n\nNOTE: Table-Valued Parameter (TVP) is not supported in batch.\n\n__Arguments__\n\n- **batch** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.batch('create procedure #temporary as select * from table', (err, result) => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\nYou can enable multiple recordsets in queries with the `request.multiple = true` command.\n\n---------------------------------------\n\n### bulk (table, [options,] [callback])\n\nPerform a bulk insert.\n\n__Arguments__\n\n- **table** - `sql.Table` instance.\n- **options** - Options object to be passed through to driver (currently tedious only). Optional. If argument is a function it will be treated as the callback.\n- **callback(err, rowCount)** - A callback which is called after bulk insert has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst table = new sql.Table('table_name') // or temporary table, e.g. #temptable\ntable.create = true\ntable.columns.add('a', sql.Int, {nullable: true, primary: true})\ntable.columns.add('b', sql.VarChar(50), {nullable: false})\ntable.rows.add(777, 'test')\n\nconst request = new sql.Request()\nrequest.bulk(table, (err, result) => {\n    // ... error checks\n})\n```\n\n**IMPORTANT**: Always indicate whether the column is nullable or not!\n\n**TIP**: If you set `table.create` to `true`, module will check if the table exists before it start sending data. If it doesn't, it will automatically create it. You can specify primary key columns by setting `primary: true` to column's options. Primary key constraint on multiple columns is supported.\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n__Errors__\n- ENAME (`RequestError`) - Table name must be specified for bulk insert.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### cancel()\n\nCancel currently executing request. Return `true` if cancellation packet was send successfully.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', (err, result) => {\n    console.log(err instanceof sql.RequestError)  // true\n    console.log(err.message)                      // Cancelled.\n    console.log(err.code)                         // ECANCEL\n\n    // ...\n})\n\nrequest.cancel()\n```\n\n## Transaction\n\n**IMPORTANT:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is acquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\n```\n\nIf you omit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    const request = new sql.Request(transaction)\n    request.query('insert into mytable (mycolumn) values (12345)', (err, result) => {\n        // ... error checks\n\n        transaction.commit(err => {\n            // ... error checks\n\n            console.log(\"Transaction committed.\")\n        })\n    })\n})\n```\n\nTransaction can also be created by `const transaction = pool.transaction()`. Requests can also be created by `const request = transaction.request()`.\n\n__Aborted transactions__\n\nThis example shows how you should correctly handle transaction errors when `abortTransactionOnError` (`XACT_ABORT`) is enabled. Added in 2.0.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    let rolledBack = false\n\n    transaction.on('rollback', aborted => {\n        // emited with aborted === true\n\n        rolledBack = true\n    })\n\n    new sql.Request(transaction)\n    .query('insert into mytable (bitcolumn) values (2)', (err, result) => {\n        // insert should fail because of invalid value\n\n        if (err) {\n            if (!rolledBack) {\n                transaction.rollback(err => {\n                    // ... error checks\n                })\n            }\n        } else {\n            transaction.commit(err => {\n                // ... error checks\n            })\n        }\n    })\n})\n```\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback(aborted)** - Dispatched on successful rollback with an argument determining if the transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### begin ([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYBEGUN (`TransactionError`) - Transaction has already begun.\n\n---------------------------------------\n\n### commit ([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has committed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.commit(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't commit transaction. There is a request in progress.\n\n---------------------------------------\n\n### rollback ([callback])\n\nRollback a transaction. If the queue isn't empty, all queued requests will be Cancelled and the transaction will be marked as aborted.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.rollback(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't rollback transaction. There is a request in progress.\n\n## Prepared Statement\n\n**IMPORTANT:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is acquired from the connection pool and all subsequent executions are executed exclusively on this connection. After you call `unprepare`, the connection is then released back to the connection pool.\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\n```\n\nIf you omit the connection argument, the global connection is used instead.\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        // release the connection after queries are executed\n        ps.unprepare(err => {\n            // ... error checks\n\n        })\n    })\n})\n```\n\n**IMPORTANT**: Remember that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement when you've finished your queries!\n\nYou can execute multiple queries against the same prepared statement but you *must* unprepare the statement when you have finished using it otherwise you will cause the connection pool to run out of available connections.\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n### input (name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int)\nps.input('input_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int)\nps.output('output_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### prepare (statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.prepare('select @param as value', err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYPREPARED (`PreparedStatementError`) - Statement is already prepared.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n\n---------------------------------------\n\n### execute (values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        console.log(result.recordset[0].value) // return 12345\n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\nYou can also stream executed request.\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.stream = true\n    const request = ps.execute({param: 12345})\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n        \n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\n**TIP**: To learn more about how number of affected rows works, see section [Affected Rows](#affected-rows).\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n\n---------------------------------------\n\n### unprepare ([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.unprepare(err => {\n        // ... error checks\n\n    })\n})\n```\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n\n## CLI\n\nBefore you can start using CLI, you must install `mssql` globally with `npm install mssql -g`. Once you do that you will be able to execute `mssql` command.\n\n__Setup__\n\nCreate a `.mssql.json` configuration file (anywhere). Structure of the file is the same as the standard configuration object.\n\n```json\n{\n    \"user\": \"...\",\n    \"password\": \"...\",\n    \"server\": \"localhost\",\n    \"database\": \"...\"\n}\n```\n\n__Example__\n\n```shell\necho \"select * from mytable\" | mssql /path/to/config\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}]]\n```\n\nYou can also query for multiple recordsets.\n\n```shell\necho \"select * from mytable; select * from myothertable\" | mssql\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}],[{\"id\":15,\"name\":\"Product name\"}]]\n```\n\nIf you omit config path argument, mssql will try to load it from current working directory.\n\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n\n{ srid: 0,\n  version: 1,\n  points:\n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nconst tvp = new sql.Table() // You can optionally specify table type name in the first argument.\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50))\ntvp.columns.add('b', sql.Int)\n\n// Add rows\ntvp.rows.add('hello tvp', 777) // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('tvp', tvp)\nrequest.execute('MyCustomStoredProcedure', (err, result) => {\n    // ... error checks\n\n    console.dir(result.recordsets[0][0]) // {a: 'hello tvp', b: 777}\n})\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n## Affected Rows\n\nIf you're performing `INSERT`, `UPDATE` or `DELETE` in a query, you can read number of affected rows. The `rowsAffected` variable is an array of numbers. Each number represents number of affected rows by a single statement.\n\n__Example using Promises__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100').then(result => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using callbacks__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100', (err, result) => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using streaming__\n\n```javascript\nconst request = new sql.Request()\nrequest.stream = true\nrequest.query('update myAwesomeTable set awesomness = 100')\nrequest.on('done', result => {\n    console.log(result.rowsAffected)\n})\n```\n\n## JSON support\n\nSQL Server 2016 introduced built-in JSON serialization. By default, JSON is returned as a plain text in a special column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B`.\n\nExample\n```sql\nSELECT\n    1 AS 'a.b.c',\n    2 AS 'a.b.d',\n    3 AS 'a.x',\n    4 AS 'a.y'\nFOR JSON PATH\n```\n\nResults in:\n```javascript\nrecordset = [ { 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B': '{\"a\":{\"b\":{\"c\":1,\"d\":2},\"x\":3,\"y\":4}}' } ]\n```\n\nYou can enable built-in JSON parser with `config.parseJSON = true`. Once you enable this, recordset will contain rows of parsed JS objects. Given the same example, result will look like this:\n```javascript\nrecordset = [ { a: { b: { c: 1, d: 2 }, x: 3, y: 4 } } ]\n```\n\n**IMPORTANT**: In order for this to work, there must be exactly one column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B` in the recordset.\n\nMore information about JSON support can be found in [official documentation](https://msdn.microsoft.com/en-us/library/dn921882.aspx).\n\n## Errors\n\nThere are 4 types of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, committing and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and its original stack may be cropped. You can always access original error with `err.originalError`.\n\nSQL Server may generate more than one error for one request so you can access preceding errors with `err.precedingErrors`.\n\n### Error Codes\n\nEach known error has `name`, `code` and `message` properties.\n\nName | Code | Message\n:--- | :--- | :---\n`ConnectionError` | ELOGIN | Login failed.\n`ConnectionError` | ETIMEOUT | Connection timeout.\n`ConnectionError` | EDRIVER | Unknown driver.\n`ConnectionError` | EALREADYCONNECTED | Database is already connected!\n`ConnectionError` | EALREADYCONNECTING | Already connecting to database!\n`ConnectionError` | ENOTOPEN | Connection not yet open.\n`ConnectionError` | EINSTLOOKUP | Instance lookup failed.\n`ConnectionError` | ESOCKET | Socket error.\n`ConnectionError` | ECONNCLOSED | Connection is closed.\n`TransactionError` | ENOTBEGUN | Transaction has not begun.\n`TransactionError` | EALREADYBEGUN | Transaction has already begun.\n`TransactionError` | EREQINPROG | Can't commit/rollback transaction. There is a request in progress.\n`TransactionError` | EABORT | Transaction has been aborted.\n`RequestError` | EREQUEST | Message from SQL Server. Error object contains additional details.\n`RequestError` | ECANCEL | Cancelled.\n`RequestError` | ETIMEOUT | Request timeout.\n`RequestError` | EARGS | Invalid number of arguments.\n`RequestError` | EINJECT | SQL injection warning.\n`RequestError` | ENOCONN | No connection is specified for that request.\n`PreparedStatementError` | EARGS | Invalid number of arguments.\n`PreparedStatementError` | EINJECT | SQL injection warning.\n`PreparedStatementError` | EALREADYPREPARED | Statement is already prepared.\n`PreparedStatementError` | ENOTPREPARED | Statement is not prepared.\n\n### Detailed SQL Errors\n\nSQL errors (`RequestError` with `err.code` equal to `EREQUEST`) contains additional details.\n\n- **err.number** - The error number.\n- **err.state** - The error state, used as a modifier to the number.\n- **err.class** - The class (severity) of the error. A class of less than 10 indicates an informational message. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **err.lineNumber** - The line number in the SQL batch or stored procedure that caused the error. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **err.serverName** - The server name.\n- **err.procName** - The stored procedure name.\n\n## Informational messages\n\nTo receive informational messages generated by `PRINT` or `RAISERROR` commands use:\n\n```javascript\nconst request = new sql.Request()\nrequest.on('info', info => {\n    console.dir(info)\n})\nrequest.query('print \\'Hello world.\\';', (err, result) => {\n    // ...\n})\n```\n\nStructure of informational message:\n\n- **info.message** - Message.\n- **info.number** - The message number.\n- **info.state** - The message state, used as a modifier to the number.\n- **info.class** - The class (severity) of the message. Equal or lower than 10. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **info.lineNumber** - The line number in the SQL batch or stored procedure that generated the message. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **info.serverName** - The server name.\n- **info.procName** - The stored procedure name.\n\n## Metadata\n\nRecordset metadata are accessible through the `recordset.columns` property.\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select convert(decimal(18, 4), 1) as first, \\'asdf\\' as second', (err, result) => {\n    console.dir(result.recordset.columns)\n\n    console.log(result.recordset.columns.first.type === sql.Decimal) // true\n    console.log(result.recordset.columns.second.type === sql.VarChar) // true\n})\n```\n\nColumns structure for example above:\n\n```javascript\n{\n    first: {\n        index: 0,\n        name: 'first',\n        length: 17,\n        type: [sql.Decimal],\n        scale: 4,\n        precision: 18,\n        nullable: true,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    },\n    second: {\n        index: 1,\n        name: 'second',\n        length: 4,\n        type: [sql.VarChar],\n        nullable: false,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    }\n}\n```\n\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\")               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\")           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\")      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar)                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\")              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33)              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33)          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33)       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date())        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date())     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Variant\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length. Types `sql.XML` and `sql.Variant` are not supported as input parameters.\n\n## SQL injection\n\nThis module has built-in SQL injection protection. Always use parameters or tagged template literals to pass sanitized values to your queries.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('myval', sql.VarChar, '-- commented')\nrequest.query('select @myval as myval', (err, result) => {\n    console.dir(result)\n})\n```\n\n## Known issues\n\n### Tedious\n\n- If you're facing problems with connecting SQL Server 2000, try setting the default TDS version to 7.1 with `config.options.tdsVersion = '7_1'` ([issue](https://github.com/tediousjs/node-mssql/issues/36))\n- If you're executing a statement longer than 4000 chars on SQL Server 2000, always use [batch](#batch-batch-callback) instead of [query](#query-command-callback) ([issue](https://github.com/tediousjs/node-mssql/issues/68))\n\n### msnodesqlv8\n\n- msnodesqlv8 has problem with errors during transactions - [reported](https://github.com/tediousjs/node-mssql/issues/77).\n- msnodesqlv8 doesn't support [detailed SQL errors](#detailed-sql-errors).\n\n## 4.x to 5.x changes\n\n- Moved pool library from `node-pool` to `tarn.js`\n- `ConnectionPool.pool.size` deprecated, use `ConnectionPool.size` instead\n- `ConnectionPool.pool.available` deprecated, use `ConnectionPool.available` instead\n- `ConnectionPool.pool.pending` deprecated, use `ConnectionPool.pending` instead\n- `ConnectionPool.pool.borrowed` deprecated, use `ConnectionPool.borrowed` instead\n\n## 3.x to 4.x changes\n\n- Library & tests are rewritten to ES6.\n- `Connection` was renamed to `ConnectionPool`.\n- Drivers are no longer loaded dynamically so the library is now compatible with Webpack. To use `msnodesqlv8` driver, use `const sql = require('mssql/msnodesqlv8')` syntax.\n- Every callback/resolve now returns `result` object only. This object contains `recordsets` (array of recordsets), `recordset` (first recordset from array of recordsets), `rowsAffected` (array of numbers representig number of affected rows by each insert/update/delete statement) and `output` (key/value collection of output parameters' values).\n- Affected rows are now returned as an array. A separate number for each SQL statement.\n- Directive `multiple: true` was removed.\n- `Transaction` and `PreparedStatement` internal queues was removed.\n- ConnectionPool no longer emits `connect` and `close` events.\n- Removed verbose and debug mode.\n- Removed support for `tds` and `msnodesql` drivers.\n- Removed support for Node versions lower than 4.\n\n[npm-image]: https://img.shields.io/npm/v/mssql.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/mssql\n[downloads-image]: https://img.shields.io/npm/dm/mssql.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/mssql\n[david-image]: https://img.shields.io/david/tediousjs/node-mssql.svg?style=flat-square\n[david-url]: https://david-dm.org/tediousjs/node-mssql\n[travis-image]: https://img.shields.io/travis/tediousjs/node-mssql/master.svg?style=flat-square&label=unit\n[travis-url]: https://travis-ci.org/tediousjs/node-mssql\n[appveyor-image]: https://ci.appveyor.com/api/projects/status/e5gq1a0ujwams9t7/branch/master?svg=true\n[appveyor-url]: https://ci.appveyor.com/project/tediousjs/node-mssql\n\n[tedious-url]: https://www.npmjs.com/package/tedious\n[msnodesqlv8-url]: https://www.npmjs.com/package/msnodesqlv8\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@6.0.0-alpha.6","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-xvNerJsXAZaVe9mu2kWbRtFYSxomBojfNfeWeNc3fhvx4eSm+CGuUcCtuR2w0C8aGeMeNx75j+3if0r0DKr/cw==","shasum":"69b096d42b9eb6d455d1a1a9342c253b5f86a7ed","tarball":"https://registry.npmjs.org/mssql/-/mssql-6.0.0-alpha.6.tgz","fileCount":20,"unpackedSize":211006,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJci39/CRA9TVsSAnZWagAAqkYP/18cG/9tPO/7DtTE3PEG\n1WnFeZpJFs3nmOdqrrA1hyJPWdAas5E9WlunTdBAvGbbVbMpcCkEvmYal7oK\nN441UIfQy00g7kQfxcuqt4ExoEk99nP2yqBOZ/aGZNk3X+goQhWhICB2KzXk\nLAODMbI99xTcgBmEoBR0DekBW3VSmQ0x4ITyJ2dge1/ckU4DtsX0SWZ73+XK\n4FdyKz70ZVgNcGjOwSbYuIpdAEdYfL8IPP3kZumckFkCjNLPMMiY+ubs252u\nm0EACGuJZEWBTCcwHCYwlpJrhX7BtTxfZODgEbRJFgj3tp+kDI1Zzb4gj3GB\ngcUSFhmvaZjB9B+WvvTlD/hqUXwDlaqlrhisLGpc+9OeZ1rCzmZRKKF3JWIH\nvzHRasBHJh6aXjhI1qdu316gCaXtA5615GSTIQFovIGlaH6AN3WZnYm9ew7g\nJrl6csIfOMHYZdz7/6jgzqCd2q0KIvKfERXn0RkiveIAVsvHdw/EY6GpYguA\nFqj1wI6vEIdUx7NV9iNuYqJ2y4BJW5nPVJKb6Vw8I7A1PpqEVFHU8NmlpxD5\nrmxwsYQvuuUnbPfnMlsVDHDceeSKKPHWic5cfEcG/d+7Rbfq3Zc7UylAAbtK\nNfyxY8F27fEciTgVn3MWpfuJ0vZGrhOSRuT0SmtNvOOz5hIBfOPkPL29H6us\nWU2u\r\n=yqQM\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_6.0.0-alpha.6_1552646014803_0.7861960996946824"},"_hasShrinkwrap":false},"6.0.0-alpha.7":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"6.0.0-alpha.7","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^4","tarn":"^1.1.4","tedious":"^6.1.0"},"devDependencies":{"mocha":"^6","standard":"^12"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"c806b42855d42bf8c1886e5d00decec459109416","readme":"# node-mssql\n\nMicrosoft SQL Server client for Node.js\n\n[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Travis CI][travis-image]][travis-url] [![Appveyor CI][appveyor-image]][appveyor-url] [![Join the chat at https://gitter.im/patriksimek/node-mssql](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/patriksimek/node-mssql?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSupported TDS drivers:\n- [Tedious][tedious-url] (pure JavaScript - Windows/macOS/Linux, default)\n- [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server][msnodesqlv8-url] (native - Windows only)\n\n## Installation\n\n    npm install mssql\n\n## Quick Example\n\n```javascript\nconst sql = require('mssql')\n\nasync () => {\n    try {\n        // make sure that any items are correctly URL encoded in the connection string\n        await sql.connect('mssql://username:password@localhost/database')\n        const result = await sql.query`select * from mytable where id = ${value}`\n        console.dir(result)\n    } catch (err) {\n        // ... error checks\n    }\n}\n```\n\nIf you're on Windows Azure, add `?encrypt=true` to your connection string. See [docs](#configuration) to learn more.\n\nParts of the connection URI should be correctly URL encoded so that the URI can be parsed correctly.\n\n## Documentation\n\n### Examples\n\n* [Async/Await](#asyncawait)\n* [Promises](#promises)\n* [ES6 Tagged template literals](#es6-tagged-template-literals)\n* [Callbacks](#callbacks)\n* [Streaming](#streaming)\n* [Connection Pools](#connection-pools)\n\n### Configuration\n\n* [General](#general-same-for-all-drivers)\n* [Formats](#formats)\n\n### Drivers\n\n* [Tedious](#tedious)\n* [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server](#microsoft--contributors-node-v8-driver-for-nodejs-for-sql-server)\n\n### Connections\n\n* [ConnectionPool](#connections-1)\n* [connect](#connect-callback)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute-procedure-callback)\n* [input](#input-name-type-value)\n* [output](#output-name-type-value)\n* [pipe](#pipe-stream)\n* [query](#query-command-callback)\n* [batch](#batch-batch-callback)\n* [bulk](#bulk-table-options-callback)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin-isolationlevel-callback)\n* [commit](#commit-callback)\n* [rollback](#rollback-callback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#input-name-type)\n* [output](#output-name-type)\n* [prepare](#prepare-statement-callback)\n* [execute](#execute-values-callback)\n* [unprepare](#unprepare-callback)\n\n### Other\n\n* [CLI](#cli)\n* [Geography and Geometry](#geography-and-geometry)\n* [Table-Valued Parameter](#table-valued-parameter-tvp)\n* [Affected Rows](#affected-rows)\n* [JSON support](#json-support)\n* [Errors](#errors)\n* [Informational messages](#informational-messages)\n* [Metadata](#metadata)\n* [Data Types](#data-types)\n* [SQL injection](#sql-injection)\n* [Known Issues](#known-issues)\n* [Contributing](https://github.com/tediousjs/node-mssql/wiki/Contributing)\n* [4.x to 5.x changes](#4x-to-5x-changes)\n* [3.x to 4.x changes](#3x-to-4x-changes)\n* [3.x Documentation](https://github.com/tediousjs/node-mssql/blob/1893969195045a250f0fdeeb2de7f30dcf6689ad/README.md)\n\n## Examples\n\n### Config\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...',\n}\n```\n\n\n### Async/Await\n\n```javascript\nconst sql = require('mssql')\n\n(async function () {\n    try {\n        let pool = await sql.connect(config)\n        let result1 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .query('select * from mytable where id = @input_parameter')\n            \n        console.dir(result1)\n    \n        // Stored procedure\n        \n        let result2 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .output('output_parameter', sql.VarChar(50))\n            .execute('procedure_name')\n        \n        console.dir(result2)\n    } catch (err) {\n        // ... error checks\n    }\n})()\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Promises\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(pool => {\n    // Query\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .query('select * from mytable where id = @input_parameter')\n}).then(result => {\n    console.dir(result)\n    \n    // Stored procedure\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nNative Promise is used by default. You can easily change this with `sql.Promise = require('myownpromisepackage')`.\n\n### ES6 Tagged template literals\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(() => {\n    return sql.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n### Callbacks\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    // Query\n\n    new sql.Request().query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n    // Stored Procedure\n\n    new sql.Request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Streaming\n\nIf you plan to work with large amount of rows, you should always use streaming. Once you enable this, you must listen for events to receive data.\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    const request = new sql.Request()\n    request.stream = true // You can set streaming differently for each request\n    request.query('select * from verylargetable') // or request.execute(procedure)\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nWhen streaming large sets of data you want to back-off or chunk the amount of data you're processing\n to prevent memory exhaustion issues; you can use the `Request.pause()` function to do this. Here is\n an example of managing rows in batches of 15:\n\n```javascript\nlet rowsToProcess = [];\nrequest.on('row', row => {\n  rowsToProcess.push(row);\n  if (rowsToProcess.length >= 15) {\n    request.pause();\n    processRows();\n  }\n});\nrequest.on('done', () => {\n    processRows();\n});\n\nfunction processRows() {\n  // process rows\n  rowsToProcess = [];\n  request.resume();\n}\n```\n\n## Connection Pools\n\nUsing a single connection pool for your application/service is recommended.\nInstantiating a pool with a callback, or immediately calling `.connect`, is asynchronous to ensure a connection can be\nestablished before returning. From that point, you're able to acquire connections as normal:  \n\n```javascript\nconst sql = require('mssql')\n\n// async/await style:\nconst pool1 = new sql.ConnectionPool(config).connect();\n\npool1.on('error', err => {\n    // ... error handler\n})\n\nasync function messageHandler() {\n    await pool1; // ensures that the pool has been created\n    try {\n    \tconst request = pool1.request(); // or: new sql.Request(pool1)\n    \tconst result = request.query('select 1 as number')\n    \tconsole.dir(result)\n    \treturn result;\n\t} catch (err) {\n        console.error('SQL error', err);\n\t}\n}\n\n// promise style:\nconst pool2 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n}).connect();\n\npool2.on('error', err => {\n    // ... error handler\n})\n\nfunction runStoredProcedure() {\n    return pool2.then((pool) => {\n\t\tpool.request() // or: new sql.Request(pool2)\n\t\t.input('input_parameter', sql.Int, 10)\n\t\t.output('output_parameter', sql.VarChar(50))\n\t\t.execute('procedure_name', (err, result) => {\n\t\t\t// ... error checks\n\t\t\tconsole.dir(result)\n\t\t})\n    });\n}\n```\n\nAwaiting or `.then`ing the pool creation is a safe way to ensure that the pool is always ready, without knowing where it\nis needed first. In practice, once the pool is created then there will be no delay for the next operation.\n\n**ES6 Tagged template literals**\n\n```javascript\nnew sql.ConnectionPool(config).connect().then(pool => {\n    return pool.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n## Configuration\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n### General (same for all drivers)\n\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **domain** - Once you set domain, driver will connect to SQL Server using domain login.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **connectionTimeout** - Connection timeout in ms (default: `15000`).\n- **requestTimeout** - Request timeout in ms (default: `15000`). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second. When passed via connection string, the key must be `request timeout`\n- **stream** - Stream recordsets/rows instead of returning them all at once as an argument of callback (default: `false`). You can also enable streaming for each request independently (`request.stream = true`). Always set to `true` if you plan to work with large amount of rows.\n- **parseJSON** - Parse JSON recordsets to JS objects (default: `false`). For more information please see section [JSON support](#json-support).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimum of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\nComplete list of pool options can be found [here](https://github.com/vincit/tarn.js/#usage).\n\n### Formats\n\nIn addition to configuration object there is an option to pass config as a connection string. Two formats of connection string are supported.\n\n##### Classic Connection String\n\n```\nServer=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true\nDriver=msnodesqlv8;Server=(local)\\INSTANCE;Database=database;UID=DOMAIN\\username;PWD=password;Encrypt=true\n```\n\n##### Connection String URI\n\n```\nmssql://username:password@localhost:1433/database?encrypt=true\nmssql://username:password@localhost/INSTANCE/database?encrypt=true&domain=DOMAIN&driver=msnodesqlv8\n```\n\n## Drivers\n\n### Tedious\n\nDefault driver, actively maintained and production ready. Platform independent, runs everywhere Node.js runs. Officially supported by Microsoft.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the configured tedious `Connection`. It can be used for attaching event handlers like in this example:\n```js\nrequire('mssql').connect(...config, beforeConnect: conn => {\n  conn.once('connect', err => { err ? console.error(err) : console.log('mssql connected')})\n  conn.once('end', err => { err ? console.error(err) : console.log('mssql disconnected')})\n}})\n```\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1434 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `true`).\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_1`, `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n- **options.appName** - Application name used for SQL server logging.\n- **options.abortTransactionOnError** - A boolean determining whether to rollback a transaction automatically if any error is encountered during the given transaction's execution. This sets the value for `XACT_ABORT` during the initial SQL phase of a connection.\n\nMore information about Tedious specific options: http://tediousjs.github.io/tedious/api-connection.html\n\n### Microsoft / Contributors Node V8 Driver for Node.js for SQL Server\n\n**Requires Node.js 0.12.x or newer. Windows only.** This driver is not part of the default package and must be installed separately by `npm install msnodesqlv8`. To use this driver, use this require syntax: `const sql = require('mssql/msnodesqlv8')`.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the connection configuration, that can be modified to pass extra parameters to the driver's `open()` method.\n- **connectionString** - Connection string (default: see below).\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not to use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n## Connections\n\nInternally, each `ConnectionPool` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool. Connection health check is built-in so once the dead connection is discovered, it is immediately replaced with a new one.\n\n**IMPORTANT**: Always attach an `error` listener to created connection. Whenever something goes wrong with the connection it will emit an error and if there is no listener it will crash your application with an uncaught error.\n\n```javascript\nconst pool = new sql.ConnectionPool({ /* config */ })\n```\n\n### Events\n\n- **error(err)** - Dispatched on connection error.\n\n---------------------------------------\n\n### connect ([callback])\n\nCreate a new connection pool. The initial probe connection is created to find out whether the configuration is valid.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after initial probe connection has established, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst pool = new sql.ConnectionPool({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n})\n\npool.connect(err => {\n    // ...\n})\n```\n\n__Errors__\n- ELOGIN (`ConnectionError`) - Login failed.\n- ETIMEOUT (`ConnectionError`) - Connection timeout.\n- EALREADYCONNECTED (`ConnectionError`) - Database is already connected!\n- EALREADYCONNECTING (`ConnectionError`) - Already connecting to database!\n- EINSTLOOKUP (`ConnectionError`) - Instance lookup failed.\n- ESOCKET (`ConnectionError`) - Socket error.\n\n---------------------------------------\n\n### close()\n\nClose all active connections in the pool.\n\n__Example__\n\n```javascript\npool.close()\n```\n\n## Request\n\n```javascript\nconst request = new sql.Request(/* [pool or transaction] */)\n```\n\nIf you omit pool/transaction argument, global pool is used instead.\n\n### Events\n\n- **recordset(columns)** - Dispatched when metadata for new recordset are parsed.\n- **row(row)** - Dispatched when new row is parsed.\n- **done(returnValue)** - Dispatched when request is complete.\n- **error(err)** - Dispatched on error.\n- **info(message)** - Dispatched on informational message.\n\n---------------------------------------\n\n### execute (procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.input('input_parameter', sql.Int, value)\nrequest.output('output_parameter', sql.Int)\nrequest.execute('procedure_name', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordsets.length) // count of recordsets returned by the procedure\n    console.log(result.recordsets[0].length) // count of rows contained in first recordset\n    console.log(result.recordset) // first recordset from result.recordsets\n    console.log(result.returnValue) // procedure return value\n    console.log(result.output) // key/value collection of output values\n    console.log(result.rowsAffected) // array of numbers, each number represents the number of rows affected by executed statemens\n\n    // ...\n})\n```\n\n__Errors__\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### input (name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automatically decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value)\nrequest.input('input_parameter', sql.Int, value)\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define your own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text)\n```\n\nYou can also overwrite the default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt)\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\nNB: Do not use parameters `@p{n}` as these are used by the internal drivers and cause a conflict.\n\n### output (name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int)\nrequest.output('output_parameter', sql.VarChar(50), 'abc')\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### pipe (stream)\n\nSets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n\n__Arguments__\n\n- **stream** - Writable stream in object mode.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.pipe(stream)\nrequest.query('select * from mytable')\nstream.on('error', err => {\n    // ...\n})\nstream.on('finish', () => {\n    // ...\n})\n```\n\n---------------------------------------\n\n### query (command, [callback])\n\nExecute the SQL command. To execute commands like `create procedure` or if you plan to work with local temporary tables, use [batch](#batch-batch-callback) instead.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n\n    // ...\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number; select 2 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n    console.log(result.recordsets[0][0].number) // return 1\n    console.log(result.recordsets[1][0].number) // return 2\n})\n```\n\n**NOTE**: To get number of rows affected by the statement(s), see section [Affected Rows](#affected-rows).\n\n---------------------------------------\n\n### batch (batch, [callback])\n\nExecute the SQL command. Unlike [query](#query-command-callback), it doesn't use `sp_executesql`, so is not likely that SQL Server will reuse the execution plan it generates for the SQL. Use this only in special cases, for example when you need to execute commands like `create procedure` which can't be executed with [query](#query-command-callback) or if you're executing statements longer than 4000 chars on SQL Server 2000. Also you should use this if you're plan to work with local temporary tables ([more information here](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)).\n\nNOTE: Table-Valued Parameter (TVP) is not supported in batch.\n\n__Arguments__\n\n- **batch** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.batch('create procedure #temporary as select * from table', (err, result) => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\nYou can enable multiple recordsets in queries with the `request.multiple = true` command.\n\n---------------------------------------\n\n### bulk (table, [options,] [callback])\n\nPerform a bulk insert.\n\n__Arguments__\n\n- **table** - `sql.Table` instance.\n- **options** - Options object to be passed through to driver (currently tedious only). Optional. If argument is a function it will be treated as the callback.\n- **callback(err, rowCount)** - A callback which is called after bulk insert has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst table = new sql.Table('table_name') // or temporary table, e.g. #temptable\ntable.create = true\ntable.columns.add('a', sql.Int, {nullable: true, primary: true})\ntable.columns.add('b', sql.VarChar(50), {nullable: false})\ntable.rows.add(777, 'test')\n\nconst request = new sql.Request()\nrequest.bulk(table, (err, result) => {\n    // ... error checks\n})\n```\n\n**IMPORTANT**: Always indicate whether the column is nullable or not!\n\n**TIP**: If you set `table.create` to `true`, module will check if the table exists before it start sending data. If it doesn't, it will automatically create it. You can specify primary key columns by setting `primary: true` to column's options. Primary key constraint on multiple columns is supported.\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n__Errors__\n- ENAME (`RequestError`) - Table name must be specified for bulk insert.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### cancel()\n\nCancel currently executing request. Return `true` if cancellation packet was send successfully.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', (err, result) => {\n    console.log(err instanceof sql.RequestError)  // true\n    console.log(err.message)                      // Cancelled.\n    console.log(err.code)                         // ECANCEL\n\n    // ...\n})\n\nrequest.cancel()\n```\n\n## Transaction\n\n**IMPORTANT:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is acquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\n```\n\nIf you omit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    const request = new sql.Request(transaction)\n    request.query('insert into mytable (mycolumn) values (12345)', (err, result) => {\n        // ... error checks\n\n        transaction.commit(err => {\n            // ... error checks\n\n            console.log(\"Transaction committed.\")\n        })\n    })\n})\n```\n\nTransaction can also be created by `const transaction = pool.transaction()`. Requests can also be created by `const request = transaction.request()`.\n\n__Aborted transactions__\n\nThis example shows how you should correctly handle transaction errors when `abortTransactionOnError` (`XACT_ABORT`) is enabled. Added in 2.0.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    let rolledBack = false\n\n    transaction.on('rollback', aborted => {\n        // emited with aborted === true\n\n        rolledBack = true\n    })\n\n    new sql.Request(transaction)\n    .query('insert into mytable (bitcolumn) values (2)', (err, result) => {\n        // insert should fail because of invalid value\n\n        if (err) {\n            if (!rolledBack) {\n                transaction.rollback(err => {\n                    // ... error checks\n                })\n            }\n        } else {\n            transaction.commit(err => {\n                // ... error checks\n            })\n        }\n    })\n})\n```\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback(aborted)** - Dispatched on successful rollback with an argument determining if the transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### begin ([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYBEGUN (`TransactionError`) - Transaction has already begun.\n\n---------------------------------------\n\n### commit ([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has committed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.commit(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't commit transaction. There is a request in progress.\n\n---------------------------------------\n\n### rollback ([callback])\n\nRollback a transaction. If the queue isn't empty, all queued requests will be Cancelled and the transaction will be marked as aborted.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.rollback(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't rollback transaction. There is a request in progress.\n\n## Prepared Statement\n\n**IMPORTANT:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is acquired from the connection pool and all subsequent executions are executed exclusively on this connection. After you call `unprepare`, the connection is then released back to the connection pool.\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\n```\n\nIf you omit the connection argument, the global connection is used instead.\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        // release the connection after queries are executed\n        ps.unprepare(err => {\n            // ... error checks\n\n        })\n    })\n})\n```\n\n**IMPORTANT**: Remember that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement when you've finished your queries!\n\nYou can execute multiple queries against the same prepared statement but you *must* unprepare the statement when you have finished using it otherwise you will cause the connection pool to run out of available connections.\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n### input (name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int)\nps.input('input_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int)\nps.output('output_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### prepare (statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.prepare('select @param as value', err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYPREPARED (`PreparedStatementError`) - Statement is already prepared.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n\n---------------------------------------\n\n### execute (values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        console.log(result.recordset[0].value) // return 12345\n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\nYou can also stream executed request.\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.stream = true\n    const request = ps.execute({param: 12345})\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n        \n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\n**TIP**: To learn more about how number of affected rows works, see section [Affected Rows](#affected-rows).\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n\n---------------------------------------\n\n### unprepare ([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.unprepare(err => {\n        // ... error checks\n\n    })\n})\n```\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n\n## CLI\n\nBefore you can start using CLI, you must install `mssql` globally with `npm install mssql -g`. Once you do that you will be able to execute `mssql` command.\n\n__Setup__\n\nCreate a `.mssql.json` configuration file (anywhere). Structure of the file is the same as the standard configuration object.\n\n```json\n{\n    \"user\": \"...\",\n    \"password\": \"...\",\n    \"server\": \"localhost\",\n    \"database\": \"...\"\n}\n```\n\n__Example__\n\n```shell\necho \"select * from mytable\" | mssql /path/to/config\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}]]\n```\n\nYou can also query for multiple recordsets.\n\n```shell\necho \"select * from mytable; select * from myothertable\" | mssql\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}],[{\"id\":15,\"name\":\"Product name\"}]]\n```\n\nIf you omit config path argument, mssql will try to load it from current working directory.\n\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n\n{ srid: 0,\n  version: 1,\n  points:\n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nconst tvp = new sql.Table() // You can optionally specify table type name in the first argument.\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50))\ntvp.columns.add('b', sql.Int)\n\n// Add rows\ntvp.rows.add('hello tvp', 777) // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('tvp', tvp)\nrequest.execute('MyCustomStoredProcedure', (err, result) => {\n    // ... error checks\n\n    console.dir(result.recordsets[0][0]) // {a: 'hello tvp', b: 777}\n})\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n## Affected Rows\n\nIf you're performing `INSERT`, `UPDATE` or `DELETE` in a query, you can read number of affected rows. The `rowsAffected` variable is an array of numbers. Each number represents number of affected rows by a single statement.\n\n__Example using Promises__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100').then(result => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using callbacks__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100', (err, result) => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using streaming__\n\n```javascript\nconst request = new sql.Request()\nrequest.stream = true\nrequest.query('update myAwesomeTable set awesomness = 100')\nrequest.on('done', result => {\n    console.log(result.rowsAffected)\n})\n```\n\n## JSON support\n\nSQL Server 2016 introduced built-in JSON serialization. By default, JSON is returned as a plain text in a special column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B`.\n\nExample\n```sql\nSELECT\n    1 AS 'a.b.c',\n    2 AS 'a.b.d',\n    3 AS 'a.x',\n    4 AS 'a.y'\nFOR JSON PATH\n```\n\nResults in:\n```javascript\nrecordset = [ { 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B': '{\"a\":{\"b\":{\"c\":1,\"d\":2},\"x\":3,\"y\":4}}' } ]\n```\n\nYou can enable built-in JSON parser with `config.parseJSON = true`. Once you enable this, recordset will contain rows of parsed JS objects. Given the same example, result will look like this:\n```javascript\nrecordset = [ { a: { b: { c: 1, d: 2 }, x: 3, y: 4 } } ]\n```\n\n**IMPORTANT**: In order for this to work, there must be exactly one column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B` in the recordset.\n\nMore information about JSON support can be found in [official documentation](https://msdn.microsoft.com/en-us/library/dn921882.aspx).\n\n## Errors\n\nThere are 4 types of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, committing and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and its original stack may be cropped. You can always access original error with `err.originalError`.\n\nSQL Server may generate more than one error for one request so you can access preceding errors with `err.precedingErrors`.\n\n### Error Codes\n\nEach known error has `name`, `code` and `message` properties.\n\nName | Code | Message\n:--- | :--- | :---\n`ConnectionError` | ELOGIN | Login failed.\n`ConnectionError` | ETIMEOUT | Connection timeout.\n`ConnectionError` | EDRIVER | Unknown driver.\n`ConnectionError` | EALREADYCONNECTED | Database is already connected!\n`ConnectionError` | EALREADYCONNECTING | Already connecting to database!\n`ConnectionError` | ENOTOPEN | Connection not yet open.\n`ConnectionError` | EINSTLOOKUP | Instance lookup failed.\n`ConnectionError` | ESOCKET | Socket error.\n`ConnectionError` | ECONNCLOSED | Connection is closed.\n`TransactionError` | ENOTBEGUN | Transaction has not begun.\n`TransactionError` | EALREADYBEGUN | Transaction has already begun.\n`TransactionError` | EREQINPROG | Can't commit/rollback transaction. There is a request in progress.\n`TransactionError` | EABORT | Transaction has been aborted.\n`RequestError` | EREQUEST | Message from SQL Server. Error object contains additional details.\n`RequestError` | ECANCEL | Cancelled.\n`RequestError` | ETIMEOUT | Request timeout.\n`RequestError` | EARGS | Invalid number of arguments.\n`RequestError` | EINJECT | SQL injection warning.\n`RequestError` | ENOCONN | No connection is specified for that request.\n`PreparedStatementError` | EARGS | Invalid number of arguments.\n`PreparedStatementError` | EINJECT | SQL injection warning.\n`PreparedStatementError` | EALREADYPREPARED | Statement is already prepared.\n`PreparedStatementError` | ENOTPREPARED | Statement is not prepared.\n\n### Detailed SQL Errors\n\nSQL errors (`RequestError` with `err.code` equal to `EREQUEST`) contains additional details.\n\n- **err.number** - The error number.\n- **err.state** - The error state, used as a modifier to the number.\n- **err.class** - The class (severity) of the error. A class of less than 10 indicates an informational message. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **err.lineNumber** - The line number in the SQL batch or stored procedure that caused the error. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **err.serverName** - The server name.\n- **err.procName** - The stored procedure name.\n\n## Informational messages\n\nTo receive informational messages generated by `PRINT` or `RAISERROR` commands use:\n\n```javascript\nconst request = new sql.Request()\nrequest.on('info', info => {\n    console.dir(info)\n})\nrequest.query('print \\'Hello world.\\';', (err, result) => {\n    // ...\n})\n```\n\nStructure of informational message:\n\n- **info.message** - Message.\n- **info.number** - The message number.\n- **info.state** - The message state, used as a modifier to the number.\n- **info.class** - The class (severity) of the message. Equal or lower than 10. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **info.lineNumber** - The line number in the SQL batch or stored procedure that generated the message. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **info.serverName** - The server name.\n- **info.procName** - The stored procedure name.\n\n## Metadata\n\nRecordset metadata are accessible through the `recordset.columns` property.\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select convert(decimal(18, 4), 1) as first, \\'asdf\\' as second', (err, result) => {\n    console.dir(result.recordset.columns)\n\n    console.log(result.recordset.columns.first.type === sql.Decimal) // true\n    console.log(result.recordset.columns.second.type === sql.VarChar) // true\n})\n```\n\nColumns structure for example above:\n\n```javascript\n{\n    first: {\n        index: 0,\n        name: 'first',\n        length: 17,\n        type: [sql.Decimal],\n        scale: 4,\n        precision: 18,\n        nullable: true,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    },\n    second: {\n        index: 1,\n        name: 'second',\n        length: 4,\n        type: [sql.VarChar],\n        nullable: false,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    }\n}\n```\n\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\")               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\")           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\")      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar)                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\")              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33)              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33)          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33)       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date())        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date())     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Variant\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length. Types `sql.XML` and `sql.Variant` are not supported as input parameters.\n\n## SQL injection\n\nThis module has built-in SQL injection protection. Always use parameters or tagged template literals to pass sanitized values to your queries.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('myval', sql.VarChar, '-- commented')\nrequest.query('select @myval as myval', (err, result) => {\n    console.dir(result)\n})\n```\n\n## Known issues\n\n### Tedious\n\n- If you're facing problems with connecting SQL Server 2000, try setting the default TDS version to 7.1 with `config.options.tdsVersion = '7_1'` ([issue](https://github.com/tediousjs/node-mssql/issues/36))\n- If you're executing a statement longer than 4000 chars on SQL Server 2000, always use [batch](#batch-batch-callback) instead of [query](#query-command-callback) ([issue](https://github.com/tediousjs/node-mssql/issues/68))\n\n### msnodesqlv8\n\n- msnodesqlv8 has problem with errors during transactions - [reported](https://github.com/tediousjs/node-mssql/issues/77).\n- msnodesqlv8 doesn't support [detailed SQL errors](#detailed-sql-errors).\n\n## 4.x to 5.x changes\n\n- Moved pool library from `node-pool` to `tarn.js`\n- `ConnectionPool.pool.size` deprecated, use `ConnectionPool.size` instead\n- `ConnectionPool.pool.available` deprecated, use `ConnectionPool.available` instead\n- `ConnectionPool.pool.pending` deprecated, use `ConnectionPool.pending` instead\n- `ConnectionPool.pool.borrowed` deprecated, use `ConnectionPool.borrowed` instead\n\n## 3.x to 4.x changes\n\n- Library & tests are rewritten to ES6.\n- `Connection` was renamed to `ConnectionPool`.\n- Drivers are no longer loaded dynamically so the library is now compatible with Webpack. To use `msnodesqlv8` driver, use `const sql = require('mssql/msnodesqlv8')` syntax.\n- Every callback/resolve now returns `result` object only. This object contains `recordsets` (array of recordsets), `recordset` (first recordset from array of recordsets), `rowsAffected` (array of numbers representig number of affected rows by each insert/update/delete statement) and `output` (key/value collection of output parameters' values).\n- Affected rows are now returned as an array. A separate number for each SQL statement.\n- Directive `multiple: true` was removed.\n- `Transaction` and `PreparedStatement` internal queues was removed.\n- ConnectionPool no longer emits `connect` and `close` events.\n- Removed verbose and debug mode.\n- Removed support for `tds` and `msnodesql` drivers.\n- Removed support for Node versions lower than 4.\n\n[npm-image]: https://img.shields.io/npm/v/mssql.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/mssql\n[downloads-image]: https://img.shields.io/npm/dm/mssql.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/mssql\n[david-image]: https://img.shields.io/david/tediousjs/node-mssql.svg?style=flat-square\n[david-url]: https://david-dm.org/tediousjs/node-mssql\n[travis-image]: https://img.shields.io/travis/tediousjs/node-mssql/master.svg?style=flat-square&label=unit\n[travis-url]: https://travis-ci.org/tediousjs/node-mssql\n[appveyor-image]: https://ci.appveyor.com/api/projects/status/e5gq1a0ujwams9t7/branch/master?svg=true\n[appveyor-url]: https://ci.appveyor.com/project/tediousjs/node-mssql\n\n[tedious-url]: https://www.npmjs.com/package/tedious\n[msnodesqlv8-url]: https://www.npmjs.com/package/msnodesqlv8\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@6.0.0-alpha.7","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-+4lRMaTAHNHteXyr4CzEJF5hxfkoh9stJQXHxcPA/3srTH40Q8FF+yGw4337bL23pGs+3KMJ11NGe1KmmOBaGg==","shasum":"618dc374c6f2223e8868022543cec0f4dd6851c7","tarball":"https://registry.npmjs.org/mssql/-/mssql-6.0.0-alpha.7.tgz","fileCount":20,"unpackedSize":211010,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcmNGPCRA9TVsSAnZWagAA4LYQAJqg/YDUu5q+vrbuTPeo\nADfafwtF96oQg8XYbFcgEkP7Jf1TbQK0SgBAphXIPAWaltm9bJ7PI3vIvBLB\nhX05+P7nG9QjvSGZQtPLvIKWfuk6WzI+4BKZiBqaiFpPRjgA18M9Rfteu667\nGfOc4FPZBrJB1L+W48zCGKLOgDeCd24CfhwjaVI7RB2jgZ6S8JDTNo8h+Pq9\nv9+yQRuYDZH9p10Fz6hjB3ScmFhkorXuR9b8uheitn4Lx6SNJclDf6uYXMi8\nm24/CrlZcqTj6RWvDZzyHwvgWE8c15Hr8LrdjpMq+m2yz/jS2Cj0/k8V0tum\nPhVwKVvnVQPfIQAL+StKfsydfVrMCTdUfh63aSKtXhNmXDIiNm7+GpUfI9y0\nsv//h5ImC5qHY5+hs7JBNFjRnRjQNSt1KQA/qCI6feryPulcb1Dkv4o3+eJU\n4f7BKkOcl/xmucK3sJRsceK9UjVzVaYl0wYSF10P1ArTPtkp97DVtX56WypC\n7CVJjaY0XdyAtbEq3fccslOgeqQQQXNftCJQ3Ypfex74GOD6abwFfZAgQ6lu\nWUFEDqtHwROGmbq7iyQ9UeWgwhw7e8FyFOJ4fvSmy+Lwo9mQognHqgSXTqQv\nMjBhxnkU/aaPq7Bj8jyuzFpi5eIoneTwl/cqyBE0e5/FtP9EER2KAlkQ2LlT\n4JQX\r\n=2ymw\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_6.0.0-alpha.7_1553518990913_0.4282702658781401"},"_hasShrinkwrap":false},"4.3.6":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.3.6","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.6.1","tedious":"^2.7.1"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=4"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha -t 15000 test/common/unit.js","test-tedious":"mocha -t 15000 test/tedious","test-msnodesqlv8":"mocha -t 15000 test/msnodesqlv8","test-cli":"mocha -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"1f85d75a8782de32e2bbe2d65e444071ef3a5346","readme":"# node-mssql\n\nMicrosoft SQL Server client for Node.js\n\n[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Travis CI][travis-image]][travis-url] [![Appveyor CI][appveyor-image]][appveyor-url] [![Join the chat at https://gitter.im/patriksimek/node-mssql](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/patriksimek/node-mssql?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSupported TDS drivers:\n- [Tedious][tedious-url] (pure JavaScript - Windows/macOS/Linux, default)\n- [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server][msnodesqlv8-url] (native - Windows only)\n\n## Installation\n\n    npm install mssql\n\nUse `@next` tag to install the most recent version with latest fixes and features.\n\n    npm install mssql@next\n\n## Quick Example\n\n```javascript\nconst sql = require('mssql')\n\nasync () => {\n    try {\n        await sql.connect('mssql://username:password@localhost/database')\n        const result = await sql.query`select * from mytable where id = ${value}`\n        console.dir(result)\n    } catch (err) {\n        // ... error checks\n    }\n}\n```\n\nIf you're on Windows Azure, add `?encrypt=true` to your connection string. See [docs](#configuration) to learn more.\n\n## Documentation\n\n### Examples\n\n* [Async/Await](#asyncawait)\n* [Promises](#promises)\n* [ES6 Tagged template literals](#es6-tagged-template-literals)\n* [Callbacks](#callbacks)\n* [Streaming](#streaming)\n* [Connection Pools](#connection-pools)\n\n### Configuration\n\n* [General](#general-same-for-all-drivers)\n* [Formats](#formats)\n\n### Drivers\n\n* [Tedious](#tedious)\n* [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server](#microsoft--contributors-node-v8-driver-for-nodejs-for-sql-server)\n\n### Connections\n\n* [ConnectionPool](#connections-1)\n* [connect](#connect-callback)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute-procedure-callback)\n* [input](#input-name-type-value)\n* [output](#output-name-type-value)\n* [pipe](#pipe-stream)\n* [query](#query-command-callback)\n* [batch](#batch-batch-callback)\n* [bulk](#bulk-table-callback)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin-isolationlevel-callback)\n* [commit](#commit-callback)\n* [rollback](#rollback-callback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#input-name-type)\n* [output](#output-name-type)\n* [prepare](#prepare-statement-callback)\n* [execute](#execute-values-callback)\n* [unprepare](#unprepare-callback)\n\n### Other\n\n* [CLI](#cli)\n* [Geography and Geometry](#geography-and-geometry)\n* [Table-Valued Parameter](#table-valued-parameter-tvp)\n* [Affected Rows](#affected-rows)\n* [JSON support](#json-support)\n* [Errors](#errors)\n* [Informational messages](#informational-messages)\n* [Metadata](#metadata)\n* [Data Types](#data-types)\n* [SQL injection](#sql-injection)\n* [Known Issues](#known-issues)\n* [Contributing](https://github.com/tediousjs/node-mssql/wiki/Contributing)\n* [3.x to 4.x changes](#3x-to-4x-changes)\n* [3.x Documentation](https://github.com/tediousjs/node-mssql/blob/1893969195045a250f0fdeeb2de7f30dcf6689ad/README.md)\n\n## Examples\n\n### Config\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...',\n\n    options: {\n        encrypt: true // Use this if you're on Windows Azure\n    }\n}\n```\n\n\n### Async/Await\n\n```javascript\nconst sql = require('mssql')\n\n(async function () {\n    try {\n        let pool = await sql.connect(config)\n        let result1 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .query('select * from mytable where id = @input_parameter')\n            \n        console.dir(result1)\n    \n        // Stored procedure\n        \n        let result2 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .output('output_parameter', sql.VarChar(50))\n            .execute('procedure_name')\n        \n        console.dir(result2)\n    } catch (err) {\n        // ... error checks\n    }\n})()\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Promises\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(pool => {\n    // Query\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .query('select * from mytable where id = @input_parameter')\n}).then(result => {\n    console.dir(result)\n    \n    // Stored procedure\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nNative Promise is used by default. You can easily change this with `sql.Promise = require('myownpromisepackage')`.\n\n### ES6 Tagged template literals\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(() => {\n    return sql.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n### Callbacks\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    // Query\n\n    new sql.Request().query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n    // Stored Procedure\n\n    new sql.Request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Streaming\n\nIf you plan to work with large amount of rows, you should always use streaming. Once you enable this, you must listen for events to receive data.\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    const request = new sql.Request()\n    request.stream = true // You can set streaming differently for each request\n    request.query('select * from verylargetable') // or request.execute(procedure)\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n## Connection Pools\n\nUsing a single connection pool for your application/service is recommended.\nInstantiating a pool with a callback, or immediately calling `.connect`, is asynchronous to ensure a connection can be\nestablished before returning. From that point, you're able to acquire connections as normal:  \n\n```javascript\nconst sql = require('mssql')\n\n// async/await style:\nconst pool1 = new sql.ConnectionPool(config).connect();\n\npool1.on('error', err => {\n    // ... error handler\n})\n\nasync function messageHandler() {\n    await pool1; // ensures that the pool has been created\n    try {\n    \tconst request = pool1.request(); // or: new sql.Request(pool1)\n    \tconst result = request.query('select 1 as number')\n    \tconsole.dir(result)\n    \treturn result;\n\t} catch (err) {\n        console.error('SQL error', err);\n\t}\n}\n\n// promise style:\nconst pool2 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n});\n\npool2.on('error', err => {\n    // ... error handler\n})\n\nfunction runStoredProcedure() {\n    return pool2.then((pool) => {\n\t\tpool.request() // or: new sql.Request(pool2)\n\t\t.input('input_parameter', sql.Int, 10)\n\t\t.output('output_parameter', sql.VarChar(50))\n\t\t.execute('procedure_name', (err, result) => {\n\t\t\t// ... error checks\n\t\t\tconsole.dir(result)\n\t\t})\n    });\n}\n```\n\nAwaiting or `.then`ing the pool creation is a safe way to ensure that the pool is always ready, without knowing where it\nis needed first. In practice, once the pool is created then there will be no delay for the next operation.\n\n**ES6 Tagged template literals**\n\n```javascript\nnew sql.ConnectionPool(config).connect().then(pool => {\n    return pool.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n## Configuration\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n### General (same for all drivers)\n\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **domain** - Once you set domain, driver will connect to SQL Server using domain login.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **connectionTimeout** - Connection timeout in ms (default: `15000`).\n- **requestTimeout** - Request timeout in ms (default: `15000`). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second. When passed via connection string, the key must be `request timeout`\n- **stream** - Stream recordsets/rows instead of returning them all at once as an argument of callback (default: `false`). You can also enable streaming for each request independently (`request.stream = true`). Always set to `true` if you plan to work with large amount of rows.\n- **parseJSON** - Parse JSON recordsets to JS objects (default: `false`). For more information please see section [JSON support](#json-support).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimum of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\nComplete list of pool options can be found [here](https://github.com/coopernurse/node-pool).\n\n### Formats\n\nIn addition to configuration object there is an option to pass config as a connection string. Two formats of connection string are supported.\n\n##### Classic Connection String\n\n```\nServer=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true\nDriver=msnodesqlv8;Server=(local)\\INSTANCE;Database=database;UID=DOMAIN\\username;PWD=password;Encrypt=true\n```\n\n##### Connection String URI\n\n```\nmssql://username:password@localhost:1433/database?encrypt=true\nmssql://username:password@localhost/INSTANCE/database?encrypt=true&domain=DOMAIN&driver=msnodesqlv8\n```\n\n## Drivers\n\n### Tedious\n\nDefault driver, actively maintained and production ready. Platform independent, runs everywhere Node.js runs. Officially supported by Microsoft.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the configured tedious `Connection`. It can be used for attaching event handlers like in this example:\n```js\nrequire('mssql').connect(...config, beforeConnect: conn => {\n  conn.once('connect', err => { err ? console.error(err) : console.log('mssql connected')})\n  conn.once('end', err => { err ? console.error(err) : console.log('mssql disconnected')})\n}})\n```\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1434 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `false`).\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_1`, `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n- **options.appName** - Application name used for SQL server logging.\n- **options.abortTransactionOnError** - A boolean determining whether to rollback a transaction automatically if any error is encountered during the given transaction's execution. This sets the value for `XACT_ABORT` during the initial SQL phase of a connection.\n\nMore information about Tedious specific options: http://tediousjs.github.io/tedious/api-connection.html\n\n### Microsoft / Contributors Node V8 Driver for Node.js for SQL Server\n\n**Requires Node.js 0.12.x or newer. Windows only.** This driver is not part of the default package and must be installed separately by `npm install msnodesqlv8`. To use this driver, use this require syntax: `const sql = require('mssql/msnodesqlv8')`.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the connection configuration, that can be modified to pass extra parameters to the driver's `open()` method.\n- **connectionString** - Connection string (default: see below).\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not to use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n## Connections\n\nInternally, each `ConnectionPool` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool. Connection health check is built-in so once the dead connection is discovered, it is immediately replaced with a new one.\n\n**IMPORTANT**: Always attach an `error` listener to created connection. Whenever something goes wrong with the connection it will emit an error and if there is no listener it will crash your application with an uncaught error.\n\n```javascript\nconst pool = new sql.ConnectionPool({ /* config */ })\n```\n\n### Events\n\n- **error(err)** - Dispatched on connection error.\n\n---------------------------------------\n\n### connect ([callback])\n\nCreate a new connection pool. The initial probe connection is created to find out whether the configuration is valid.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after initial probe connection has established, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst pool = new sql.ConnectionPool({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n})\n\npool.connect(err => {\n    // ...\n})\n```\n\n__Errors__\n- ELOGIN (`ConnectionError`) - Login failed.\n- ETIMEOUT (`ConnectionError`) - Connection timeout.\n- EALREADYCONNECTED (`ConnectionError`) - Database is already connected!\n- EALREADYCONNECTING (`ConnectionError`) - Already connecting to database!\n- EINSTLOOKUP (`ConnectionError`) - Instance lookup failed.\n- ESOCKET (`ConnectionError`) - Socket error.\n\n---------------------------------------\n\n### close()\n\nClose all active connections in the pool.\n\n__Example__\n\n```javascript\npool.close()\n```\n\n## Request\n\n```javascript\nconst request = new sql.Request(/* [pool or transaction] */)\n```\n\nIf you omit pool/transaction argument, global pool is used instead.\n\n### Events\n\n- **recordset(columns)** - Dispatched when metadata for new recordset are parsed.\n- **row(row)** - Dispatched when new row is parsed.\n- **done(returnValue)** - Dispatched when request is complete.\n- **error(err)** - Dispatched on error.\n- **info(message)** - Dispatched on informational message.\n\n---------------------------------------\n\n### execute (procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.input('input_parameter', sql.Int, value)\nrequest.output('output_parameter', sql.Int)\nrequest.execute('procedure_name', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordsets.length) // count of recordsets returned by the procedure\n    console.log(result.recordsets[0].length) // count of rows contained in first recordset\n    console.log(result.recordset) // first recordset from result.recordsets\n    console.log(result.returnValue) // procedure return value\n    console.log(result.output) // key/value collection of output values\n    console.log(result.rowsAffected) // array of numbers, each number represents the number of rows affected by executed statemens\n\n    // ...\n})\n```\n\n__Errors__\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### input (name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automatically decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value)\nrequest.input('input_parameter', sql.Int, value)\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define your own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text)\n```\n\nYou can also overwrite the default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt)\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int)\nrequest.output('output_parameter', sql.VarChar(50), 'abc')\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### pipe (stream)\n\nSets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n\n__Arguments__\n\n- **stream** - Writable stream in object mode.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.pipe(stream)\nrequest.query('select * from mytable')\nstream.on('error', err => {\n    // ...\n})\nstream.on('finish', () => {\n    // ...\n})\n```\n\n---------------------------------------\n\n### query (command, [callback])\n\nExecute the SQL command. To execute commands like `create procedure` or if you plan to work with local temporary tables, use [batch](#batch-batch-callback) instead.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n\n    // ...\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number; select 2 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n    console.log(result.recordsets[0][0].number) // return 1\n    console.log(result.recordsets[1][0].number) // return 2\n})\n```\n\n**NOTE**: To get number of rows affected by the statement(s), see section [Affected Rows](#affected-rows).\n\n---------------------------------------\n\n### batch (batch, [callback])\n\nExecute the SQL command. Unlike [query](#query-command-callback), it doesn't use `sp_executesql`, so is not likely that SQL Server will reuse the execution plan it generates for the SQL. Use this only in special cases, for example when you need to execute commands like `create procedure` which can't be executed with [query](#query-command-callback) or if you're executing statements longer than 4000 chars on SQL Server 2000. Also you should use this if you're plan to work with local temporary tables ([more information here](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)).\n\nNOTE: Table-Valued Parameter (TVP) is not supported in batch.\n\n__Arguments__\n\n- **batch** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.batch('create procedure #temporary as select * from table', (err, result) => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\nYou can enable multiple recordsets in queries with the `request.multiple = true` command.\n\n---------------------------------------\n\n### bulk (table, [callback])\n\nPerform a bulk insert.\n\n__Arguments__\n\n- **table** - `sql.Table` instance.\n- **callback(err, rowCount)** - A callback which is called after bulk insert has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst table = new sql.Table('table_name') // or temporary table, e.g. #temptable\ntable.create = true\ntable.columns.add('a', sql.Int, {nullable: true, primary: true})\ntable.columns.add('b', sql.VarChar(50), {nullable: false})\ntable.rows.add(777, 'test')\n\nconst request = new sql.Request()\nrequest.bulk(table, (err, result) => {\n    // ... error checks\n})\n```\n\n**IMPORTANT**: Always indicate whether the column is nullable or not!\n\n**TIP**: If you set `table.create` to `true`, module will check if the table exists before it start sending data. If it doesn't, it will automatically create it. You can specify primary key columns by setting `primary: true` to column's options. Primary key constraint on multiple columns is supported.\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n__Errors__\n- ENAME (`RequestError`) - Table name must be specified for bulk insert.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### cancel()\n\nCancel currently executing request. Return `true` if cancellation packet was send successfully.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', (err, result) => {\n    console.log(err instanceof sql.RequestError)  // true\n    console.log(err.message)                      // Cancelled.\n    console.log(err.code)                         // ECANCEL\n\n    // ...\n})\n\nrequest.cancel()\n```\n\n## Transaction\n\n**IMPORTANT:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is acquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\n```\n\nIf you omit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    const request = new sql.Request(transaction)\n    request.query('insert into mytable (mycolumn) values (12345)', (err, result) => {\n        // ... error checks\n\n        transaction.commit(err => {\n            // ... error checks\n\n            console.log(\"Transaction committed.\")\n        })\n    })\n})\n```\n\nTransaction can also be created by `const transaction = pool.transaction()`. Requests can also be created by `const request = transaction.request()`.\n\n__Aborted transactions__\n\nThis example shows how you should correctly handle transaction errors when `abortTransactionOnError` (`XACT_ABORT`) is enabled. Added in 2.0.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    let rolledBack = false\n\n    transaction.on('rollback', aborted => {\n        // emited with aborted === true\n\n        rolledBack = true\n    })\n\n    new sql.Request(transaction)\n    .query('insert into mytable (bitcolumn) values (2)', (err, result) => {\n        // insert should fail because of invalid value\n\n        if (err) {\n            if (!rolledBack) {\n                transaction.rollback(err => {\n                    // ... error checks\n                })\n            }\n        } else {\n            transaction.commit(err => {\n                // ... error checks\n            })\n        }\n    })\n})\n```\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback(aborted)** - Dispatched on successful rollback with an argument determining if the transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### begin ([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYBEGUN (`TransactionError`) - Transaction has already begun.\n\n---------------------------------------\n\n### commit ([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has committed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.commit(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't commit transaction. There is a request in progress.\n\n---------------------------------------\n\n### rollback ([callback])\n\nRollback a transaction. If the queue isn't empty, all queued requests will be Cancelled and the transaction will be marked as aborted.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.rollback(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't rollback transaction. There is a request in progress.\n\n## Prepared Statement\n\n**IMPORTANT:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is acquired from the connection pool and all subsequent executions are executed exclusively on this connection. After you call `unprepare`, the connection is then released back to the connection pool.\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\n```\n\nIf you omit the connection argument, the global connection is used instead.\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        ps.unprepare(err => {\n            // ... error checks\n\n        })\n    })\n})\n```\n\n**IMPORTANT**: Remember that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement!\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n### input (name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int)\nps.input('input_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int)\nps.output('output_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### prepare (statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.prepare('select @param as value', err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYPREPARED (`PreparedStatementError`) - Statement is already prepared.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n\n---------------------------------------\n\n### execute (values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        console.log(result.recordset[0].value) // return 12345\n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\nYou can also stream executed request.\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.stream = true\n    const request = ps.execute({param: 12345})\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n        \n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\n**TIP**: To learn more about how number of affected rows works, see section [Affected Rows](#affected-rows).\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n\n---------------------------------------\n\n### unprepare ([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.unprepare(err => {\n        // ... error checks\n\n    })\n})\n```\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n\n## CLI\n\nBefore you can start using CLI, you must install `mssql` globally with `npm install mssql -g`. Once you do that you will be able to execute `mssql` command.\n\n__Setup__\n\nCreate a `.mssql.json` configuration file (anywhere). Structure of the file is the same as the standard configuration object.\n\n```json\n{\n    \"user\": \"...\",\n    \"password\": \"...\",\n    \"server\": \"localhost\",\n    \"database\": \"...\"\n}\n```\n\n__Example__\n\n```shell\necho \"select * from mytable\" | mssql /path/to/config\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}]]\n```\n\nYou can also query for multiple recordsets.\n\n```shell\necho \"select * from mytable; select * from myothertable\" | mssql\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}],[{\"id\":15,\"name\":\"Product name\"}]]\n```\n\nIf you omit config path argument, mssql will try to load it from current working directory.\n\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n\n{ srid: 0,\n  version: 1,\n  points:\n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nconst tvp = new sql.Table() // You can optionally specify table type name in the first argument.\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50))\ntvp.columns.add('b', sql.Int)\n\n// Add rows\ntvp.rows.add('hello tvp', 777) // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('tvp', tvp)\nrequest.execute('MyCustomStoredProcedure', (err, result) => {\n    // ... error checks\n\n    console.dir(result.recordsets[0][0]) // {a: 'hello tvp', b: 777}\n})\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n## Affected Rows\n\nIf you're performing `INSERT`, `UPDATE` or `DELETE` in a query, you can read number of affected rows. The `rowsAffected` variable is an array of numbers. Each number represents number of affected rows by a single statement.\n\n__Example using Promises__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100').then(result => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using callbacks__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100', (err, result) => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using streaming__\n\n```javascript\nconst request = new sql.Request()\nrequest.stream = true\nrequest.query('update myAwesomeTable set awesomness = 100')\nrequest.on('done', result => {\n    console.log(result.rowsAffected)\n})\n```\n\n## JSON support\n\nSQL Server 2016 introduced built-in JSON serialization. By default, JSON is returned as a plain text in a special column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B`.\n\nExample\n```sql\nSELECT\n    1 AS 'a.b.c',\n    2 AS 'a.b.d',\n    3 AS 'a.x',\n    4 AS 'a.y'\nFOR JSON PATH\n```\n\nResults in:\n```javascript\nrecordset = [ { 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B': '{\"a\":{\"b\":{\"c\":1,\"d\":2},\"x\":3,\"y\":4}}' } ]\n```\n\nYou can enable built-in JSON parser with `config.parseJSON = true`. Once you enable this, recordset will contain rows of parsed JS objects. Given the same example, result will look like this:\n```javascript\nrecordset = [ { a: { b: { c: 1, d: 2 }, x: 3, y: 4 } } ]\n```\n\n**IMPORTANT**: In order for this to work, there must be exactly one column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B` in the recordset.\n\nMore information about JSON support can be found in [official documentation](https://msdn.microsoft.com/en-us/library/dn921882.aspx).\n\n## Errors\n\nThere are 4 types of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, committing and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and its original stack may be cropped. You can always access original error with `err.originalError`.\n\nSQL Server may generate more than one error for one request so you can access preceding errors with `err.precedingErrors`.\n\n### Error Codes\n\nEach known error has `name`, `code` and `message` properties.\n\nName | Code | Message\n:--- | :--- | :---\n`ConnectionError` | ELOGIN | Login failed.\n`ConnectionError` | ETIMEOUT | Connection timeout.\n`ConnectionError` | EDRIVER | Unknown driver.\n`ConnectionError` | EALREADYCONNECTED | Database is already connected!\n`ConnectionError` | EALREADYCONNECTING | Already connecting to database!\n`ConnectionError` | ENOTOPEN | Connection not yet open.\n`ConnectionError` | EINSTLOOKUP | Instance lookup failed.\n`ConnectionError` | ESOCKET | Socket error.\n`ConnectionError` | ECONNCLOSED | Connection is closed.\n`TransactionError` | ENOTBEGUN | Transaction has not begun.\n`TransactionError` | EALREADYBEGUN | Transaction has already begun.\n`TransactionError` | EREQINPROG | Can't commit/rollback transaction. There is a request in progress.\n`TransactionError` | EABORT | Transaction has been aborted.\n`RequestError` | EREQUEST | Message from SQL Server. Error object contains additional details.\n`RequestError` | ECANCEL | Cancelled.\n`RequestError` | ETIMEOUT | Request timeout.\n`RequestError` | EARGS | Invalid number of arguments.\n`RequestError` | EINJECT | SQL injection warning.\n`RequestError` | ENOCONN | No connection is specified for that request.\n`PreparedStatementError` | EARGS | Invalid number of arguments.\n`PreparedStatementError` | EINJECT | SQL injection warning.\n`PreparedStatementError` | EALREADYPREPARED | Statement is already prepared.\n`PreparedStatementError` | ENOTPREPARED | Statement is not prepared.\n\n### Detailed SQL Errors\n\nSQL errors (`RequestError` with `err.code` equal to `EREQUEST`) contains additional details.\n\n- **err.number** - The error number.\n- **err.state** - The error state, used as a modifier to the number.\n- **err.class** - The class (severity) of the error. A class of less than 10 indicates an informational message. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **err.lineNumber** - The line number in the SQL batch or stored procedure that caused the error. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **err.serverName** - The server name.\n- **err.procName** - The stored procedure name.\n\n## Informational messages\n\nTo receive informational messages generated by `PRINT` or `RAISERROR` commands use:\n\n```javascript\nconst request = new sql.Request()\nrequest.on('info', info => {\n    console.dir(info)\n})\nrequest.query('print \\'Hello world.\\';', (err, result) => {\n    // ...\n})\n```\n\nStructure of informational message:\n\n- **info.message** - Message.\n- **info.number** - The message number.\n- **info.state** - The message state, used as a modifier to the number.\n- **info.class** - The class (severity) of the message. Equal or lower than 10. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **info.lineNumber** - The line number in the SQL batch or stored procedure that generated the message. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **info.serverName** - The server name.\n- **info.procName** - The stored procedure name.\n\n## Metadata\n\nRecordset metadata are accessible through the `recordset.columns` property.\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select convert(decimal(18, 4), 1) as first, \\'asdf\\' as second', (err, result) => {\n    console.dir(result.recordset.columns)\n\n    console.log(result.recordset.columns.first.type === sql.Decimal) // true\n    console.log(result.recordset.columns.second.type === sql.VarChar) // true\n})\n```\n\nColumns structure for example above:\n\n```javascript\n{\n    first: {\n        index: 0,\n        name: 'first',\n        length: 17,\n        type: [sql.Decimal],\n        scale: 4,\n        precision: 18,\n        nullable: true,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    },\n    second: {\n        index: 1,\n        name: 'second',\n        length: 4,\n        type: [sql.VarChar],\n        nullable: false,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    }\n}\n```\n\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\")               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\")           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\")      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar)                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\")              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33)              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33)          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33)       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date())        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date())     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Variant\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length. Types `sql.XML` and `sql.Variant` are not supported as input parameters.\n\n## SQL injection\n\nThis module has built-in SQL injection protection. Always use parameters or tagged template literals to pass sanitized values to your queries.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('myval', sql.VarChar, '-- commented')\nrequest.query('select @myval as myval', (err, result) => {\n    console.dir(result)\n})\n```\n\n## Known issues\n\n### Tedious\n\n- If you're facing problems with connecting SQL Server 2000, try setting the default TDS version to 7.1 with `config.options.tdsVersion = '7_1'` ([issue](https://github.com/tediousjs/node-mssql/issues/36))\n- If you're executing a statement longer than 4000 chars on SQL Server 2000, always use [batch](#batch-batch-callback) instead of [query](#query-command-callback) ([issue](https://github.com/tediousjs/node-mssql/issues/68))\n\n### msnodesqlv8\n\n- msnodesqlv8 has problem with errors during transactions - [reported](https://github.com/tediousjs/node-mssql/issues/77).\n- msnodesqlv8 doesn't support [detailed SQL errors](#detailed-sql-errors).\n\n## 3.x to 4.x changes\n\n- Library & tests are rewritten to ES6.\n- `Connection` was renamed to `ConnectionPool`.\n- Drivers are no longer loaded dynamically so the library is now compatible with Webpack. To use `msnodesqlv8` driver, use `const sql = require('mssql/msnodesqlv8')` syntax.\n- Every callback/resolve now returns `result` object only. This object contains `recordsets` (array of recordsets), `recordset` (first recordset from array of recordsets), `rowsAffected` (array of numbers representig number of affected rows by each insert/update/delete statement) and `output` (key/value collection of output parameters' values).\n- Affected rows are now returned as an array. A separate number for each SQL statement.\n- Directive `multiple: true` was removed.\n- `Transaction` and `PreparedStatement` internal queues was removed.\n- ConnectionPool no longer emits `connect` and `close` events.\n- Removed verbose and debug mode.\n- Removed support for `tds` and `msnodesql` drivers.\n- Removed support for Node versions lower than 4.\n\n[npm-image]: https://img.shields.io/npm/v/mssql.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/mssql\n[downloads-image]: https://img.shields.io/npm/dm/mssql.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/mssql\n[david-image]: https://img.shields.io/david/tediousjs/node-mssql.svg?style=flat-square\n[david-url]: https://david-dm.org/tediousjs/node-mssql\n[travis-image]: https://img.shields.io/travis/tediousjs/node-mssql/master.svg?style=flat-square&label=unit\n[travis-url]: https://travis-ci.org/tediousjs/node-mssql\n[appveyor-image]: https://img.shields.io/appveyor/ci/patriksimek/node-mssql-o4dhf/master.svg?style=flat-square&label=integration\n[appveyor-url]: https://ci.appveyor.com/project/patriksimek/node-mssql-o4dhf\n\n[tedious-url]: https://www.npmjs.com/package/tedious\n[msnodesqlv8-url]: https://www.npmjs.com/package/msnodesqlv8\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@4.3.6","_npmVersion":"6.4.1","_nodeVersion":"10.15.3","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-4ZgJ2VvM/Uo7LGvyFDXcIJjQ9koE2glJlKFO0dONDt4bAq+r/PQ0l4W3UIO/T6kss25e6DoUv6AE8ngwiepsrw==","shasum":"80477018b4f6bd581c751528e9a43e16995ed91d","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.3.6.tgz","fileCount":20,"unpackedSize":198994,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcm1BcCRA9TVsSAnZWagAAoHAP/3YfSyd9X/6o8mcGoj24\nD0BNFhcqaoVWXdZ6wt6DJKjfV1fIJnEeQw67sqgFeE/uyWyBaIuheI9YyDgD\n0g5xA/EsH0a0hYBQmD4UTqoMevmQjXQh8vnIUNkMW0Y7WQjnmen35GsNRVE1\nHbo+DWeLGeBtpmSBLULzztRZDND8rQLMDia7B9VSV/KLHxf7fCRTGcdjmcxm\ngNaCg0S15trvM5vjhyNcmQGtT24cWhMvgmITaCGK/Ke8ZXBdTs5JgETujfem\n7PU3T2XMaX/rfKM91MingbMWe2UquboLiJDpvi9A4gxXUfQQrEbd3a/8ivyT\njoDwvvP+Ree3uTeqePl0M7bq1NnL2jxG/a6pBPVD5vVvzyLHzvcl3BlGaRVl\nYAn0p5BQRpTDNsf6TMQSahQIVsWuuJxoQYaSXAqCL50M3q8RUpkEnKjpTzfY\nh47X7WRRNgUh4FMLF/JW+cNJMa+SKjQPC0ZxLz2uyoEnYEBGh8/giXXcIE12\nMMXG5fs2j1Sm3ahsqRhu6tqb2C189FHdG3oVnccupmvxpH4S2p9RR98OHQjp\nJTZJhAVgO9Sep4a15EcU7QQhwF7NDmKezzcFKKdV1RjFoqpMIitwNpv5b9tO\nSMcavs19bJHm35XvUhiAvLEIyfBHjvkUqiR51FtllyREZ1Rg931tzJ3atiq6\nRFqu\r\n=KeO5\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_4.3.6_1553682523926_0.7962215915288435"},"_hasShrinkwrap":false},"5.0.4":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"5.0.4","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.6.1","tedious":"^4.2.0"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"7559c99c42dc42f51d6fde5424490dbe36946333","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@5.0.4","_npmVersion":"6.4.1","_nodeVersion":"10.15.3","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-HmQu0L3d6LNAff1Jzqum+Ew0qFCHjMgu6B9XlwjVcDn7d6KNLR5GORFZqXhruEcJBaJNK4zGUIOxHgRqFOwjvQ==","shasum":"d5919dc2b0107c502c045bbd6dea20748b014c44","tarball":"https://registry.npmjs.org/mssql/-/mssql-5.0.4.tgz","fileCount":20,"unpackedSize":204745,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcm1ESCRA9TVsSAnZWagAAyS0P+gJ8bRMN/M/WZH8p3XBl\nQRLi1JNvKMr0hcBdu22XjFq6MWlSXnOAzbDAE2bwAVV82MUxIb2T1cD+yJ7K\nPEWcX4deiaR4YdfxQlTQ2Mf66I4IwqGtceEuf3+2lmk2vvkVTkyBPHnGAmdN\n+xh23oIo5Xiw0p50N5DzSxZIE3CFuFXCz/4Qq4H+7CmN4RT8OX40SJt3Iq9N\noMZgSmJfXTmuO1DDWcU79T+yDQkz5DU6RAKhFioWB6bGB+ZmzQYgcMyk1PTt\nDJIYygljy/qRWwtFA6jQmskQcykL8Zv3PgM8CfZtS35/V1g8mAOXpkhKrbvt\nBbxyUENZgdkSIvNeBORBmeRlNVvOCV2kLdNxVTF7iuxlsGubiR+XyxKBdjA0\nkUnT04ntMHo+lHXFFs/haau3k9O7iPNgkMjCeYERU4W54Nkfdsy6kQSM/Xsi\nFUT+Gd4jXXqu+dsyezYwYCaXujbnTJqp1PBjvyiPIF+6aTnw/vdkPlnnS2XT\nckhgPZoMD4XdKRZjXYXyI7bpLN7CmpOPRDLGh+y9h3zG3RXbbcN4xKfOTGE9\nnt01IEYZYeDDWkeJVLY0ov68r6vETeAhWB1oyaF6uaZY0eSSobfXTHeoDG+t\nJ5lWi+Pq+HU5mGtloGGFFesnw/J3xY87lWMsJOIC9nwOYKO3Qlxpi6gIWiOW\nBi+U\r\n=epXW\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_5.0.4_1553682705325_0.1668798954266848"},"_hasShrinkwrap":false},"4.3.7":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"4.3.7","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.6.1","tedious":"^2.7.1"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=4"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha -t 15000 test/common/unit.js","test-tedious":"mocha -t 15000 test/tedious","test-msnodesqlv8":"mocha -t 15000 test/msnodesqlv8","test-cli":"mocha -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"6fc04b13edd97d73e49acd3582ddba12187b2b00","readme":"# node-mssql\n\nMicrosoft SQL Server client for Node.js\n\n[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Travis CI][travis-image]][travis-url] [![Appveyor CI][appveyor-image]][appveyor-url] [![Join the chat at https://gitter.im/patriksimek/node-mssql](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/patriksimek/node-mssql?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSupported TDS drivers:\n- [Tedious][tedious-url] (pure JavaScript - Windows/macOS/Linux, default)\n- [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server][msnodesqlv8-url] (native - Windows only)\n\n## Installation\n\n    npm install mssql\n\nUse `@next` tag to install the most recent version with latest fixes and features.\n\n    npm install mssql@next\n\n## Quick Example\n\n```javascript\nconst sql = require('mssql')\n\nasync () => {\n    try {\n        await sql.connect('mssql://username:password@localhost/database')\n        const result = await sql.query`select * from mytable where id = ${value}`\n        console.dir(result)\n    } catch (err) {\n        // ... error checks\n    }\n}\n```\n\nIf you're on Windows Azure, add `?encrypt=true` to your connection string. See [docs](#configuration) to learn more.\n\n## Documentation\n\n### Examples\n\n* [Async/Await](#asyncawait)\n* [Promises](#promises)\n* [ES6 Tagged template literals](#es6-tagged-template-literals)\n* [Callbacks](#callbacks)\n* [Streaming](#streaming)\n* [Connection Pools](#connection-pools)\n\n### Configuration\n\n* [General](#general-same-for-all-drivers)\n* [Formats](#formats)\n\n### Drivers\n\n* [Tedious](#tedious)\n* [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server](#microsoft--contributors-node-v8-driver-for-nodejs-for-sql-server)\n\n### Connections\n\n* [ConnectionPool](#connections-1)\n* [connect](#connect-callback)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute-procedure-callback)\n* [input](#input-name-type-value)\n* [output](#output-name-type-value)\n* [pipe](#pipe-stream)\n* [query](#query-command-callback)\n* [batch](#batch-batch-callback)\n* [bulk](#bulk-table-callback)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin-isolationlevel-callback)\n* [commit](#commit-callback)\n* [rollback](#rollback-callback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#input-name-type)\n* [output](#output-name-type)\n* [prepare](#prepare-statement-callback)\n* [execute](#execute-values-callback)\n* [unprepare](#unprepare-callback)\n\n### Other\n\n* [CLI](#cli)\n* [Geography and Geometry](#geography-and-geometry)\n* [Table-Valued Parameter](#table-valued-parameter-tvp)\n* [Affected Rows](#affected-rows)\n* [JSON support](#json-support)\n* [Errors](#errors)\n* [Informational messages](#informational-messages)\n* [Metadata](#metadata)\n* [Data Types](#data-types)\n* [SQL injection](#sql-injection)\n* [Known Issues](#known-issues)\n* [Contributing](https://github.com/tediousjs/node-mssql/wiki/Contributing)\n* [3.x to 4.x changes](#3x-to-4x-changes)\n* [3.x Documentation](https://github.com/tediousjs/node-mssql/blob/1893969195045a250f0fdeeb2de7f30dcf6689ad/README.md)\n\n## Examples\n\n### Config\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...',\n\n    options: {\n        encrypt: true // Use this if you're on Windows Azure\n    }\n}\n```\n\n\n### Async/Await\n\n```javascript\nconst sql = require('mssql')\n\n(async function () {\n    try {\n        let pool = await sql.connect(config)\n        let result1 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .query('select * from mytable where id = @input_parameter')\n            \n        console.dir(result1)\n    \n        // Stored procedure\n        \n        let result2 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .output('output_parameter', sql.VarChar(50))\n            .execute('procedure_name')\n        \n        console.dir(result2)\n    } catch (err) {\n        // ... error checks\n    }\n})()\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Promises\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(pool => {\n    // Query\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .query('select * from mytable where id = @input_parameter')\n}).then(result => {\n    console.dir(result)\n    \n    // Stored procedure\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nNative Promise is used by default. You can easily change this with `sql.Promise = require('myownpromisepackage')`.\n\n### ES6 Tagged template literals\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(() => {\n    return sql.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n### Callbacks\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    // Query\n\n    new sql.Request().query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n    // Stored Procedure\n\n    new sql.Request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Streaming\n\nIf you plan to work with large amount of rows, you should always use streaming. Once you enable this, you must listen for events to receive data.\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    const request = new sql.Request()\n    request.stream = true // You can set streaming differently for each request\n    request.query('select * from verylargetable') // or request.execute(procedure)\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n## Connection Pools\n\nUsing a single connection pool for your application/service is recommended.\nInstantiating a pool with a callback, or immediately calling `.connect`, is asynchronous to ensure a connection can be\nestablished before returning. From that point, you're able to acquire connections as normal:  \n\n```javascript\nconst sql = require('mssql')\n\n// async/await style:\nconst pool1 = new sql.ConnectionPool(config).connect();\n\npool1.on('error', err => {\n    // ... error handler\n})\n\nasync function messageHandler() {\n    await pool1; // ensures that the pool has been created\n    try {\n    \tconst request = pool1.request(); // or: new sql.Request(pool1)\n    \tconst result = request.query('select 1 as number')\n    \tconsole.dir(result)\n    \treturn result;\n\t} catch (err) {\n        console.error('SQL error', err);\n\t}\n}\n\n// promise style:\nconst pool2 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n});\n\npool2.on('error', err => {\n    // ... error handler\n})\n\nfunction runStoredProcedure() {\n    return pool2.then((pool) => {\n\t\tpool.request() // or: new sql.Request(pool2)\n\t\t.input('input_parameter', sql.Int, 10)\n\t\t.output('output_parameter', sql.VarChar(50))\n\t\t.execute('procedure_name', (err, result) => {\n\t\t\t// ... error checks\n\t\t\tconsole.dir(result)\n\t\t})\n    });\n}\n```\n\nAwaiting or `.then`ing the pool creation is a safe way to ensure that the pool is always ready, without knowing where it\nis needed first. In practice, once the pool is created then there will be no delay for the next operation.\n\n**ES6 Tagged template literals**\n\n```javascript\nnew sql.ConnectionPool(config).connect().then(pool => {\n    return pool.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n## Configuration\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n### General (same for all drivers)\n\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **domain** - Once you set domain, driver will connect to SQL Server using domain login.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **connectionTimeout** - Connection timeout in ms (default: `15000`).\n- **requestTimeout** - Request timeout in ms (default: `15000`). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second. When passed via connection string, the key must be `request timeout`\n- **stream** - Stream recordsets/rows instead of returning them all at once as an argument of callback (default: `false`). You can also enable streaming for each request independently (`request.stream = true`). Always set to `true` if you plan to work with large amount of rows.\n- **parseJSON** - Parse JSON recordsets to JS objects (default: `false`). For more information please see section [JSON support](#json-support).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimum of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\nComplete list of pool options can be found [here](https://github.com/coopernurse/node-pool).\n\n### Formats\n\nIn addition to configuration object there is an option to pass config as a connection string. Two formats of connection string are supported.\n\n##### Classic Connection String\n\n```\nServer=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true\nDriver=msnodesqlv8;Server=(local)\\INSTANCE;Database=database;UID=DOMAIN\\username;PWD=password;Encrypt=true\n```\n\n##### Connection String URI\n\n```\nmssql://username:password@localhost:1433/database?encrypt=true\nmssql://username:password@localhost/INSTANCE/database?encrypt=true&domain=DOMAIN&driver=msnodesqlv8\n```\n\n## Drivers\n\n### Tedious\n\nDefault driver, actively maintained and production ready. Platform independent, runs everywhere Node.js runs. Officially supported by Microsoft.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the configured tedious `Connection`. It can be used for attaching event handlers like in this example:\n```js\nrequire('mssql').connect(...config, beforeConnect: conn => {\n  conn.once('connect', err => { err ? console.error(err) : console.log('mssql connected')})\n  conn.once('end', err => { err ? console.error(err) : console.log('mssql disconnected')})\n}})\n```\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1434 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `false`).\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_1`, `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n- **options.appName** - Application name used for SQL server logging.\n- **options.abortTransactionOnError** - A boolean determining whether to rollback a transaction automatically if any error is encountered during the given transaction's execution. This sets the value for `XACT_ABORT` during the initial SQL phase of a connection.\n\nMore information about Tedious specific options: http://tediousjs.github.io/tedious/api-connection.html\n\n### Microsoft / Contributors Node V8 Driver for Node.js for SQL Server\n\n**Requires Node.js 0.12.x or newer. Windows only.** This driver is not part of the default package and must be installed separately by `npm install msnodesqlv8`. To use this driver, use this require syntax: `const sql = require('mssql/msnodesqlv8')`.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the connection configuration, that can be modified to pass extra parameters to the driver's `open()` method.\n- **connectionString** - Connection string (default: see below).\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not to use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n## Connections\n\nInternally, each `ConnectionPool` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool. Connection health check is built-in so once the dead connection is discovered, it is immediately replaced with a new one.\n\n**IMPORTANT**: Always attach an `error` listener to created connection. Whenever something goes wrong with the connection it will emit an error and if there is no listener it will crash your application with an uncaught error.\n\n```javascript\nconst pool = new sql.ConnectionPool({ /* config */ })\n```\n\n### Events\n\n- **error(err)** - Dispatched on connection error.\n\n---------------------------------------\n\n### connect ([callback])\n\nCreate a new connection pool. The initial probe connection is created to find out whether the configuration is valid.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after initial probe connection has established, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst pool = new sql.ConnectionPool({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n})\n\npool.connect(err => {\n    // ...\n})\n```\n\n__Errors__\n- ELOGIN (`ConnectionError`) - Login failed.\n- ETIMEOUT (`ConnectionError`) - Connection timeout.\n- EALREADYCONNECTED (`ConnectionError`) - Database is already connected!\n- EALREADYCONNECTING (`ConnectionError`) - Already connecting to database!\n- EINSTLOOKUP (`ConnectionError`) - Instance lookup failed.\n- ESOCKET (`ConnectionError`) - Socket error.\n\n---------------------------------------\n\n### close()\n\nClose all active connections in the pool.\n\n__Example__\n\n```javascript\npool.close()\n```\n\n## Request\n\n```javascript\nconst request = new sql.Request(/* [pool or transaction] */)\n```\n\nIf you omit pool/transaction argument, global pool is used instead.\n\n### Events\n\n- **recordset(columns)** - Dispatched when metadata for new recordset are parsed.\n- **row(row)** - Dispatched when new row is parsed.\n- **done(returnValue)** - Dispatched when request is complete.\n- **error(err)** - Dispatched on error.\n- **info(message)** - Dispatched on informational message.\n\n---------------------------------------\n\n### execute (procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.input('input_parameter', sql.Int, value)\nrequest.output('output_parameter', sql.Int)\nrequest.execute('procedure_name', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordsets.length) // count of recordsets returned by the procedure\n    console.log(result.recordsets[0].length) // count of rows contained in first recordset\n    console.log(result.recordset) // first recordset from result.recordsets\n    console.log(result.returnValue) // procedure return value\n    console.log(result.output) // key/value collection of output values\n    console.log(result.rowsAffected) // array of numbers, each number represents the number of rows affected by executed statemens\n\n    // ...\n})\n```\n\n__Errors__\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### input (name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automatically decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value)\nrequest.input('input_parameter', sql.Int, value)\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define your own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text)\n```\n\nYou can also overwrite the default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt)\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int)\nrequest.output('output_parameter', sql.VarChar(50), 'abc')\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### pipe (stream)\n\nSets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n\n__Arguments__\n\n- **stream** - Writable stream in object mode.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.pipe(stream)\nrequest.query('select * from mytable')\nstream.on('error', err => {\n    // ...\n})\nstream.on('finish', () => {\n    // ...\n})\n```\n\n---------------------------------------\n\n### query (command, [callback])\n\nExecute the SQL command. To execute commands like `create procedure` or if you plan to work with local temporary tables, use [batch](#batch-batch-callback) instead.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n\n    // ...\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number; select 2 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n    console.log(result.recordsets[0][0].number) // return 1\n    console.log(result.recordsets[1][0].number) // return 2\n})\n```\n\n**NOTE**: To get number of rows affected by the statement(s), see section [Affected Rows](#affected-rows).\n\n---------------------------------------\n\n### batch (batch, [callback])\n\nExecute the SQL command. Unlike [query](#query-command-callback), it doesn't use `sp_executesql`, so is not likely that SQL Server will reuse the execution plan it generates for the SQL. Use this only in special cases, for example when you need to execute commands like `create procedure` which can't be executed with [query](#query-command-callback) or if you're executing statements longer than 4000 chars on SQL Server 2000. Also you should use this if you're plan to work with local temporary tables ([more information here](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)).\n\nNOTE: Table-Valued Parameter (TVP) is not supported in batch.\n\n__Arguments__\n\n- **batch** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.batch('create procedure #temporary as select * from table', (err, result) => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\nYou can enable multiple recordsets in queries with the `request.multiple = true` command.\n\n---------------------------------------\n\n### bulk (table, [callback])\n\nPerform a bulk insert.\n\n__Arguments__\n\n- **table** - `sql.Table` instance.\n- **callback(err, rowCount)** - A callback which is called after bulk insert has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst table = new sql.Table('table_name') // or temporary table, e.g. #temptable\ntable.create = true\ntable.columns.add('a', sql.Int, {nullable: true, primary: true})\ntable.columns.add('b', sql.VarChar(50), {nullable: false})\ntable.rows.add(777, 'test')\n\nconst request = new sql.Request()\nrequest.bulk(table, (err, result) => {\n    // ... error checks\n})\n```\n\n**IMPORTANT**: Always indicate whether the column is nullable or not!\n\n**TIP**: If you set `table.create` to `true`, module will check if the table exists before it start sending data. If it doesn't, it will automatically create it. You can specify primary key columns by setting `primary: true` to column's options. Primary key constraint on multiple columns is supported.\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n__Errors__\n- ENAME (`RequestError`) - Table name must be specified for bulk insert.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### cancel()\n\nCancel currently executing request. Return `true` if cancellation packet was send successfully.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', (err, result) => {\n    console.log(err instanceof sql.RequestError)  // true\n    console.log(err.message)                      // Cancelled.\n    console.log(err.code)                         // ECANCEL\n\n    // ...\n})\n\nrequest.cancel()\n```\n\n## Transaction\n\n**IMPORTANT:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is acquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\n```\n\nIf you omit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    const request = new sql.Request(transaction)\n    request.query('insert into mytable (mycolumn) values (12345)', (err, result) => {\n        // ... error checks\n\n        transaction.commit(err => {\n            // ... error checks\n\n            console.log(\"Transaction committed.\")\n        })\n    })\n})\n```\n\nTransaction can also be created by `const transaction = pool.transaction()`. Requests can also be created by `const request = transaction.request()`.\n\n__Aborted transactions__\n\nThis example shows how you should correctly handle transaction errors when `abortTransactionOnError` (`XACT_ABORT`) is enabled. Added in 2.0.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    let rolledBack = false\n\n    transaction.on('rollback', aborted => {\n        // emited with aborted === true\n\n        rolledBack = true\n    })\n\n    new sql.Request(transaction)\n    .query('insert into mytable (bitcolumn) values (2)', (err, result) => {\n        // insert should fail because of invalid value\n\n        if (err) {\n            if (!rolledBack) {\n                transaction.rollback(err => {\n                    // ... error checks\n                })\n            }\n        } else {\n            transaction.commit(err => {\n                // ... error checks\n            })\n        }\n    })\n})\n```\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback(aborted)** - Dispatched on successful rollback with an argument determining if the transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### begin ([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYBEGUN (`TransactionError`) - Transaction has already begun.\n\n---------------------------------------\n\n### commit ([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has committed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.commit(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't commit transaction. There is a request in progress.\n\n---------------------------------------\n\n### rollback ([callback])\n\nRollback a transaction. If the queue isn't empty, all queued requests will be Cancelled and the transaction will be marked as aborted.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.rollback(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't rollback transaction. There is a request in progress.\n\n## Prepared Statement\n\n**IMPORTANT:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is acquired from the connection pool and all subsequent executions are executed exclusively on this connection. After you call `unprepare`, the connection is then released back to the connection pool.\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\n```\n\nIf you omit the connection argument, the global connection is used instead.\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        ps.unprepare(err => {\n            // ... error checks\n\n        })\n    })\n})\n```\n\n**IMPORTANT**: Remember that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement!\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n### input (name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int)\nps.input('input_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int)\nps.output('output_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### prepare (statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.prepare('select @param as value', err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYPREPARED (`PreparedStatementError`) - Statement is already prepared.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n\n---------------------------------------\n\n### execute (values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        console.log(result.recordset[0].value) // return 12345\n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\nYou can also stream executed request.\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.stream = true\n    const request = ps.execute({param: 12345})\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n        \n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\n**TIP**: To learn more about how number of affected rows works, see section [Affected Rows](#affected-rows).\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n\n---------------------------------------\n\n### unprepare ([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.unprepare(err => {\n        // ... error checks\n\n    })\n})\n```\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n\n## CLI\n\nBefore you can start using CLI, you must install `mssql` globally with `npm install mssql -g`. Once you do that you will be able to execute `mssql` command.\n\n__Setup__\n\nCreate a `.mssql.json` configuration file (anywhere). Structure of the file is the same as the standard configuration object.\n\n```json\n{\n    \"user\": \"...\",\n    \"password\": \"...\",\n    \"server\": \"localhost\",\n    \"database\": \"...\"\n}\n```\n\n__Example__\n\n```shell\necho \"select * from mytable\" | mssql /path/to/config\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}]]\n```\n\nYou can also query for multiple recordsets.\n\n```shell\necho \"select * from mytable; select * from myothertable\" | mssql\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}],[{\"id\":15,\"name\":\"Product name\"}]]\n```\n\nIf you omit config path argument, mssql will try to load it from current working directory.\n\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n\n{ srid: 0,\n  version: 1,\n  points:\n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nconst tvp = new sql.Table() // You can optionally specify table type name in the first argument.\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50))\ntvp.columns.add('b', sql.Int)\n\n// Add rows\ntvp.rows.add('hello tvp', 777) // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('tvp', tvp)\nrequest.execute('MyCustomStoredProcedure', (err, result) => {\n    // ... error checks\n\n    console.dir(result.recordsets[0][0]) // {a: 'hello tvp', b: 777}\n})\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n## Affected Rows\n\nIf you're performing `INSERT`, `UPDATE` or `DELETE` in a query, you can read number of affected rows. The `rowsAffected` variable is an array of numbers. Each number represents number of affected rows by a single statement.\n\n__Example using Promises__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100').then(result => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using callbacks__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100', (err, result) => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using streaming__\n\n```javascript\nconst request = new sql.Request()\nrequest.stream = true\nrequest.query('update myAwesomeTable set awesomness = 100')\nrequest.on('done', result => {\n    console.log(result.rowsAffected)\n})\n```\n\n## JSON support\n\nSQL Server 2016 introduced built-in JSON serialization. By default, JSON is returned as a plain text in a special column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B`.\n\nExample\n```sql\nSELECT\n    1 AS 'a.b.c',\n    2 AS 'a.b.d',\n    3 AS 'a.x',\n    4 AS 'a.y'\nFOR JSON PATH\n```\n\nResults in:\n```javascript\nrecordset = [ { 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B': '{\"a\":{\"b\":{\"c\":1,\"d\":2},\"x\":3,\"y\":4}}' } ]\n```\n\nYou can enable built-in JSON parser with `config.parseJSON = true`. Once you enable this, recordset will contain rows of parsed JS objects. Given the same example, result will look like this:\n```javascript\nrecordset = [ { a: { b: { c: 1, d: 2 }, x: 3, y: 4 } } ]\n```\n\n**IMPORTANT**: In order for this to work, there must be exactly one column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B` in the recordset.\n\nMore information about JSON support can be found in [official documentation](https://msdn.microsoft.com/en-us/library/dn921882.aspx).\n\n## Errors\n\nThere are 4 types of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, committing and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and its original stack may be cropped. You can always access original error with `err.originalError`.\n\nSQL Server may generate more than one error for one request so you can access preceding errors with `err.precedingErrors`.\n\n### Error Codes\n\nEach known error has `name`, `code` and `message` properties.\n\nName | Code | Message\n:--- | :--- | :---\n`ConnectionError` | ELOGIN | Login failed.\n`ConnectionError` | ETIMEOUT | Connection timeout.\n`ConnectionError` | EDRIVER | Unknown driver.\n`ConnectionError` | EALREADYCONNECTED | Database is already connected!\n`ConnectionError` | EALREADYCONNECTING | Already connecting to database!\n`ConnectionError` | ENOTOPEN | Connection not yet open.\n`ConnectionError` | EINSTLOOKUP | Instance lookup failed.\n`ConnectionError` | ESOCKET | Socket error.\n`ConnectionError` | ECONNCLOSED | Connection is closed.\n`TransactionError` | ENOTBEGUN | Transaction has not begun.\n`TransactionError` | EALREADYBEGUN | Transaction has already begun.\n`TransactionError` | EREQINPROG | Can't commit/rollback transaction. There is a request in progress.\n`TransactionError` | EABORT | Transaction has been aborted.\n`RequestError` | EREQUEST | Message from SQL Server. Error object contains additional details.\n`RequestError` | ECANCEL | Cancelled.\n`RequestError` | ETIMEOUT | Request timeout.\n`RequestError` | EARGS | Invalid number of arguments.\n`RequestError` | EINJECT | SQL injection warning.\n`RequestError` | ENOCONN | No connection is specified for that request.\n`PreparedStatementError` | EARGS | Invalid number of arguments.\n`PreparedStatementError` | EINJECT | SQL injection warning.\n`PreparedStatementError` | EALREADYPREPARED | Statement is already prepared.\n`PreparedStatementError` | ENOTPREPARED | Statement is not prepared.\n\n### Detailed SQL Errors\n\nSQL errors (`RequestError` with `err.code` equal to `EREQUEST`) contains additional details.\n\n- **err.number** - The error number.\n- **err.state** - The error state, used as a modifier to the number.\n- **err.class** - The class (severity) of the error. A class of less than 10 indicates an informational message. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **err.lineNumber** - The line number in the SQL batch or stored procedure that caused the error. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **err.serverName** - The server name.\n- **err.procName** - The stored procedure name.\n\n## Informational messages\n\nTo receive informational messages generated by `PRINT` or `RAISERROR` commands use:\n\n```javascript\nconst request = new sql.Request()\nrequest.on('info', info => {\n    console.dir(info)\n})\nrequest.query('print \\'Hello world.\\';', (err, result) => {\n    // ...\n})\n```\n\nStructure of informational message:\n\n- **info.message** - Message.\n- **info.number** - The message number.\n- **info.state** - The message state, used as a modifier to the number.\n- **info.class** - The class (severity) of the message. Equal or lower than 10. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **info.lineNumber** - The line number in the SQL batch or stored procedure that generated the message. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **info.serverName** - The server name.\n- **info.procName** - The stored procedure name.\n\n## Metadata\n\nRecordset metadata are accessible through the `recordset.columns` property.\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select convert(decimal(18, 4), 1) as first, \\'asdf\\' as second', (err, result) => {\n    console.dir(result.recordset.columns)\n\n    console.log(result.recordset.columns.first.type === sql.Decimal) // true\n    console.log(result.recordset.columns.second.type === sql.VarChar) // true\n})\n```\n\nColumns structure for example above:\n\n```javascript\n{\n    first: {\n        index: 0,\n        name: 'first',\n        length: 17,\n        type: [sql.Decimal],\n        scale: 4,\n        precision: 18,\n        nullable: true,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    },\n    second: {\n        index: 1,\n        name: 'second',\n        length: 4,\n        type: [sql.VarChar],\n        nullable: false,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    }\n}\n```\n\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\")               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\")           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\")      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar)                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\")              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33)              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33)          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33)       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date())        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date())     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Variant\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length. Types `sql.XML` and `sql.Variant` are not supported as input parameters.\n\n## SQL injection\n\nThis module has built-in SQL injection protection. Always use parameters or tagged template literals to pass sanitized values to your queries.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('myval', sql.VarChar, '-- commented')\nrequest.query('select @myval as myval', (err, result) => {\n    console.dir(result)\n})\n```\n\n## Known issues\n\n### Tedious\n\n- If you're facing problems with connecting SQL Server 2000, try setting the default TDS version to 7.1 with `config.options.tdsVersion = '7_1'` ([issue](https://github.com/tediousjs/node-mssql/issues/36))\n- If you're executing a statement longer than 4000 chars on SQL Server 2000, always use [batch](#batch-batch-callback) instead of [query](#query-command-callback) ([issue](https://github.com/tediousjs/node-mssql/issues/68))\n\n### msnodesqlv8\n\n- msnodesqlv8 has problem with errors during transactions - [reported](https://github.com/tediousjs/node-mssql/issues/77).\n- msnodesqlv8 doesn't support [detailed SQL errors](#detailed-sql-errors).\n\n## 3.x to 4.x changes\n\n- Library & tests are rewritten to ES6.\n- `Connection` was renamed to `ConnectionPool`.\n- Drivers are no longer loaded dynamically so the library is now compatible with Webpack. To use `msnodesqlv8` driver, use `const sql = require('mssql/msnodesqlv8')` syntax.\n- Every callback/resolve now returns `result` object only. This object contains `recordsets` (array of recordsets), `recordset` (first recordset from array of recordsets), `rowsAffected` (array of numbers representig number of affected rows by each insert/update/delete statement) and `output` (key/value collection of output parameters' values).\n- Affected rows are now returned as an array. A separate number for each SQL statement.\n- Directive `multiple: true` was removed.\n- `Transaction` and `PreparedStatement` internal queues was removed.\n- ConnectionPool no longer emits `connect` and `close` events.\n- Removed verbose and debug mode.\n- Removed support for `tds` and `msnodesql` drivers.\n- Removed support for Node versions lower than 4.\n\n[npm-image]: https://img.shields.io/npm/v/mssql.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/mssql\n[downloads-image]: https://img.shields.io/npm/dm/mssql.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/mssql\n[david-image]: https://img.shields.io/david/tediousjs/node-mssql.svg?style=flat-square\n[david-url]: https://david-dm.org/tediousjs/node-mssql\n[travis-image]: https://img.shields.io/travis/tediousjs/node-mssql/master.svg?style=flat-square&label=unit\n[travis-url]: https://travis-ci.org/tediousjs/node-mssql\n[appveyor-image]: https://img.shields.io/appveyor/ci/patriksimek/node-mssql-o4dhf/master.svg?style=flat-square&label=integration\n[appveyor-url]: https://ci.appveyor.com/project/patriksimek/node-mssql-o4dhf\n\n[tedious-url]: https://www.npmjs.com/package/tedious\n[msnodesqlv8-url]: https://www.npmjs.com/package/msnodesqlv8\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@4.3.7","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-+cs1uBD2Hut6UNeCnJHUeikWKIEhMTlr8s1bOw2BaVTPcyau1fFUqt1rQRilEq/GsyGkkzrE+TKw0jlvbW5cWQ==","shasum":"cfc60e6f48db7471172158b9878fbb9a910c98ca","tarball":"https://registry.npmjs.org/mssql/-/mssql-4.3.7.tgz","fileCount":20,"unpackedSize":199183,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcnNWKCRA9TVsSAnZWagAAMYEP/3ZxDiq9agYwcajOEqEc\nkmjVMGofXJGuv5WKPDuzaYNz7uLYFlDfCtp/JsjL0uP/kdpDDhWK2BsC0g9C\ntwjtIbR+0oPyp4rGSLZzH9W8dvSOehOWXyiBQ+6W2JlnqHKlk+72mGZZNYLn\nLlV1LwoEoxMOcqEDdYj40Qm2zyq7CI7aya2+oO9MqytEeJioMVxV36D0JakN\n7NFw6bN00h+eJ/x8a4sd1Q0o8yyfs0BRPjfYbLxHLakUCvG8dzFuXI2+5gpS\nLPwFR4P7UDB0lpfOB6Eb/mHmRNWRmS2WGnVztExgQjhXjA+44xUr36hKIiAN\nSKUeZbH0VZm03yvRqhGN/48F5XVJlu4XjXWZs7781s8l+G4IbBXHfc9ozyYj\nfQA2Rr3HuMIHeqJePO7p3DhaLyXq5B5e44h+JeUdD7RenpnpZ9BB75qlMc6+\nGinL62BdbijeA3SjUfPvAZ0LYLQXln4UZDe1bW92me8JY0kPOirPraZW6rib\n+3EBrQMNbqg28JPss20a4KGUT1pqjy9lZTg8zAM8I85vwEwVKu3P7RdSd/Nu\nkUOsJE/6jeu7lj8eVC8b1qlhPyTCBQm6pSWfueZ1Y1eHIhPm7Mq0398ejO1Y\npSZBb/q8C3504hGrI3ya7d4AxLP6/Z9eNuTblRCj5GCJTD8+j2xBAGvC75NK\nCSjI\r\n=fz7j\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_4.3.7_1553782153939_0.02712324114579512"},"_hasShrinkwrap":false},"5.0.5":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"5.0.5","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.6.1","tedious":"^4.2.0"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"4c850359705bc27c5bb192e25291f71fa6ce8f50","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@5.0.5","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-RKkBhoajBW+79Lq9tDxlUTeu/w0xtg+kDC70h9xkKO3Otx5lcmyhH5Je2W2VwE54raWgXbhtXszH6dq9uszXqQ==","shasum":"04909b5fcbd78834c67681beea036015b559e7fa","tarball":"https://registry.npmjs.org/mssql/-/mssql-5.0.5.tgz","fileCount":20,"unpackedSize":204934,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcnNXjCRA9TVsSAnZWagAAdq8P+gMJcpLOMxR65tBBO+O6\nmsBsp6L9nAuVp38NeKMzzbhNAGbUKRHOxNATAqPXXX9JnMdBpLVm+Pdkx3BK\nBfjxDPKDip9LzK/z04/EyeblhthvMZOyXCtpBwXdAlq0iHKe7364d+PgSzyX\ny9/N7x13wifCeNkZB70xROUun2UuKxAImq+rlqbtCeWiLAHORlLLSTbRBsLp\n5DFI0AjG7y9IKAFO80XfO/nW2ZoMBYn1HJY3nSmYej0LHaB6oAf8+fOeWvE+\nItjKVwDJId58Nnh9lbuuuGtcKyA6hLoTfDvF8rsxALuTGxnnzRRTfgu0RojS\npKkzz/VHhAEX4uN9j8mWqXxPVDpQIWcr6ZG+/6EJCabWxNL48/d0xzMvw/CR\nQ4Gz3LRvw4OYDXpgcbgfNvqcwGBfcZFCJLzgjg0t4bRczJhE/TpoF1TnLroy\ncFGOaE4M8v/kPvJyOc7hu+kXr3SPTHdtD4x3Og8ln0w7aCYDh3cPIr9ncOQz\nQc5cf6x6sV0x9kSw2fwTrrzPksc0qdtwaL/1CgGD142Eh1sPBEJPvGfij/xI\n9177EYIuWtcJZCTpEQJVlEP8oJzQJA+fF2PccKlob3/SboxT+52na5g//DNV\nJs1iDwXAZdPhu5GIJPHZ3YCZnu8QkdKwO63q/mV3nZ/Dhx/7QeJjAAU1XqRM\nG/Qx\r\n=fKEQ\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_5.0.5_1553782242307_0.679509354229733"},"_hasShrinkwrap":false},"6.0.0-alpha.8":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"6.0.0-alpha.8","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^4","tarn":"^1.1.4","tedious":"^6.1.0"},"devDependencies":{"mocha":"^6","standard":"^12"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"69d6a662ed5fd6183e6a2bd3e424bd53a2f7784b","readme":"# node-mssql\n\nMicrosoft SQL Server client for Node.js\n\n[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Travis CI][travis-image]][travis-url] [![Appveyor CI][appveyor-image]][appveyor-url] [![Join the chat at https://gitter.im/patriksimek/node-mssql](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/patriksimek/node-mssql?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSupported TDS drivers:\n- [Tedious][tedious-url] (pure JavaScript - Windows/macOS/Linux, default)\n- [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server][msnodesqlv8-url] (native - Windows only)\n\n## Installation\n\n    npm install mssql\n\n## Quick Example\n\n```javascript\nconst sql = require('mssql')\n\nasync () => {\n    try {\n        // make sure that any items are correctly URL encoded in the connection string\n        await sql.connect('mssql://username:password@localhost/database')\n        const result = await sql.query`select * from mytable where id = ${value}`\n        console.dir(result)\n    } catch (err) {\n        // ... error checks\n    }\n}\n```\n\nIf you're on Windows Azure, add `?encrypt=true` to your connection string. See [docs](#configuration) to learn more.\n\nParts of the connection URI should be correctly URL encoded so that the URI can be parsed correctly.\n\n## Documentation\n\n### Examples\n\n* [Async/Await](#asyncawait)\n* [Promises](#promises)\n* [ES6 Tagged template literals](#es6-tagged-template-literals)\n* [Callbacks](#callbacks)\n* [Streaming](#streaming)\n* [Connection Pools](#connection-pools)\n\n### Configuration\n\n* [General](#general-same-for-all-drivers)\n* [Formats](#formats)\n\n### Drivers\n\n* [Tedious](#tedious)\n* [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server](#microsoft--contributors-node-v8-driver-for-nodejs-for-sql-server)\n\n### Connections\n\n* [ConnectionPool](#connections-1)\n* [connect](#connect-callback)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute-procedure-callback)\n* [input](#input-name-type-value)\n* [output](#output-name-type-value)\n* [pipe](#pipe-stream)\n* [query](#query-command-callback)\n* [batch](#batch-batch-callback)\n* [bulk](#bulk-table-options-callback)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin-isolationlevel-callback)\n* [commit](#commit-callback)\n* [rollback](#rollback-callback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#input-name-type)\n* [output](#output-name-type)\n* [prepare](#prepare-statement-callback)\n* [execute](#execute-values-callback)\n* [unprepare](#unprepare-callback)\n\n### Other\n\n* [CLI](#cli)\n* [Geography and Geometry](#geography-and-geometry)\n* [Table-Valued Parameter](#table-valued-parameter-tvp)\n* [Affected Rows](#affected-rows)\n* [JSON support](#json-support)\n* [Errors](#errors)\n* [Informational messages](#informational-messages)\n* [Metadata](#metadata)\n* [Data Types](#data-types)\n* [SQL injection](#sql-injection)\n* [Known Issues](#known-issues)\n* [Contributing](https://github.com/tediousjs/node-mssql/wiki/Contributing)\n* [4.x to 5.x changes](#4x-to-5x-changes)\n* [3.x to 4.x changes](#3x-to-4x-changes)\n* [3.x Documentation](https://github.com/tediousjs/node-mssql/blob/1893969195045a250f0fdeeb2de7f30dcf6689ad/README.md)\n\n## Examples\n\n### Config\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...',\n}\n```\n\n\n### Async/Await\n\n```javascript\nconst sql = require('mssql')\n\n(async function () {\n    try {\n        let pool = await sql.connect(config)\n        let result1 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .query('select * from mytable where id = @input_parameter')\n            \n        console.dir(result1)\n    \n        // Stored procedure\n        \n        let result2 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .output('output_parameter', sql.VarChar(50))\n            .execute('procedure_name')\n        \n        console.dir(result2)\n    } catch (err) {\n        // ... error checks\n    }\n})()\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Promises\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(pool => {\n    // Query\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .query('select * from mytable where id = @input_parameter')\n}).then(result => {\n    console.dir(result)\n    \n    // Stored procedure\n    \n    return pool.request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nNative Promise is used by default. You can easily change this with `sql.Promise = require('myownpromisepackage')`.\n\n### ES6 Tagged template literals\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(() => {\n    return sql.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n### Callbacks\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    // Query\n\n    new sql.Request().query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n    // Stored Procedure\n\n    new sql.Request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Streaming\n\nIf you plan to work with large amount of rows, you should always use streaming. Once you enable this, you must listen for events to receive data.\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    const request = new sql.Request()\n    request.stream = true // You can set streaming differently for each request\n    request.query('select * from verylargetable') // or request.execute(procedure)\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nWhen streaming large sets of data you want to back-off or chunk the amount of data you're processing\n to prevent memory exhaustion issues; you can use the `Request.pause()` function to do this. Here is\n an example of managing rows in batches of 15:\n\n```javascript\nlet rowsToProcess = [];\nrequest.on('row', row => {\n  rowsToProcess.push(row);\n  if (rowsToProcess.length >= 15) {\n    request.pause();\n    processRows();\n  }\n});\nrequest.on('done', () => {\n    processRows();\n});\n\nfunction processRows() {\n  // process rows\n  rowsToProcess = [];\n  request.resume();\n}\n```\n\n## Connection Pools\n\nUsing a single connection pool for your application/service is recommended.\nInstantiating a pool with a callback, or immediately calling `.connect`, is asynchronous to ensure a connection can be\nestablished before returning. From that point, you're able to acquire connections as normal:  \n\n```javascript\nconst sql = require('mssql')\n\n// async/await style:\nconst pool1 = new sql.ConnectionPool(config).connect();\n\npool1.on('error', err => {\n    // ... error handler\n})\n\nasync function messageHandler() {\n    await pool1; // ensures that the pool has been created\n    try {\n    \tconst request = pool1.request(); // or: new sql.Request(pool1)\n    \tconst result = request.query('select 1 as number')\n    \tconsole.dir(result)\n    \treturn result;\n\t} catch (err) {\n        console.error('SQL error', err);\n\t}\n}\n\n// promise style:\nconst pool2 = new sql.ConnectionPool(config, err => {\n    // ... error checks\n}).connect();\n\npool2.on('error', err => {\n    // ... error handler\n})\n\nfunction runStoredProcedure() {\n    return pool2.then((pool) => {\n\t\tpool.request() // or: new sql.Request(pool2)\n\t\t.input('input_parameter', sql.Int, 10)\n\t\t.output('output_parameter', sql.VarChar(50))\n\t\t.execute('procedure_name', (err, result) => {\n\t\t\t// ... error checks\n\t\t\tconsole.dir(result)\n\t\t})\n    });\n}\n```\n\nAwaiting or `.then`ing the pool creation is a safe way to ensure that the pool is always ready, without knowing where it\nis needed first. In practice, once the pool is created then there will be no delay for the next operation.\n\n**ES6 Tagged template literals**\n\n```javascript\nnew sql.ConnectionPool(config).connect().then(pool => {\n    return pool.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n## Configuration\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n### General (same for all drivers)\n\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **domain** - Once you set domain, driver will connect to SQL Server using domain login.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **connectionTimeout** - Connection timeout in ms (default: `15000`).\n- **requestTimeout** - Request timeout in ms (default: `15000`). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second. When passed via connection string, the key must be `request timeout`\n- **stream** - Stream recordsets/rows instead of returning them all at once as an argument of callback (default: `false`). You can also enable streaming for each request independently (`request.stream = true`). Always set to `true` if you plan to work with large amount of rows.\n- **parseJSON** - Parse JSON recordsets to JS objects (default: `false`). For more information please see section [JSON support](#json-support).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimum of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\nComplete list of pool options can be found [here](https://github.com/vincit/tarn.js/#usage).\n\n### Formats\n\nIn addition to configuration object there is an option to pass config as a connection string. Two formats of connection string are supported.\n\n##### Classic Connection String\n\n```\nServer=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true\nDriver=msnodesqlv8;Server=(local)\\INSTANCE;Database=database;UID=DOMAIN\\username;PWD=password;Encrypt=true\n```\n\n##### Connection String URI\n\n```\nmssql://username:password@localhost:1433/database?encrypt=true\nmssql://username:password@localhost/INSTANCE/database?encrypt=true&domain=DOMAIN&driver=msnodesqlv8\n```\n\n## Drivers\n\n### Tedious\n\nDefault driver, actively maintained and production ready. Platform independent, runs everywhere Node.js runs. Officially supported by Microsoft.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the configured tedious `Connection`. It can be used for attaching event handlers like in this example:\n```js\nrequire('mssql').connect(...config, beforeConnect: conn => {\n  conn.once('connect', err => { err ? console.error(err) : console.log('mssql connected')})\n  conn.once('end', err => { err ? console.error(err) : console.log('mssql disconnected')})\n}})\n```\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1434 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `true`).\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_1`, `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n- **options.appName** - Application name used for SQL server logging.\n- **options.abortTransactionOnError** - A boolean determining whether to rollback a transaction automatically if any error is encountered during the given transaction's execution. This sets the value for `XACT_ABORT` during the initial SQL phase of a connection.\n\nMore information about Tedious specific options: http://tediousjs.github.io/tedious/api-connection.html\n\n### Microsoft / Contributors Node V8 Driver for Node.js for SQL Server\n\n**Requires Node.js 0.12.x or newer. Windows only.** This driver is not part of the default package and must be installed separately by `npm install msnodesqlv8`. To use this driver, use this require syntax: `const sql = require('mssql/msnodesqlv8')`.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the connection configuration, that can be modified to pass extra parameters to the driver's `open()` method.\n- **connectionString** - Connection string (default: see below).\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not to use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n## Connections\n\nInternally, each `ConnectionPool` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool. Connection health check is built-in so once the dead connection is discovered, it is immediately replaced with a new one.\n\n**IMPORTANT**: Always attach an `error` listener to created connection. Whenever something goes wrong with the connection it will emit an error and if there is no listener it will crash your application with an uncaught error.\n\n```javascript\nconst pool = new sql.ConnectionPool({ /* config */ })\n```\n\n### Events\n\n- **error(err)** - Dispatched on connection error.\n\n---------------------------------------\n\n### connect ([callback])\n\nCreate a new connection pool. The initial probe connection is created to find out whether the configuration is valid.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after initial probe connection has established, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst pool = new sql.ConnectionPool({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n})\n\npool.connect(err => {\n    // ...\n})\n```\n\n__Errors__\n- ELOGIN (`ConnectionError`) - Login failed.\n- ETIMEOUT (`ConnectionError`) - Connection timeout.\n- EALREADYCONNECTED (`ConnectionError`) - Database is already connected!\n- EALREADYCONNECTING (`ConnectionError`) - Already connecting to database!\n- EINSTLOOKUP (`ConnectionError`) - Instance lookup failed.\n- ESOCKET (`ConnectionError`) - Socket error.\n\n---------------------------------------\n\n### close()\n\nClose all active connections in the pool.\n\n__Example__\n\n```javascript\npool.close()\n```\n\n## Request\n\n```javascript\nconst request = new sql.Request(/* [pool or transaction] */)\n```\n\nIf you omit pool/transaction argument, global pool is used instead.\n\n### Events\n\n- **recordset(columns)** - Dispatched when metadata for new recordset are parsed.\n- **row(row)** - Dispatched when new row is parsed.\n- **done(returnValue)** - Dispatched when request is complete.\n- **error(err)** - Dispatched on error.\n- **info(message)** - Dispatched on informational message.\n\n---------------------------------------\n\n### execute (procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.input('input_parameter', sql.Int, value)\nrequest.output('output_parameter', sql.Int)\nrequest.execute('procedure_name', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordsets.length) // count of recordsets returned by the procedure\n    console.log(result.recordsets[0].length) // count of rows contained in first recordset\n    console.log(result.recordset) // first recordset from result.recordsets\n    console.log(result.returnValue) // procedure return value\n    console.log(result.output) // key/value collection of output values\n    console.log(result.rowsAffected) // array of numbers, each number represents the number of rows affected by executed statemens\n\n    // ...\n})\n```\n\n__Errors__\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### input (name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automatically decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value)\nrequest.input('input_parameter', sql.Int, value)\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define your own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text)\n```\n\nYou can also overwrite the default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt)\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\nNB: Do not use parameters `@p{n}` as these are used by the internal drivers and cause a conflict.\n\n### output (name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int)\nrequest.output('output_parameter', sql.VarChar(50), 'abc')\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### pipe (stream)\n\nSets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n\n__Arguments__\n\n- **stream** - Writable stream in object mode.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.pipe(stream)\nrequest.query('select * from mytable')\nstream.on('error', err => {\n    // ...\n})\nstream.on('finish', () => {\n    // ...\n})\n```\n\n---------------------------------------\n\n### query (command, [callback])\n\nExecute the SQL command. To execute commands like `create procedure` or if you plan to work with local temporary tables, use [batch](#batch-batch-callback) instead.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n\n    // ...\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number; select 2 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n    console.log(result.recordsets[0][0].number) // return 1\n    console.log(result.recordsets[1][0].number) // return 2\n})\n```\n\n**NOTE**: To get number of rows affected by the statement(s), see section [Affected Rows](#affected-rows).\n\n---------------------------------------\n\n### batch (batch, [callback])\n\nExecute the SQL command. Unlike [query](#query-command-callback), it doesn't use `sp_executesql`, so is not likely that SQL Server will reuse the execution plan it generates for the SQL. Use this only in special cases, for example when you need to execute commands like `create procedure` which can't be executed with [query](#query-command-callback) or if you're executing statements longer than 4000 chars on SQL Server 2000. Also you should use this if you're plan to work with local temporary tables ([more information here](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)).\n\nNOTE: Table-Valued Parameter (TVP) is not supported in batch.\n\n__Arguments__\n\n- **batch** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.batch('create procedure #temporary as select * from table', (err, result) => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\nYou can enable multiple recordsets in queries with the `request.multiple = true` command.\n\n---------------------------------------\n\n### bulk (table, [options,] [callback])\n\nPerform a bulk insert.\n\n__Arguments__\n\n- **table** - `sql.Table` instance.\n- **options** - Options object to be passed through to driver (currently tedious only). Optional. If argument is a function it will be treated as the callback.\n- **callback(err, rowCount)** - A callback which is called after bulk insert has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst table = new sql.Table('table_name') // or temporary table, e.g. #temptable\ntable.create = true\ntable.columns.add('a', sql.Int, {nullable: true, primary: true})\ntable.columns.add('b', sql.VarChar(50), {nullable: false})\ntable.rows.add(777, 'test')\n\nconst request = new sql.Request()\nrequest.bulk(table, (err, result) => {\n    // ... error checks\n})\n```\n\n**IMPORTANT**: Always indicate whether the column is nullable or not!\n\n**TIP**: If you set `table.create` to `true`, module will check if the table exists before it start sending data. If it doesn't, it will automatically create it. You can specify primary key columns by setting `primary: true` to column's options. Primary key constraint on multiple columns is supported.\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n__Errors__\n- ENAME (`RequestError`) - Table name must be specified for bulk insert.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### cancel()\n\nCancel currently executing request. Return `true` if cancellation packet was send successfully.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', (err, result) => {\n    console.log(err instanceof sql.RequestError)  // true\n    console.log(err.message)                      // Cancelled.\n    console.log(err.code)                         // ECANCEL\n\n    // ...\n})\n\nrequest.cancel()\n```\n\n## Transaction\n\n**IMPORTANT:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is acquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\n```\n\nIf you omit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    const request = new sql.Request(transaction)\n    request.query('insert into mytable (mycolumn) values (12345)', (err, result) => {\n        // ... error checks\n\n        transaction.commit(err => {\n            // ... error checks\n\n            console.log(\"Transaction committed.\")\n        })\n    })\n})\n```\n\nTransaction can also be created by `const transaction = pool.transaction()`. Requests can also be created by `const request = transaction.request()`.\n\n__Aborted transactions__\n\nThis example shows how you should correctly handle transaction errors when `abortTransactionOnError` (`XACT_ABORT`) is enabled. Added in 2.0.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    let rolledBack = false\n\n    transaction.on('rollback', aborted => {\n        // emited with aborted === true\n\n        rolledBack = true\n    })\n\n    new sql.Request(transaction)\n    .query('insert into mytable (bitcolumn) values (2)', (err, result) => {\n        // insert should fail because of invalid value\n\n        if (err) {\n            if (!rolledBack) {\n                transaction.rollback(err => {\n                    // ... error checks\n                })\n            }\n        } else {\n            transaction.commit(err => {\n                // ... error checks\n            })\n        }\n    })\n})\n```\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback(aborted)** - Dispatched on successful rollback with an argument determining if the transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### begin ([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYBEGUN (`TransactionError`) - Transaction has already begun.\n\n---------------------------------------\n\n### commit ([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has committed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.commit(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't commit transaction. There is a request in progress.\n\n---------------------------------------\n\n### rollback ([callback])\n\nRollback a transaction. If the queue isn't empty, all queued requests will be Cancelled and the transaction will be marked as aborted.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.rollback(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't rollback transaction. There is a request in progress.\n\n## Prepared Statement\n\n**IMPORTANT:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is acquired from the connection pool and all subsequent executions are executed exclusively on this connection. After you call `unprepare`, the connection is then released back to the connection pool.\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\n```\n\nIf you omit the connection argument, the global connection is used instead.\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        // release the connection after queries are executed\n        ps.unprepare(err => {\n            // ... error checks\n\n        })\n    })\n})\n```\n\n**IMPORTANT**: Remember that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement when you've finished your queries!\n\nYou can execute multiple queries against the same prepared statement but you *must* unprepare the statement when you have finished using it otherwise you will cause the connection pool to run out of available connections.\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n### input (name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int)\nps.input('input_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int)\nps.output('output_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### prepare (statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.prepare('select @param as value', err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYPREPARED (`PreparedStatementError`) - Statement is already prepared.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n\n---------------------------------------\n\n### execute (values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        console.log(result.recordset[0].value) // return 12345\n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\nYou can also stream executed request.\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.stream = true\n    const request = ps.execute({param: 12345})\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n        \n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\n**TIP**: To learn more about how number of affected rows works, see section [Affected Rows](#affected-rows).\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n\n---------------------------------------\n\n### unprepare ([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.unprepare(err => {\n        // ... error checks\n\n    })\n})\n```\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n\n## CLI\n\nBefore you can start using CLI, you must install `mssql` globally with `npm install mssql -g`. Once you do that you will be able to execute `mssql` command.\n\n__Setup__\n\nCreate a `.mssql.json` configuration file (anywhere). Structure of the file is the same as the standard configuration object.\n\n```json\n{\n    \"user\": \"...\",\n    \"password\": \"...\",\n    \"server\": \"localhost\",\n    \"database\": \"...\"\n}\n```\n\n__Example__\n\n```shell\necho \"select * from mytable\" | mssql /path/to/config\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}]]\n```\n\nYou can also query for multiple recordsets.\n\n```shell\necho \"select * from mytable; select * from myothertable\" | mssql\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}],[{\"id\":15,\"name\":\"Product name\"}]]\n```\n\nIf you omit config path argument, mssql will try to load it from current working directory.\n\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n\n{ srid: 0,\n  version: 1,\n  points:\n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nconst tvp = new sql.Table() // You can optionally specify table type name in the first argument.\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50))\ntvp.columns.add('b', sql.Int)\n\n// Add rows\ntvp.rows.add('hello tvp', 777) // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('tvp', tvp)\nrequest.execute('MyCustomStoredProcedure', (err, result) => {\n    // ... error checks\n\n    console.dir(result.recordsets[0][0]) // {a: 'hello tvp', b: 777}\n})\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n## Affected Rows\n\nIf you're performing `INSERT`, `UPDATE` or `DELETE` in a query, you can read number of affected rows. The `rowsAffected` variable is an array of numbers. Each number represents number of affected rows by a single statement.\n\n__Example using Promises__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100').then(result => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using callbacks__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100', (err, result) => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using streaming__\n\n```javascript\nconst request = new sql.Request()\nrequest.stream = true\nrequest.query('update myAwesomeTable set awesomness = 100')\nrequest.on('done', result => {\n    console.log(result.rowsAffected)\n})\n```\n\n## JSON support\n\nSQL Server 2016 introduced built-in JSON serialization. By default, JSON is returned as a plain text in a special column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B`.\n\nExample\n```sql\nSELECT\n    1 AS 'a.b.c',\n    2 AS 'a.b.d',\n    3 AS 'a.x',\n    4 AS 'a.y'\nFOR JSON PATH\n```\n\nResults in:\n```javascript\nrecordset = [ { 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B': '{\"a\":{\"b\":{\"c\":1,\"d\":2},\"x\":3,\"y\":4}}' } ]\n```\n\nYou can enable built-in JSON parser with `config.parseJSON = true`. Once you enable this, recordset will contain rows of parsed JS objects. Given the same example, result will look like this:\n```javascript\nrecordset = [ { a: { b: { c: 1, d: 2 }, x: 3, y: 4 } } ]\n```\n\n**IMPORTANT**: In order for this to work, there must be exactly one column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B` in the recordset.\n\nMore information about JSON support can be found in [official documentation](https://msdn.microsoft.com/en-us/library/dn921882.aspx).\n\n## Errors\n\nThere are 4 types of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, committing and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and its original stack may be cropped. You can always access original error with `err.originalError`.\n\nSQL Server may generate more than one error for one request so you can access preceding errors with `err.precedingErrors`.\n\n### Error Codes\n\nEach known error has `name`, `code` and `message` properties.\n\nName | Code | Message\n:--- | :--- | :---\n`ConnectionError` | ELOGIN | Login failed.\n`ConnectionError` | ETIMEOUT | Connection timeout.\n`ConnectionError` | EDRIVER | Unknown driver.\n`ConnectionError` | EALREADYCONNECTED | Database is already connected!\n`ConnectionError` | EALREADYCONNECTING | Already connecting to database!\n`ConnectionError` | ENOTOPEN | Connection not yet open.\n`ConnectionError` | EINSTLOOKUP | Instance lookup failed.\n`ConnectionError` | ESOCKET | Socket error.\n`ConnectionError` | ECONNCLOSED | Connection is closed.\n`TransactionError` | ENOTBEGUN | Transaction has not begun.\n`TransactionError` | EALREADYBEGUN | Transaction has already begun.\n`TransactionError` | EREQINPROG | Can't commit/rollback transaction. There is a request in progress.\n`TransactionError` | EABORT | Transaction has been aborted.\n`RequestError` | EREQUEST | Message from SQL Server. Error object contains additional details.\n`RequestError` | ECANCEL | Cancelled.\n`RequestError` | ETIMEOUT | Request timeout.\n`RequestError` | EARGS | Invalid number of arguments.\n`RequestError` | EINJECT | SQL injection warning.\n`RequestError` | ENOCONN | No connection is specified for that request.\n`PreparedStatementError` | EARGS | Invalid number of arguments.\n`PreparedStatementError` | EINJECT | SQL injection warning.\n`PreparedStatementError` | EALREADYPREPARED | Statement is already prepared.\n`PreparedStatementError` | ENOTPREPARED | Statement is not prepared.\n\n### Detailed SQL Errors\n\nSQL errors (`RequestError` with `err.code` equal to `EREQUEST`) contains additional details.\n\n- **err.number** - The error number.\n- **err.state** - The error state, used as a modifier to the number.\n- **err.class** - The class (severity) of the error. A class of less than 10 indicates an informational message. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **err.lineNumber** - The line number in the SQL batch or stored procedure that caused the error. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **err.serverName** - The server name.\n- **err.procName** - The stored procedure name.\n\n## Informational messages\n\nTo receive informational messages generated by `PRINT` or `RAISERROR` commands use:\n\n```javascript\nconst request = new sql.Request()\nrequest.on('info', info => {\n    console.dir(info)\n})\nrequest.query('print \\'Hello world.\\';', (err, result) => {\n    // ...\n})\n```\n\nStructure of informational message:\n\n- **info.message** - Message.\n- **info.number** - The message number.\n- **info.state** - The message state, used as a modifier to the number.\n- **info.class** - The class (severity) of the message. Equal or lower than 10. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **info.lineNumber** - The line number in the SQL batch or stored procedure that generated the message. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **info.serverName** - The server name.\n- **info.procName** - The stored procedure name.\n\n## Metadata\n\nRecordset metadata are accessible through the `recordset.columns` property.\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select convert(decimal(18, 4), 1) as first, \\'asdf\\' as second', (err, result) => {\n    console.dir(result.recordset.columns)\n\n    console.log(result.recordset.columns.first.type === sql.Decimal) // true\n    console.log(result.recordset.columns.second.type === sql.VarChar) // true\n})\n```\n\nColumns structure for example above:\n\n```javascript\n{\n    first: {\n        index: 0,\n        name: 'first',\n        length: 17,\n        type: [sql.Decimal],\n        scale: 4,\n        precision: 18,\n        nullable: true,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    },\n    second: {\n        index: 1,\n        name: 'second',\n        length: 4,\n        type: [sql.VarChar],\n        nullable: false,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    }\n}\n```\n\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\")               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\")           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\")      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar)                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\")              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33)              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33)          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33)       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date())        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date())     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Variant\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length. Types `sql.XML` and `sql.Variant` are not supported as input parameters.\n\n## SQL injection\n\nThis module has built-in SQL injection protection. Always use parameters or tagged template literals to pass sanitized values to your queries.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('myval', sql.VarChar, '-- commented')\nrequest.query('select @myval as myval', (err, result) => {\n    console.dir(result)\n})\n```\n\n## Known issues\n\n### Tedious\n\n- If you're facing problems with connecting SQL Server 2000, try setting the default TDS version to 7.1 with `config.options.tdsVersion = '7_1'` ([issue](https://github.com/tediousjs/node-mssql/issues/36))\n- If you're executing a statement longer than 4000 chars on SQL Server 2000, always use [batch](#batch-batch-callback) instead of [query](#query-command-callback) ([issue](https://github.com/tediousjs/node-mssql/issues/68))\n\n### msnodesqlv8\n\n- msnodesqlv8 has problem with errors during transactions - [reported](https://github.com/tediousjs/node-mssql/issues/77).\n- msnodesqlv8 doesn't support [detailed SQL errors](#detailed-sql-errors).\n\n## 4.x to 5.x changes\n\n- Moved pool library from `node-pool` to `tarn.js`\n- `ConnectionPool.pool.size` deprecated, use `ConnectionPool.size` instead\n- `ConnectionPool.pool.available` deprecated, use `ConnectionPool.available` instead\n- `ConnectionPool.pool.pending` deprecated, use `ConnectionPool.pending` instead\n- `ConnectionPool.pool.borrowed` deprecated, use `ConnectionPool.borrowed` instead\n\n## 3.x to 4.x changes\n\n- Library & tests are rewritten to ES6.\n- `Connection` was renamed to `ConnectionPool`.\n- Drivers are no longer loaded dynamically so the library is now compatible with Webpack. To use `msnodesqlv8` driver, use `const sql = require('mssql/msnodesqlv8')` syntax.\n- Every callback/resolve now returns `result` object only. This object contains `recordsets` (array of recordsets), `recordset` (first recordset from array of recordsets), `rowsAffected` (array of numbers representig number of affected rows by each insert/update/delete statement) and `output` (key/value collection of output parameters' values).\n- Affected rows are now returned as an array. A separate number for each SQL statement.\n- Directive `multiple: true` was removed.\n- `Transaction` and `PreparedStatement` internal queues was removed.\n- ConnectionPool no longer emits `connect` and `close` events.\n- Removed verbose and debug mode.\n- Removed support for `tds` and `msnodesql` drivers.\n- Removed support for Node versions lower than 4.\n\n[npm-image]: https://img.shields.io/npm/v/mssql.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/mssql\n[downloads-image]: https://img.shields.io/npm/dm/mssql.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/mssql\n[david-image]: https://img.shields.io/david/tediousjs/node-mssql.svg?style=flat-square\n[david-url]: https://david-dm.org/tediousjs/node-mssql\n[travis-image]: https://img.shields.io/travis/tediousjs/node-mssql/master.svg?style=flat-square&label=unit\n[travis-url]: https://travis-ci.org/tediousjs/node-mssql\n[appveyor-image]: https://ci.appveyor.com/api/projects/status/e5gq1a0ujwams9t7/branch/master?svg=true\n[appveyor-url]: https://ci.appveyor.com/project/tediousjs/node-mssql\n\n[tedious-url]: https://www.npmjs.com/package/tedious\n[msnodesqlv8-url]: https://www.npmjs.com/package/msnodesqlv8\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@6.0.0-alpha.8","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-n0AFbphDNZ0m0DaiGMCweCAJHUQ+NTdpUK/88+s1AsYWTfH2+WdHDPZAeWcmWKLfu8llObRDGydy55U9Nma14g==","shasum":"05a99428137faaaab9a5ddae648b6231b5b373a5","tarball":"https://registry.npmjs.org/mssql/-/mssql-6.0.0-alpha.8.tgz","fileCount":20,"unpackedSize":210385,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcnNZDCRA9TVsSAnZWagAAkhAQAIjINS43ERjXkD45OnMX\nJBaPU2ZiyfIloJQQTLf0Q8wxtcQzF3fNtaG63iRnBaWd39ZCrBUiJrNLtY8b\nMYwOjRJG4G+zpvSEFIhY3gbbqzOGl6xL/pKh3Gt14c6Cj2Kf0wjcimZkdXT/\nOoSK5RQyAA0EuwfBKNhlrCfvugAoC9/jxyJPS1w5nvtJ9AyLIKp3IaltXx3k\nKN9qZDzaIFpfnO1/xJENsQXxa444J11I9Bno0zgZ/S2vWtY92ADzDqxsbr8b\nfQeiYd6WxJ+ysTjGBNFnfnc5l52rucD2HFIOO1ibvPgAuSZhzs4FoqLp2NUY\ntbaR33s4ZJMalfX8SnbpMP/B7qmrSFF/iFRsOcrqX9cIelgdQYhWcCJ5LEbo\n3HCkIxYKjV4GhcBq0aX5kpf0fEEfsRcvNSTxv0racY99vnUCaMq/q1QOSL/K\nBncPjJNZP1QjmYlKHGLNMw58w2mrCZ0v+SIfuzDcuHZSSxuBUOs7mEzXnr2B\n2FpqUayrPLnPJ7uUbMwgJ1/XpbCduoNeioaET3ssXRG0SZVTYoxj59+qiDZz\nua9fs22gBjkM8j4qJ5qdKgD70LdPJLonfk9+xHWoS+ae+Fdq4FhXjy+BVUdZ\nmLojEcgL+9dxjNLPKe2g/f7FHKWYXN2GTBk1zU5E4Xwoo68pzV35+jASdrtF\n50qm\r\n=Dv58\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_6.0.0-alpha.8_1553782339253_0.3340202751917827"},"_hasShrinkwrap":false},"5.0.6":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"5.0.6","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.6.1","tedious":"^4.2.0"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"0a5ca2b715a19aca65bf69da5097209b11d67c54","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@5.0.6","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-mkBeugMI3EWq9TWPedPZHwR2Zsujaoi5E9pYnfYP+PmN4HFYafx1yBQZzr4F2uPwM3n5tVuhop2jX0zq4glxuQ==","shasum":"5bfdcad884f011550ea673cb2e8d900782f59b78","tarball":"https://registry.npmjs.org/mssql/-/mssql-5.0.6.tgz","fileCount":20,"unpackedSize":205160,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJctmSUCRA9TVsSAnZWagAAOTYP/RZmlrEEyfm/y3rKYKcv\n4IZp52ASMX+TVRvalr2Ylcu+3Jy7f1iZo6SgwdncQI6qiWWEPJluCl2N8AXd\nAICXmvGMLpCQIIQG2Lp63XbOrChwJVI7S0GMtrNTIn/Qj1lRe0Z9vzqFN9c7\nAGU7dJ2jVR15w7717iCtEI8BQ+l0//EeDf09vzsFj0ag3QAl9IpuhgpPVtf3\nP9Hw/BaPoAD8oD8C+rNUI1ljUyz8Hh2S7hwd9u325QAMzTXoWoC7DPMoCjNG\nFN16P6rpN/Wt8HW4xU3TTiuZTrD6SjwxA5kUy8sLF22tz9gPs0hn0M6A4m70\nlrPbA0oAd+pc9xuXUJlgnUZWzet0SGKbLLyPPT89acIInQCFz+oKKiCXcaw6\noMGKymxUDgNrVGvq/SsaZ4XDjq6CBIV2in+m90MgwnOtgGgrbtX2KHmi7T3E\n6ZEgNPrS019/r7plnih/Fefllojf3hH3qJfSyV09zxnwfNRaNAilVLfrahc9\nGf0n3m0IFGcaPr5NbUpRLHyHxIAi52no/7SMZI7rE0W0vWczguzChnQddG7S\n4CITjkpkt2/PFjbu3yvMWMW/G3F0sKMedN0KElUoCJRn4DfGDTKRo5ZAxCwZ\nCqzpBmAIGw2Z04XMnHVJMwDiSRLx5Rl1wOD5A2KnU5583i2Ux1ulXQ5///VJ\n1KlN\r\n=qkHo\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_5.0.6_1555457171576_0.09588636261248262"},"_hasShrinkwrap":false},"5.1.0":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"5.1.0","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^3.2.6","generic-pool":"^3.6.1","tedious":"^4.2.0"},"devDependencies":{"mocha":"^5.2.0","standard":"^11.0.1"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"7286c5ac9e8a3bba813fa3f23de34bbeb06ce879","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@5.1.0","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-eHrqRWCEBaXo48y2ZBaDleFvrWm2vYm6dNm1ci0XLYxm6kUb4KRsvjl74iKFhfYyuF9z6qzmTe/QmoQk+YVcVw==","shasum":"a06d75866802a8e7e8b69df6a2dc7d2ada82bc4b","tarball":"https://registry.npmjs.org/mssql/-/mssql-5.1.0.tgz","fileCount":20,"unpackedSize":205265,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJct2GbCRA9TVsSAnZWagAAY0MP/2ey/k1+eP8YvjOVkttO\nRs8mMJrNi1Z5sKSfVaw8UeHRPhIxmPD3LhiO81wRigd8n1uILjeY8RE/puCS\nt1D3TCP9FcITV38R2MM9I6sLkVH80fmZ02D/2q5vCnousxupLbpvEBthia71\n6i4RS5dnedIfAROol0Ey/5oRC5tFxLr9e2IUrTh/KQx4xqUlk/4bLZ7/NxYc\ncddj5deuEdeVqZVeWeL1+ygsqkBwJtHCDTltdDPHU23SsQBMD4rkmzcEulI3\nF+XTVT1Y6U+kykxWgtHrBqBKJIPc1ujuHveL2Gyj/8MZUINL5vyrr8ItOoFM\nT1nQixbB/pEq4Ym+30KmjDb7EbRuGBpmKHOJynDBf6xM1Bt91w1LjfQ0FRn3\n79LJM0XkrYW5PQCdeqfqxWwu85vVar8W+IA0ClhbIjTLNgz7cMBuieEzqhS5\nORBENRMizgdTJ3xL0Z6AwJJWDcZNpQmrkKU3r/ZGclDNdit2Xp/QWw21v+ON\nbJsraL12o74TI0Jt4L9ExLWG7QgI5LBizhTcdUxvFip2tBL4IGpQGwbshZPq\nRZwe9wNawlw/LNpA5kol+S+QiLBakJL9ja0x+rsGUSQBoPLdcTt3g8NpR3xa\nd8r69pZoNh6iC9jEHqkRstsMi+tGxTwMJsO/51XOLCL4syPVFf6bCO8Q4eOs\nqB3P\r\n=2Vn1\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_5.1.0_1555521945779_0.1307351900607796"},"_hasShrinkwrap":false},"6.0.0-alpha.9":{"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"name":"mssql","description":"Microsoft SQL Server client for Node.js.","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"version":"6.0.0-alpha.9","main":"index.js","repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"license":"MIT","dependencies":{"debug":"^4","tarn":"^1.1.4","tedious":"^6.1.0"},"devDependencies":{"mocha":"^6","standard":"^12"},"engines":{"node":">=6"},"scripts":{"test":"npm run lint && npm run test-unit","lint":"standard","test-unit":"mocha --exit -t 15000 test/common/unit.js","test-tedious":"mocha --exit -t 15000 test/tedious","test-msnodesqlv8":"mocha --exit -t 15000 test/msnodesqlv8","test-cli":"mocha --exit -t 15000 test/common/cli.js"},"bin":{"mssql":"./bin/mssql"},"gitHead":"41f374105f048a5a4fc682b88bc0a431104fae89","readme":"# node-mssql\n\nMicrosoft SQL Server client for Node.js\n\n[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Travis CI][travis-image]][travis-url] [![Appveyor CI][appveyor-image]][appveyor-url] [![Join the chat at https://gitter.im/patriksimek/node-mssql](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/patriksimek/node-mssql?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSupported TDS drivers:\n- [Tedious][tedious-url] (pure JavaScript - Windows/macOS/Linux, default)\n- [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server][msnodesqlv8-url] (native - Windows only)\n\n## Installation\n\n    npm install mssql\n\n## Quick Example\n\n```javascript\nconst sql = require('mssql')\n\nasync () => {\n    try {\n        // make sure that any items are correctly URL encoded in the connection string\n        await sql.connect('mssql://username:password@localhost/database')\n        const result = await sql.query`select * from mytable where id = ${value}`\n        console.dir(result)\n    } catch (err) {\n        // ... error checks\n    }\n}\n```\n\nIf you're on Windows Azure, add `?encrypt=true` to your connection string. See [docs](#configuration) to learn more.\n\nParts of the connection URI should be correctly URL encoded so that the URI can be parsed correctly.\n\n## Documentation\n\n### Examples\n\n* [Async/Await](#asyncawait)\n* [Promises](#promises)\n* [ES6 Tagged template literals](#es6-tagged-template-literals)\n* [Callbacks](#callbacks)\n* [Streaming](#streaming)\n* [Connection Pools](#connection-pools)\n\n### Configuration\n\n* [General](#general-same-for-all-drivers)\n* [Formats](#formats)\n\n### Drivers\n\n* [Tedious](#tedious)\n* [Microsoft / Contributors Node V8 Driver for Node.js for SQL Server](#microsoft--contributors-node-v8-driver-for-nodejs-for-sql-server)\n\n### Connections\n\n* [ConnectionPool](#connections-1)\n* [connect](#connect-callback)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute-procedure-callback)\n* [input](#input-name-type-value)\n* [output](#output-name-type-value)\n* [pipe](#pipe-stream)\n* [query](#query-command-callback)\n* [batch](#batch-batch-callback)\n* [bulk](#bulk-table-options-callback)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin-isolationlevel-callback)\n* [commit](#commit-callback)\n* [rollback](#rollback-callback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#input-name-type)\n* [output](#output-name-type)\n* [prepare](#prepare-statement-callback)\n* [execute](#execute-values-callback)\n* [unprepare](#unprepare-callback)\n\n### Other\n\n* [CLI](#cli)\n* [Geography and Geometry](#geography-and-geometry)\n* [Table-Valued Parameter](#table-valued-parameter-tvp)\n* [Affected Rows](#affected-rows)\n* [JSON support](#json-support)\n* [Errors](#errors)\n* [Informational messages](#informational-messages)\n* [Metadata](#metadata)\n* [Data Types](#data-types)\n* [SQL injection](#sql-injection)\n* [Known Issues](#known-issues)\n* [Contributing](https://github.com/tediousjs/node-mssql/wiki/Contributing)\n* [4.x to 5.x changes](#4x-to-5x-changes)\n* [3.x to 4.x changes](#3x-to-4x-changes)\n* [3.x Documentation](https://github.com/tediousjs/node-mssql/blob/1893969195045a250f0fdeeb2de7f30dcf6689ad/README.md)\n\n## Examples\n\n### Config\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...',\n}\n```\n\n\n### Async/Await\n\n```javascript\nconst sql = require('mssql')\n\n(async function () {\n    try {\n        let pool = await sql.connect(config)\n        let result1 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .query('select * from mytable where id = @input_parameter')\n            \n        console.dir(result1)\n    \n        // Stored procedure\n        \n        let result2 = await pool.request()\n            .input('input_parameter', sql.Int, value)\n            .output('output_parameter', sql.VarChar(50))\n            .execute('procedure_name')\n        \n        console.dir(result2)\n    } catch (err) {\n        // ... error checks\n    }\n})()\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Promises\n\n#### Queries\n\n```javascript\nconst sql = require('mssql')\n\nsql.on('error', err => {\n    // ... error handler\n})\n\nsql.connect(config).then(pool => {\n    // Query\n    \n    return pool.request()\n        .input('input_parameter', sql.Int, value)\n        .query('select * from mytable where id = @input_parameter')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n  // ... error checks\n});\n```\n\n#### Stored procedures\n\n```js\nconst sql = require('mssql')\n\nsql.on('error', err => {\n    // ... error handler\n})\n\nsql.connect(config).then(pool => {\n    \n    // Stored procedure\n    \n    return pool.request()\n        .input('input_parameter', sql.Int, value)\n        .output('output_parameter', sql.VarChar(50))\n        .execute('procedure_name')\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nNative Promise is used by default. You can easily change this with `sql.Promise = require('myownpromisepackage')`.\n\n### ES6 Tagged template literals\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config).then(() => {\n    return sql.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n### Callbacks\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    // Query\n\n    new sql.Request().query('select 1 as number', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n\n    // Stored Procedure\n\n    new sql.Request()\n    .input('input_parameter', sql.Int, value)\n    .output('output_parameter', sql.VarChar(50))\n    .execute('procedure_name', (err, result) => {\n        // ... error checks\n\n        console.dir(result)\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\n### Streaming\n\nIf you plan to work with large amount of rows, you should always use streaming. Once you enable this, you must listen for events to receive data.\n\n```javascript\nconst sql = require('mssql')\n\nsql.connect(config, err => {\n    // ... error checks\n\n    const request = new sql.Request()\n    request.stream = true // You can set streaming differently for each request\n    request.query('select * from verylargetable') // or request.execute(procedure)\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n    })\n})\n\nsql.on('error', err => {\n    // ... error handler\n})\n```\n\nWhen streaming large sets of data you want to back-off or chunk the amount of data you're processing\n to prevent memory exhaustion issues; you can use the `Request.pause()` function to do this. Here is\n an example of managing rows in batches of 15:\n\n```javascript\nlet rowsToProcess = [];\nrequest.on('row', row => {\n  rowsToProcess.push(row);\n  if (rowsToProcess.length >= 15) {\n    request.pause();\n    processRows();\n  }\n});\nrequest.on('done', () => {\n    processRows();\n});\n\nfunction processRows() {\n  // process rows\n  rowsToProcess = [];\n  request.resume();\n}\n```\n\n## Connection Pools\n\nUsing a single connection pool for your application/service is recommended.\nInstantiating a pool with a callback, or immediately calling `.connect`, is asynchronous to ensure a connection can be\nestablished before returning. From that point, you're able to acquire connections as normal:  \n\n```javascript\nconst sql = require('mssql')\n\n// async/await style:\nconst pool1 = new sql.ConnectionPool(config);\nconst pool1Connect = pool1.connect();\n\npool1.on('error', err => {\n    // ... error handler\n})\n\nasync function messageHandler() {\n    await pool1Connect; // ensures that the pool has been created\n    try {\n    \tconst request = pool1.request(); // or: new sql.Request(pool1)\n    \tconst result = request.query('select 1 as number')\n    \tconsole.dir(result)\n    \treturn result;\n\t} catch (err) {\n        console.error('SQL error', err);\n\t}\n}\n\n// promise style:\nconst pool2 = new sql.ConnectionPool(config)\nconst pool2Connect = pool2.connect()\n\npool2.on('error', err => {\n    // ... error handler\n})\n\nfunction runStoredProcedure() {\n    return pool2Connect.then((pool) => {\n\t\tpool.request() // or: new sql.Request(pool2)\n\t\t.input('input_parameter', sql.Int, 10)\n\t\t.output('output_parameter', sql.VarChar(50))\n\t\t.execute('procedure_name', (err, result) => {\n\t\t\t// ... error checks\n\t\t\tconsole.dir(result)\n\t\t})\n    }).catch(err => {\n        // ... error handler\n    })\n}\n```\n\nAwaiting or `.then`ing the pool creation is a safe way to ensure that the pool is always ready, without knowing where it\nis needed first. In practice, once the pool is created then there will be no delay for the next operation.\n\n**ES6 Tagged template literals**\n\n```javascript\nnew sql.ConnectionPool(config).connect().then(pool => {\n    return pool.query`select * from mytable where id = ${value}`\n}).then(result => {\n    console.dir(result)\n}).catch(err => {\n    // ... error checks\n})\n```\n\nAll values are automatically sanitized against sql injection.\n\n## Configuration\n\n```javascript\nconst config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n### General (same for all drivers)\n\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **domain** - Once you set domain, driver will connect to SQL Server using domain login.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **connectionTimeout** - Connection timeout in ms (default: `15000`).\n- **requestTimeout** - Request timeout in ms (default: `15000`). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second. When passed via connection string, the key must be `request timeout`\n- **stream** - Stream recordsets/rows instead of returning them all at once as an argument of callback (default: `false`). You can also enable streaming for each request independently (`request.stream = true`). Always set to `true` if you plan to work with large amount of rows.\n- **parseJSON** - Parse JSON recordsets to JS objects (default: `false`). For more information please see section [JSON support](#json-support).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimum of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\nComplete list of pool options can be found [here](https://github.com/vincit/tarn.js/#usage).\n\n### Formats\n\nIn addition to configuration object there is an option to pass config as a connection string. Two formats of connection string are supported.\n\n##### Classic Connection String\n\n```\nServer=localhost,1433;Database=database;User Id=username;Password=password;Encrypt=true\nDriver=msnodesqlv8;Server=(local)\\INSTANCE;Database=database;UID=DOMAIN\\username;PWD=password;Encrypt=true\n```\n\n##### Connection String URI\n\n```\nmssql://username:password@localhost:1433/database?encrypt=true\nmssql://username:password@localhost/INSTANCE/database?encrypt=true&domain=DOMAIN&driver=msnodesqlv8\n```\n\n## Drivers\n\n### Tedious\n\nDefault driver, actively maintained and production ready. Platform independent, runs everywhere Node.js runs. Officially supported by Microsoft.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the configured tedious `Connection`. It can be used for attaching event handlers like in this example:\n```js\nrequire('mssql').connect(...config, beforeConnect: conn => {\n  conn.once('connect', err => { err ? console.error(err) : console.log('mssql connected')})\n  conn.once('end', err => { err ? console.error(err) : console.log('mssql disconnected')})\n}})\n```\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1434 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `true`).\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_1`, `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n- **options.appName** - Application name used for SQL server logging.\n- **options.abortTransactionOnError** - A boolean determining whether to rollback a transaction automatically if any error is encountered during the given transaction's execution. This sets the value for `XACT_ABORT` during the initial SQL phase of a connection.\n\nMore information about Tedious specific options: http://tediousjs.github.io/tedious/api-connection.html\n\n### Microsoft / Contributors Node V8 Driver for Node.js for SQL Server\n\n**Requires Node.js 0.12.x or newer. Windows only.** This driver is not part of the default package and must be installed separately by `npm install msnodesqlv8`. To use this driver, use this require syntax: `const sql = require('mssql/msnodesqlv8')`.\n\n**Extra options:**\n\n- **beforeConnect(conn)** - Function, which is invoked before opening the connection. The parameter `conn` is the connection configuration, that can be modified to pass extra parameters to the driver's `open()` method.\n- **connectionString** - Connection string (default: see below).\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not to use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n## Connections\n\nInternally, each `ConnectionPool` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool. Connection health check is built-in so once the dead connection is discovered, it is immediately replaced with a new one.\n\n**IMPORTANT**: Always attach an `error` listener to created connection. Whenever something goes wrong with the connection it will emit an error and if there is no listener it will crash your application with an uncaught error.\n\n```javascript\nconst pool = new sql.ConnectionPool({ /* config */ })\n```\n\n### Events\n\n- **error(err)** - Dispatched on connection error.\n\n---------------------------------------\n\n### connect ([callback])\n\nCreate a new connection pool. The initial probe connection is created to find out whether the configuration is valid.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after initial probe connection has established, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst pool = new sql.ConnectionPool({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n})\n\npool.connect(err => {\n    // ...\n})\n```\n\n__Errors__\n- ELOGIN (`ConnectionError`) - Login failed.\n- ETIMEOUT (`ConnectionError`) - Connection timeout.\n- EALREADYCONNECTED (`ConnectionError`) - Database is already connected!\n- EALREADYCONNECTING (`ConnectionError`) - Already connecting to database!\n- EINSTLOOKUP (`ConnectionError`) - Instance lookup failed.\n- ESOCKET (`ConnectionError`) - Socket error.\n\n---------------------------------------\n\n### close()\n\nClose all active connections in the pool.\n\n__Example__\n\n```javascript\npool.close()\n```\n\n## Request\n\n```javascript\nconst request = new sql.Request(/* [pool or transaction] */)\n```\n\nIf you omit pool/transaction argument, global pool is used instead.\n\n### Events\n\n- **recordset(columns)** - Dispatched when metadata for new recordset are parsed.\n- **row(row)** - Dispatched when new row is parsed.\n- **done(returnValue)** - Dispatched when request is complete.\n- **error(err)** - Dispatched on error.\n- **info(message)** - Dispatched on informational message.\n\n---------------------------------------\n\n### execute (procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.input('input_parameter', sql.Int, value)\nrequest.output('output_parameter', sql.Int)\nrequest.execute('procedure_name', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordsets.length) // count of recordsets returned by the procedure\n    console.log(result.recordsets[0].length) // count of rows contained in first recordset\n    console.log(result.recordset) // first recordset from result.recordsets\n    console.log(result.returnValue) // procedure return value\n    console.log(result.output) // key/value collection of output values\n    console.log(result.rowsAffected) // array of numbers, each number represents the number of rows affected by executed statemens\n\n    // ...\n})\n```\n\n__Errors__\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### input (name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automatically decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value)\nrequest.input('input_parameter', sql.Int, value)\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define your own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text)\n```\n\nYou can also overwrite the default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt)\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\nNB: Do not use parameters `@p{n}` as these are used by the internal drivers and cause a conflict.\n\n### output (name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int)\nrequest.output('output_parameter', sql.VarChar(50), 'abc')\n```\n\n__Errors__ (synchronous)\n- EARGS (`RequestError`) - Invalid number of arguments.\n- EINJECT (`RequestError`) - SQL injection warning.\n\n---------------------------------------\n\n### pipe (stream)\n\nSets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n\n__Arguments__\n\n- **stream** - Writable stream in object mode.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.pipe(stream)\nrequest.query('select * from mytable')\nstream.on('error', err => {\n    // ...\n})\nstream.on('finish', () => {\n    // ...\n})\n```\n\n---------------------------------------\n\n### query (command, [callback])\n\nExecute the SQL command. To execute commands like `create procedure` or if you plan to work with local temporary tables, use [batch](#batch-batch-callback) instead.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n\n    // ...\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select 1 as number; select 2 as number', (err, result) => {\n    // ... error checks\n\n    console.log(result.recordset[0].number) // return 1\n    console.log(result.recordsets[0][0].number) // return 1\n    console.log(result.recordsets[1][0].number) // return 2\n})\n```\n\n**NOTE**: To get number of rows affected by the statement(s), see section [Affected Rows](#affected-rows).\n\n---------------------------------------\n\n### batch (batch, [callback])\n\nExecute the SQL command. Unlike [query](#query-command-callback), it doesn't use `sp_executesql`, so is not likely that SQL Server will reuse the execution plan it generates for the SQL. Use this only in special cases, for example when you need to execute commands like `create procedure` which can't be executed with [query](#query-command-callback) or if you're executing statements longer than 4000 chars on SQL Server 2000. Also you should use this if you're plan to work with local temporary tables ([more information here](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)).\n\nNOTE: Table-Valued Parameter (TVP) is not supported in batch.\n\n__Arguments__\n\n- **batch** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.batch('create procedure #temporary as select * from table', (err, result) => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\nYou can enable multiple recordsets in queries with the `request.multiple = true` command.\n\n---------------------------------------\n\n### bulk (table, [options,] [callback])\n\nPerform a bulk insert.\n\n__Arguments__\n\n- **table** - `sql.Table` instance.\n- **options** - Options object to be passed through to driver (currently tedious only). Optional. If argument is a function it will be treated as the callback.\n- **callback(err, rowCount)** - A callback which is called after bulk insert has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst table = new sql.Table('table_name') // or temporary table, e.g. #temptable\ntable.create = true\ntable.columns.add('a', sql.Int, {nullable: true, primary: true})\ntable.columns.add('b', sql.VarChar(50), {nullable: false})\ntable.rows.add(777, 'test')\n\nconst request = new sql.Request()\nrequest.bulk(table, (err, result) => {\n    // ... error checks\n})\n```\n\n**IMPORTANT**: Always indicate whether the column is nullable or not!\n\n**TIP**: If you set `table.create` to `true`, module will check if the table exists before it start sending data. If it doesn't, it will automatically create it. You can specify primary key columns by setting `primary: true` to column's options. Primary key constraint on multiple columns is supported.\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n__Errors__\n- ENAME (`RequestError`) - Table name must be specified for bulk insert.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n- ENOCONN (`RequestError`) - No connection is specified for that request.\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- ECONNCLOSED (`ConnectionError`) - Connection is closed.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EABORT (`TransactionError`) - Transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### cancel()\n\nCancel currently executing request. Return `true` if cancellation packet was send successfully.\n\n__Example__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', (err, result) => {\n    console.log(err instanceof sql.RequestError)  // true\n    console.log(err.message)                      // Cancelled.\n    console.log(err.code)                         // ECANCEL\n\n    // ...\n})\n\nrequest.cancel()\n```\n\n## Transaction\n\n**IMPORTANT:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is acquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\n```\n\nIf you omit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    const request = new sql.Request(transaction)\n    request.query('insert into mytable (mycolumn) values (12345)', (err, result) => {\n        // ... error checks\n\n        transaction.commit(err => {\n            // ... error checks\n\n            console.log(\"Transaction committed.\")\n        })\n    })\n})\n```\n\nTransaction can also be created by `const transaction = pool.transaction()`. Requests can also be created by `const request = transaction.request()`.\n\n__Aborted transactions__\n\nThis example shows how you should correctly handle transaction errors when `abortTransactionOnError` (`XACT_ABORT`) is enabled. Added in 2.0.\n\n```javascript\nconst transaction = new sql.Transaction(/* [pool] */)\ntransaction.begin(err => {\n    // ... error checks\n\n    let rolledBack = false\n\n    transaction.on('rollback', aborted => {\n        // emited with aborted === true\n\n        rolledBack = true\n    })\n\n    new sql.Request(transaction)\n    .query('insert into mytable (bitcolumn) values (2)', (err, result) => {\n        // insert should fail because of invalid value\n\n        if (err) {\n            if (!rolledBack) {\n                transaction.rollback(err => {\n                    // ... error checks\n                })\n            }\n        } else {\n            transaction.commit(err => {\n                // ... error checks\n            })\n        }\n    })\n})\n```\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback(aborted)** - Dispatched on successful rollback with an argument determining if the transaction was aborted (by user or because of an error).\n\n---------------------------------------\n\n### begin ([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYBEGUN (`TransactionError`) - Transaction has already begun.\n\n---------------------------------------\n\n### commit ([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has committed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.commit(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't commit transaction. There is a request in progress.\n\n---------------------------------------\n\n### rollback ([callback])\n\nRollback a transaction. If the queue isn't empty, all queued requests will be Cancelled and the transaction will be marked as aborted.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst transaction = new sql.Transaction()\ntransaction.begin(err => {\n    // ... error checks\n\n    transaction.rollback(err => {\n        // ... error checks\n    })\n})\n```\n\n__Errors__\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n- EREQINPROG (`TransactionError`) - Can't rollback transaction. There is a request in progress.\n\n## Prepared Statement\n\n**IMPORTANT:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is acquired from the connection pool and all subsequent executions are executed exclusively on this connection. After you call `unprepare`, the connection is then released back to the connection pool.\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\n```\n\nIf you omit the connection argument, the global connection is used instead.\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement(/* [pool] */)\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        // release the connection after queries are executed\n        ps.unprepare(err => {\n            // ... error checks\n\n        })\n    })\n})\n```\n\n**IMPORTANT**: Remember that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement when you've finished your queries!\n\nYou can execute multiple queries against the same prepared statement but you *must* unprepare the statement when you have finished using it otherwise you will cause the connection pool to run out of available connections.\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n### input (name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int)\nps.input('input_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### output (name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int)\nps.output('output_parameter', sql.VarChar(50))\n```\n\n__Errors__ (synchronous)\n- EARGS (`PreparedStatementError`) - Invalid number of arguments.\n- EINJECT (`PreparedStatementError`) - SQL injection warning.\n\n---------------------------------------\n\n### prepare (statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.prepare('select @param as value', err => {\n    // ... error checks\n})\n```\n\n__Errors__\n- ENOTOPEN (`ConnectionError`) - Connection not yet open.\n- EALREADYPREPARED (`PreparedStatementError`) - Statement is already prepared.\n- ENOTBEGUN (`TransactionError`) - Transaction has not begun.\n\n---------------------------------------\n\n### execute (values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.execute({param: 12345}, (err, result) => {\n        // ... error checks\n\n        console.log(result.recordset[0].value) // return 12345\n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\nYou can also stream executed request.\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.stream = true\n    const request = ps.execute({param: 12345})\n\n    request.on('recordset', columns => {\n        // Emitted once for each recordset in a query\n    })\n\n    request.on('row', row => {\n        // Emitted for each row in a recordset\n    })\n\n    request.on('error', err => {\n        // May be emitted multiple times\n    })\n\n    request.on('done', result => {\n        // Always emitted as the last one\n        \n        console.log(result.rowsAffected) // Returns number of affected rows in case of INSERT, UPDATE or DELETE statement.\n        \n        ps.unprepare(err => {\n            // ... error checks\n        })\n    })\n})\n```\n\n**TIP**: To learn more about how number of affected rows works, see section [Affected Rows](#affected-rows).\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n- ETIMEOUT (`RequestError`) - Request timeout.\n- EREQUEST (`RequestError`) - *Message from SQL Server*\n- ECANCEL (`RequestError`) - Cancelled.\n\n---------------------------------------\n\n### unprepare ([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional. If omitted, returns [Promise](#promises).\n\n__Example__\n\n```javascript\nconst ps = new sql.PreparedStatement()\nps.input('param', sql.Int)\nps.prepare('select @param as value', err => {\n    // ... error checks\n\n    ps.unprepare(err => {\n        // ... error checks\n\n    })\n})\n```\n\n__Errors__\n- ENOTPREPARED (`PreparedStatementError`) - Statement is not prepared.\n\n## CLI\n\nBefore you can start using CLI, you must install `mssql` globally with `npm install mssql -g`. Once you do that you will be able to execute `mssql` command.\n\n__Setup__\n\nCreate a `.mssql.json` configuration file (anywhere). Structure of the file is the same as the standard configuration object.\n\n```json\n{\n    \"user\": \"...\",\n    \"password\": \"...\",\n    \"server\": \"localhost\",\n    \"database\": \"...\"\n}\n```\n\n__Example__\n\n```shell\necho \"select * from mytable\" | mssql /path/to/config\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}]]\n```\n\nYou can also query for multiple recordsets.\n\n```shell\necho \"select * from mytable; select * from myothertable\" | mssql\n```\nResults in:\n```json\n[[{\"username\":\"patriksimek\",\"password\":\"tooeasy\"}],[{\"id\":15,\"name\":\"Product name\"}]]\n```\n\nIf you omit config path argument, mssql will try to load it from current working directory.\n\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n\n{ srid: 0,\n  version: 1,\n  points:\n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nconst tvp = new sql.Table() // You can optionally specify table type name in the first argument.\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50))\ntvp.columns.add('b', sql.Int)\n\n// Add rows\ntvp.rows.add('hello tvp', 777) // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('tvp', tvp)\nrequest.execute('MyCustomStoredProcedure', (err, result) => {\n    // ... error checks\n\n    console.dir(result.recordsets[0][0]) // {a: 'hello tvp', b: 777}\n})\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`. You can optionally specify table type name in the first argument.\n\n## Affected Rows\n\nIf you're performing `INSERT`, `UPDATE` or `DELETE` in a query, you can read number of affected rows. The `rowsAffected` variable is an array of numbers. Each number represents number of affected rows by a single statement.\n\n__Example using Promises__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100').then(result => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using callbacks__\n\n```javascript\nconst request = new sql.Request()\nrequest.query('update myAwesomeTable set awesomness = 100', (err, result) => {\n    console.log(result.rowsAffected)\n})\n```\n\n__Example using streaming__\n\n```javascript\nconst request = new sql.Request()\nrequest.stream = true\nrequest.query('update myAwesomeTable set awesomness = 100')\nrequest.on('done', result => {\n    console.log(result.rowsAffected)\n})\n```\n\n## JSON support\n\nSQL Server 2016 introduced built-in JSON serialization. By default, JSON is returned as a plain text in a special column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B`.\n\nExample\n```sql\nSELECT\n    1 AS 'a.b.c',\n    2 AS 'a.b.d',\n    3 AS 'a.x',\n    4 AS 'a.y'\nFOR JSON PATH\n```\n\nResults in:\n```javascript\nrecordset = [ { 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B': '{\"a\":{\"b\":{\"c\":1,\"d\":2},\"x\":3,\"y\":4}}' } ]\n```\n\nYou can enable built-in JSON parser with `config.parseJSON = true`. Once you enable this, recordset will contain rows of parsed JS objects. Given the same example, result will look like this:\n```javascript\nrecordset = [ { a: { b: { c: 1, d: 2 }, x: 3, y: 4 } } ]\n```\n\n**IMPORTANT**: In order for this to work, there must be exactly one column named `JSON_F52E2B61-18A1-11d1-B105-00805F49916B` in the recordset.\n\nMore information about JSON support can be found in [official documentation](https://msdn.microsoft.com/en-us/library/dn921882.aspx).\n\n## Errors\n\nThere are 4 types of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, committing and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and its original stack may be cropped. You can always access original error with `err.originalError`.\n\nSQL Server may generate more than one error for one request so you can access preceding errors with `err.precedingErrors`.\n\n### Error Codes\n\nEach known error has `name`, `code` and `message` properties.\n\nName | Code | Message\n:--- | :--- | :---\n`ConnectionError` | ELOGIN | Login failed.\n`ConnectionError` | ETIMEOUT | Connection timeout.\n`ConnectionError` | EDRIVER | Unknown driver.\n`ConnectionError` | EALREADYCONNECTED | Database is already connected!\n`ConnectionError` | EALREADYCONNECTING | Already connecting to database!\n`ConnectionError` | ENOTOPEN | Connection not yet open.\n`ConnectionError` | EINSTLOOKUP | Instance lookup failed.\n`ConnectionError` | ESOCKET | Socket error.\n`ConnectionError` | ECONNCLOSED | Connection is closed.\n`TransactionError` | ENOTBEGUN | Transaction has not begun.\n`TransactionError` | EALREADYBEGUN | Transaction has already begun.\n`TransactionError` | EREQINPROG | Can't commit/rollback transaction. There is a request in progress.\n`TransactionError` | EABORT | Transaction has been aborted.\n`RequestError` | EREQUEST | Message from SQL Server. Error object contains additional details.\n`RequestError` | ECANCEL | Cancelled.\n`RequestError` | ETIMEOUT | Request timeout.\n`RequestError` | EARGS | Invalid number of arguments.\n`RequestError` | EINJECT | SQL injection warning.\n`RequestError` | ENOCONN | No connection is specified for that request.\n`PreparedStatementError` | EARGS | Invalid number of arguments.\n`PreparedStatementError` | EINJECT | SQL injection warning.\n`PreparedStatementError` | EALREADYPREPARED | Statement is already prepared.\n`PreparedStatementError` | ENOTPREPARED | Statement is not prepared.\n\n### Detailed SQL Errors\n\nSQL errors (`RequestError` with `err.code` equal to `EREQUEST`) contains additional details.\n\n- **err.number** - The error number.\n- **err.state** - The error state, used as a modifier to the number.\n- **err.class** - The class (severity) of the error. A class of less than 10 indicates an informational message. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **err.lineNumber** - The line number in the SQL batch or stored procedure that caused the error. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **err.serverName** - The server name.\n- **err.procName** - The stored procedure name.\n\n## Informational messages\n\nTo receive informational messages generated by `PRINT` or `RAISERROR` commands use:\n\n```javascript\nconst request = new sql.Request()\nrequest.on('info', info => {\n    console.dir(info)\n})\nrequest.query('print \\'Hello world.\\';', (err, result) => {\n    // ...\n})\n```\n\nStructure of informational message:\n\n- **info.message** - Message.\n- **info.number** - The message number.\n- **info.state** - The message state, used as a modifier to the number.\n- **info.class** - The class (severity) of the message. Equal or lower than 10. Detailed explanation can be found [here](https://msdn.microsoft.com/en-us/library/dd304156.aspx).\n- **info.lineNumber** - The line number in the SQL batch or stored procedure that generated the message. Line numbers begin at 1; therefore, if the line number is not applicable to the message, the value of LineNumber will be 0.\n- **info.serverName** - The server name.\n- **info.procName** - The stored procedure name.\n\n## Metadata\n\nRecordset metadata are accessible through the `recordset.columns` property.\n\n```javascript\nconst request = new sql.Request()\nrequest.query('select convert(decimal(18, 4), 1) as first, \\'asdf\\' as second', (err, result) => {\n    console.dir(result.recordset.columns)\n\n    console.log(result.recordset.columns.first.type === sql.Decimal) // true\n    console.log(result.recordset.columns.second.type === sql.VarChar) // true\n})\n```\n\nColumns structure for example above:\n\n```javascript\n{\n    first: {\n        index: 0,\n        name: 'first',\n        length: 17,\n        type: [sql.Decimal],\n        scale: 4,\n        precision: 18,\n        nullable: true,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    },\n    second: {\n        index: 1,\n        name: 'second',\n        length: 4,\n        type: [sql.VarChar],\n        nullable: false,\n        caseSensitive: false\n        identity: false\n        readOnly: true\n    }\n}\n```\n\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\")               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\")           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\")      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar)                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\")              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33)              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33)          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33)       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date())        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date())     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Variant\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length. Types `sql.XML` and `sql.Variant` are not supported as input parameters.\n\n## SQL injection\n\nThis module has built-in SQL injection protection. Always use parameters or tagged template literals to pass sanitized values to your queries.\n\n```javascript\nconst request = new sql.Request()\nrequest.input('myval', sql.VarChar, '-- commented')\nrequest.query('select @myval as myval', (err, result) => {\n    console.dir(result)\n})\n```\n\n## Known issues\n\n### Tedious\n\n- If you're facing problems with connecting SQL Server 2000, try setting the default TDS version to 7.1 with `config.options.tdsVersion = '7_1'` ([issue](https://github.com/tediousjs/node-mssql/issues/36))\n- If you're executing a statement longer than 4000 chars on SQL Server 2000, always use [batch](#batch-batch-callback) instead of [query](#query-command-callback) ([issue](https://github.com/tediousjs/node-mssql/issues/68))\n\n### msnodesqlv8\n\n- msnodesqlv8 has problem with errors during transactions - [reported](https://github.com/tediousjs/node-mssql/issues/77).\n- msnodesqlv8 doesn't support [detailed SQL errors](#detailed-sql-errors).\n\n## 4.x to 5.x changes\n\n- Moved pool library from `node-pool` to `tarn.js`\n- `ConnectionPool.pool.size` deprecated, use `ConnectionPool.size` instead\n- `ConnectionPool.pool.available` deprecated, use `ConnectionPool.available` instead\n- `ConnectionPool.pool.pending` deprecated, use `ConnectionPool.pending` instead\n- `ConnectionPool.pool.borrowed` deprecated, use `ConnectionPool.borrowed` instead\n\n## 3.x to 4.x changes\n\n- Library & tests are rewritten to ES6.\n- `Connection` was renamed to `ConnectionPool`.\n- Drivers are no longer loaded dynamically so the library is now compatible with Webpack. To use `msnodesqlv8` driver, use `const sql = require('mssql/msnodesqlv8')` syntax.\n- Every callback/resolve now returns `result` object only. This object contains `recordsets` (array of recordsets), `recordset` (first recordset from array of recordsets), `rowsAffected` (array of numbers representig number of affected rows by each insert/update/delete statement) and `output` (key/value collection of output parameters' values).\n- Affected rows are now returned as an array. A separate number for each SQL statement.\n- Directive `multiple: true` was removed.\n- `Transaction` and `PreparedStatement` internal queues was removed.\n- ConnectionPool no longer emits `connect` and `close` events.\n- Removed verbose and debug mode.\n- Removed support for `tds` and `msnodesql` drivers.\n- Removed support for Node versions lower than 4.\n\n[npm-image]: https://img.shields.io/npm/v/mssql.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/mssql\n[downloads-image]: https://img.shields.io/npm/dm/mssql.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/mssql\n[david-image]: https://img.shields.io/david/tediousjs/node-mssql.svg?style=flat-square\n[david-url]: https://david-dm.org/tediousjs/node-mssql\n[travis-image]: https://img.shields.io/travis/tediousjs/node-mssql/master.svg?style=flat-square&label=unit\n[travis-url]: https://travis-ci.org/tediousjs/node-mssql\n[appveyor-image]: https://ci.appveyor.com/api/projects/status/e5gq1a0ujwams9t7/branch/master?svg=true\n[appveyor-url]: https://ci.appveyor.com/project/tediousjs/node-mssql\n\n[tedious-url]: https://www.npmjs.com/package/tedious\n[msnodesqlv8-url]: https://www.npmjs.com/package/msnodesqlv8\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"homepage":"https://github.com/tediousjs/node-mssql#readme","_id":"mssql@6.0.0-alpha.9","_npmVersion":"6.4.0","_nodeVersion":"10.6.0","_npmUser":{"name":"dhensby","email":"npm@dhensby.co.uk"},"dist":{"integrity":"sha512-SR/1MH5jQq/A4/3I44XkkQdiucPhOpxBc/lE7Z6k4NDgTxwWcVsoC/NnDdr9p+BZ1nJ4Cra8aUPCVrBciRw2Ug==","shasum":"6238049e5f81b7175f3e0d58a9a63001df8f9f31","tarball":"https://registry.npmjs.org/mssql/-/mssql-6.0.0-alpha.9.tgz","fileCount":20,"unpackedSize":211030,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJct2JZCRA9TVsSAnZWagAAy9wQAKFZCjJCDbqcYdeECBh7\n1i8hbWlSLdrCT/4py8wVetKapuzStUWLIjJ+JF5HgDngo2Lzznlkr3xPC/va\n+DUFn7Fhh91mjir1R5kL0h13/zTvJf3zY+Qze7xEYib/vY2zD6yrPNS1vatc\nJVt8ySLt3HWm1OljMEqXVt6pstHgETUQWCBwPyRj1zrjUvzy+eZrlkHqi2HD\nC+1eBhlDejIaDBwQAJnHhDzHoHRpTU4GZfmv0ULJWLEMXK5xS1XJTzfBmZq5\nqen4NmYJzPhvd9TXTm7SrGXx0B6qtYrKikl1ZhhMw9PFg6wOp8wbx3H51l9H\nfjTnVwfyQKYqnszOEyN98ElVHUtxN7aXbLVJgm15i0FYCq+yc1kfgRyyv6Io\n99gUVgUkuxn+y7cvwnZE/niX3A5/5dHYVY8WQnO4DDQ0OiFDA9VXpN2i5PGK\nIwoggcWXZL31mH3H+dQ1JJPFvUL0DT0efTvwjsj9ZGtcKKhnSVvE8YIRsN8p\nFcB8+5/Ytk2/BIedGBFr7F66uyj+rvExjS3ULVQl1bsZ4gIVXD0dPzqd7wRJ\nbiq3a11dPyZGm1f38RkWMebQ03LMrkdcK9Cfw4ykTy8jdpeQnGMd0yXaP59C\n2D1fhiGgB4U2figWC09V4/aRVcKHEQdE0gVfpOz33BIQ3gv8LDgkS5v83x1E\nu9xJ\r\n=Na/a\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mssql_6.0.0-alpha.9_1555522136431_0.08498795994518216"},"_hasShrinkwrap":false}},"readme":"","maintainers":[{"email":"schreiber.arthur@googlemail.com","name":"arthurschreiber"},{"email":"npm@dhensby.co.uk","name":"dhensby"},{"email":"patrik@patriksimek.cz","name":"patriksimek"},{"email":"will+npm@willmorgan.co.uk","name":"wmorgan"}],"time":{"modified":"2019-04-17T17:28:59.267Z","created":"2013-08-10T23:27:58.461Z","0.2.0":"2013-08-10T23:28:01.771Z","0.2.1":"2013-08-11T01:11:44.412Z","0.2.2":"2013-08-11T23:10:26.030Z","0.2.3":"2013-08-14T16:14:18.379Z","0.2.4":"2013-08-15T14:42:26.802Z","0.2.5":"2013-09-05T14:13:41.499Z","0.3.0":"2013-09-08T00:08:12.265Z","0.3.1":"2013-09-13T15:59:15.598Z","0.3.2":"2013-09-30T11:23:02.870Z","0.3.3":"2013-10-23T19:59:47.817Z","0.3.4":"2013-10-23T21:31:08.980Z","0.4.0":"2013-12-12T00:44:31.198Z","0.4.1":"2013-12-13T12:14:03.581Z","0.4.2":"2014-01-06T03:00:19.423Z","0.4.3":"2014-01-14T23:03:27.154Z","0.4.4":"2014-01-22T20:48:58.647Z","0.4.5":"2014-01-23T01:32:44.641Z","0.5.0":"2014-01-25T02:51:08.098Z","0.5.1":"2014-04-01T16:44:20.324Z","0.5.2":"2014-04-04T17:33:11.891Z","0.5.3":"2014-04-04T17:50:18.198Z","0.5.4":"2014-06-15T20:42:31.767Z","0.5.5":"2014-06-24T02:02:08.639Z","0.6.0":"2014-07-03T19:49:38.046Z","0.6.1":"2014-07-03T22:31:11.509Z","0.6.2":"2014-07-04T00:48:56.897Z","1.0.0":"2014-07-04T01:23:13.408Z","1.0.1":"2014-07-04T02:04:58.463Z","1.0.2":"2014-07-04T15:42:15.228Z","1.1.0":"2014-07-12T23:24:57.241Z","1.1.1":"2014-08-07T11:33:31.572Z","1.2.0":"2014-08-26T15:52:12.209Z","1.2.1":"2014-10-07T21:57:02.079Z","1.3.0":"2014-10-27T21:46:47.128Z","2.0.0":"2015-02-17T22:23:03.771Z","2.1.0":"2015-02-20T04:15:19.076Z","2.1.1":"2015-02-25T12:23:45.225Z","2.1.2":"2015-03-28T03:30:42.046Z","2.1.3":"2015-05-02T22:27:35.017Z","2.1.4":"2015-06-05T17:14:39.462Z","2.1.5":"2015-06-05T20:22:44.048Z","2.1.6":"2015-06-17T15:19:00.855Z","2.1.7":"2015-08-09T20:08:25.870Z","2.1.8":"2015-08-11T14:15:27.780Z","2.2.0":"2015-08-17T14:40:50.641Z","2.2.1":"2015-09-19T19:42:32.813Z","2.3.0":"2015-09-20T14:22:28.848Z","2.3.1":"2015-09-21T15:19:57.717Z","2.3.2":"2015-11-11T18:52:01.116Z","2.4.0":"2015-12-11T17:06:18.414Z","2.5.0":"2015-12-17T01:18:17.688Z","2.6.0":"2015-12-25T01:45:57.910Z","2.6.1":"2015-12-25T01:47:24.275Z","2.6.2":"2015-12-25T02:17:34.395Z","3.0.0":"2016-01-07T23:05:10.660Z","3.0.1":"2016-02-04T01:28:43.678Z","3.1.0":"2016-02-13T22:24:55.622Z","3.1.1":"2016-02-21T00:14:57.930Z","3.1.2":"2016-03-08T20:50:26.374Z","3.2.0":"2016-04-11T00:24:04.633Z","3.2.1":"2016-04-15T23:16:38.816Z","3.3.0":"2016-05-06T23:08:19.403Z","4.0.0-alpha1":"2017-02-14T03:01:07.704Z","4.0.0-alpha2":"2017-03-11T02:12:12.122Z","4.0.0":"2017-04-01T00:40:14.304Z","4.0.1":"2017-04-01T22:00:32.694Z","4.0.2":"2017-04-19T20:15:04.153Z","4.0.3":"2017-04-25T16:43:19.986Z","4.0.4":"2017-04-25T21:38:35.916Z","4.1.0":"2017-09-29T16:26:32.347Z","4.2.0":"2018-07-05T19:47:38.799Z","4.2.1":"2018-08-05T21:12:00.182Z","4.2.2":"2018-10-17T21:41:46.182Z","4.2.3":"2018-11-06T16:01:11.013Z","4.3.0":"2018-11-22T12:32:40.044Z","5.0.0-alpha.1":"2018-11-22T14:24:31.533Z","5.0.0-alpha.2":"2019-01-07T10:26:07.511Z","5.0.0-alpha.3":"2019-01-07T14:30:56.596Z","5.0.0-alhpa.4":"2019-01-17T09:50:39.516Z","5.0.0-alpha.5":"2019-01-29T10:21:22.961Z","5.0.0-beta.1":"2019-02-04T14:49:53.710Z","4.3.1":"2019-02-04T18:15:07.733Z","4.3.2":"2019-02-13T17:14:48.770Z","4.3.3":"2019-03-07T09:43:54.803Z","5.0.0":"2019-03-07T10:12:18.239Z","6.0.0-alpha.1":"2019-03-07T17:15:11.840Z","6.0.0-alpha.2":"2019-03-08T11:21:18.873Z","4.3.4":"2019-03-09T00:19:43.650Z","5.0.1":"2019-03-09T00:25:09.144Z","6.0.0-alpha.3":"2019-03-09T00:28:18.440Z","4.3.5":"2019-03-09T13:21:58.471Z","5.0.2":"2019-03-09T13:23:59.352Z","6.0.0-alpha.4":"2019-03-09T13:26:23.936Z","5.0.3":"2019-03-13T12:52:48.227Z","6.0.0-alpha.5":"2019-03-13T12:55:07.115Z","6.0.0-alpha.6":"2019-03-15T10:33:35.044Z","6.0.0-alpha.7":"2019-03-25T13:03:11.217Z","4.3.6":"2019-03-27T10:28:44.208Z","5.0.4":"2019-03-27T10:31:45.466Z","4.3.7":"2019-03-28T14:09:14.141Z","5.0.5":"2019-03-28T14:10:42.442Z","6.0.0-alpha.8":"2019-03-28T14:12:19.433Z","5.0.6":"2019-04-16T23:26:11.746Z","5.1.0":"2019-04-17T17:25:46.175Z","6.0.0-alpha.9":"2019-04-17T17:28:56.648Z"},"author":{"name":"Patrik Simek","url":"https://patriksimek.cz"},"repository":{"type":"git","url":"git+https://github.com/tediousjs/node-mssql.git"},"readmeFilename":"","users":{"ekelvin":true,"hulio21":true,"isaacvitor":true,"ramalvakonda":true,"jesus81":true,"fernandezja":true,"deadcoder":true,"aireol":true,"nkudupudi":true,"ffphp":true,"silverbeetle":true,"f124275809":true,"baipgydx729":true,"tjwebb":true,"benoror":true,"zerodi":true,"wander_lp":true,"elosoman":true,"tarcio":true,"dego89":true,"knownasilya":true,"isaac95":true,"jasoncmcg":true,"keynside":true,"lvivier":true,"jamesbjackson":true,"justinshea":true,"aslezak":true,"shahnawazk":true,"damianof":true,"devmoreno":true,"gztomas":true,"johnny.young":true,"tiagobraga":true,"sjnnr":true,"tchiagoneses":true,"cfen":true,"anvk":true,"zenrumi":true,"cybortibor":true,"zhoutk":true,"awangxh":true,"edision":true,"rizowski":true,"sappharx":true,"danielmilner":true,"jeffersonaguilar":true,"nerdybeast":true,"figroc":true,"flpamr":true,"wattanar":true,"felixpang":true,"snowdream":true,"dangerdroid":true,"jasonevrtt":true,"hobbit71":true,"milfromoz":true,"leothelocust":true,"superhans":true,"kpax":true,"michjewastaken":true,"coolhanddev":true,"johnmanko":true,"mikepol":true,"kenjisan4u":true,"leizongmin":true,"d.barros":true,"ryuslunk":true,"sbvonline":true,"alykoshin":true,"bruno.m":true,"dockawash":true,"subas":true,"anpdx":true,"bvelas77":true,"eserozvataf":true,"siirial":true,"geooogle":true,"zlatip":true,"ivan.marquez":true,"jonathas":true,"knoja4":true,"cisc":true,"tonikhil1":true,"bugkarma":true,"thorn0":true,"hubbly":true,"donvercety":true,"joaquin.briceno":true,"kistoryg":true,"trendoid":true,"claudio76":true,"m1k3y":true,"sako73":true,"deepgoing":true,"guzgarcia":true,"isik":true,"mcpshiming":true,"sunfork":true,"mjaric":true,"scott.m.sarsfield":true,"jiyardev":true,"jonkoala":true,"andreiu":true,"leonardothibes":true,"brainpoint":true,"krishaamer":true,"ad8":true,"mikemena":true,"paul.bastowski":true,"ungurys":true,"faraoman":true,"atomgao":true,"jamesbender":true,"tomgao365":true,"craigpatten":true,"dericdavis":true,"guywicks":true,"cescnguyen":true,"jabedhasan21":true,"yvesg":true,"rh-dcawley":true,"jota":true,"gamersdelight":true,"danieljameskay":true,"morehao":true,"xfloops":true,"springy":true,"kirangopaluni":true,"rickkky":true,"partap":true,"shivayl":true,"astesio":true,"narunarthy":true,"noodie":true,"td3":true,"ahillier":true},"homepage":"https://github.com/tediousjs/node-mssql#readme","keywords":["database","mssql","sql","server","msnodesql","sqlserver","tds","node-tds","tedious","node-sqlserver","sqlserver","msnodesqlv8","azure","node-mssql"],"bugs":{"url":"https://github.com/tediousjs/node-mssql/issues"},"license":"MIT","_etag":"W/\"37ff31973a583a6a971ef6a5dcf18da7\"","_lastModified":"Wed, 17 Apr 2019 17:29:01 GMT"}